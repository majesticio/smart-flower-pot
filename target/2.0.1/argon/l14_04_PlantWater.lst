
c:/Users/crypt/Documents/IoT/l14_moisture-majesticio/l14_04_PlantWater/target/2.0.1/argon/l14_04_PlantWater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009a80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ddaa0  000ddaa0  0000daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ddaa8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005f8  2003ddac  000ddaac  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000044c  2003e3a8  2003e3a8  0002e3a8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de0a4  000de0a4  0002e0a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de0cc  000de0cc  0002e0cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0019dfd9  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001afd8  00000000  00000000  001cc0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002f4cf  00000000  00000000  001e7081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002da0  00000000  00000000  00216550  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007bf8  00000000  00000000  002192f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f6bf  00000000  00000000  00220ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00044980  00000000  00000000  002605a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010bda3  00000000  00000000  002a4f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008ab0  00000000  00000000  003b0ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fd1b 	bl	daa6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fd3d 	bl	daabc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddac 	.word	0x2003ddac
   d404c:	000ddaac 	.word	0x000ddaac
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e3a8 	.word	0x2003e3a8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fb35 	bl	d76d0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dda74 	.word	0x000dda74
   d4080:	000dda98 	.word	0x000dda98

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b88e 	b.w	d41a4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc87 	bl	d499c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 badf 	b.w	d7654 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 be59 	b.w	d6d4c <malloc>

000d409a <_Znaj>:
   d409a:	f002 be57 	b.w	d6d4c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 be5d 	b.w	d6d5c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fd92 	bl	d6bd4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6895 	.word	0x000d6895

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ca:	4770      	bx	lr

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000dd5e8 	.word	0x000dd5e8

000d4100 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4104:	6800      	ldr	r0, [r0, #0]
   d4106:	b108      	cbz	r0, d410c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4108:	f002 fe28 	bl	d6d5c <free>
class SystemClass {
   d410c:	4620      	mov	r0, r4
   d410e:	bd10      	pop	{r4, pc}

000d4110 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4110:	b40e      	push	{r1, r2, r3}
   d4112:	b503      	push	{r0, r1, lr}
   d4114:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4116:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4118:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d411c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d411e:	f003 f980 	bl	d7422 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4122:	b002      	add	sp, #8
   d4124:	f85d eb04 	ldr.w	lr, [sp], #4
   d4128:	b003      	add	sp, #12
   d412a:	4770      	bx	lr

000d412c <_ZN9TCPClientD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff ffcc 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	211c      	movs	r1, #28
   d4138:	f004 f9a7 	bl	d848a <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_Z16displayLargeTextPc>:
  publishing();
  autoPump(); //moisture activated pump 

} //end void loop

void displayLargeText(char desiredString[]) { //takes args and prints them to OLED
   d4140:	b538      	push	{r3, r4, r5, lr}

  display.clearDisplay();
   d4142:	4c16      	ldr	r4, [pc, #88]	; (d419c <_Z16displayLargeTextPc+0x5c>)
void displayLargeText(char desiredString[]) { //takes args and prints them to OLED
   d4144:	4605      	mov	r5, r0
  display.clearDisplay();
   d4146:	4620      	mov	r0, r4
   d4148:	f001 fbbc 	bl	d58c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);             // Start cursor at top-left corner
   d414c:	2200      	movs	r2, #0
   d414e:	4611      	mov	r1, r2
   d4150:	4620      	mov	r0, r4
   d4152:	f001 ff29 	bl	d5fa8 <_ZN12Adafruit_GFX9setCursorEss>
  display.setRotation(0) ;
   d4156:	4620      	mov	r0, r4
   d4158:	2100      	movs	r1, #0
   d415a:	f001 ff32 	bl	d5fc2 <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(2); 
   d415e:	4620      	mov	r0, r4
   d4160:	2102      	movs	r1, #2
   d4162:	f001 ff24 	bl	d5fae <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE); // Draw 'inverse' text
   d4166:	4620      	mov	r0, r4
   d4168:	2101      	movs	r1, #1
   d416a:	f001 ff25 	bl	d5fb8 <_ZN12Adafruit_GFX12setTextColorEt>
  display.printf("%s", desiredString);
   d416e:	462a      	mov	r2, r5
   d4170:	490b      	ldr	r1, [pc, #44]	; (d41a0 <_Z16displayLargeTextPc+0x60>)
   d4172:	4620      	mov	r0, r4
   d4174:	f7ff ffcc 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.display();
   d4178:	4620      	mov	r0, r4
   d417a:	f001 fc27 	bl	d59cc <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollright(0x00, 0x07);
   d417e:	4620      	mov	r0, r4
   d4180:	2207      	movs	r2, #7
   d4182:	2100      	movs	r1, #0
   d4184:	f001 fbf9 	bl	d597a <_ZN16Adafruit_SSD130616startscrollrightEhh>
  delay(1500);
   d4188:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d418c:	f003 fa20 	bl	d75d0 <delay>
  display.stopscroll();
   d4190:	4620      	mov	r0, r4
}
   d4192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.stopscroll();
   d4196:	f001 bc15 	b.w	d59c4 <_ZN16Adafruit_SSD130610stopscrollEv>
   d419a:	bf00      	nop
   d419c:	2003e4a0 	.word	0x2003e4a0
   d41a0:	000dc9e4 	.word	0x000dc9e4

000d41a4 <setup>:
void setup() {
   d41a4:	b538      	push	{r3, r4, r5, lr}
  pinMode(DUSTPIN,INPUT);
   d41a6:	2100      	movs	r1, #0
   d41a8:	2012      	movs	r0, #18
   d41aa:	f004 f8af 	bl	d830c <pinMode>
  pinMode(PUMPPIN,OUTPUT);
   d41ae:	2101      	movs	r1, #1
   d41b0:	2003      	movs	r0, #3
   d41b2:	f004 f8ab 	bl	d830c <pinMode>
  pinMode(RELAY,OUTPUT);
   d41b6:	2101      	movs	r1, #1
   d41b8:	2003      	movs	r0, #3
   d41ba:	f004 f8a7 	bl	d830c <pinMode>
  Serial.begin(9600);
   d41be:	f003 fb9d 	bl	d78fc <_Z16_fetch_usbserialv>
   d41c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41c6:	f003 fb8d 	bl	d78e4 <_ZN9USBSerial5beginEl>
    Serial.println(F("BME280 test"));
   d41ca:	f003 fb97 	bl	d78fc <_Z16_fetch_usbserialv>
   d41ce:	4945      	ldr	r1, [pc, #276]	; (d42e4 <setup+0x140>)
   d41d0:	f003 f907 	bl	d73e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    status = bme.begin();
   d41d4:	4844      	ldr	r0, [pc, #272]	; (d42e8 <setup+0x144>)
   d41d6:	f001 f998 	bl	d550a <_ZN15Adafruit_BME2805beginEv>
    if (!status)
   d41da:	bb60      	cbnz	r0, d4236 <setup+0x92>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d41dc:	f003 fb8e 	bl	d78fc <_Z16_fetch_usbserialv>
   d41e0:	4942      	ldr	r1, [pc, #264]	; (d42ec <setup+0x148>)
   d41e2:	f003 f8f4 	bl	d73ce <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x");
   d41e6:	f003 fb89 	bl	d78fc <_Z16_fetch_usbserialv>
   d41ea:	4941      	ldr	r1, [pc, #260]	; (d42f0 <setup+0x14c>)
   d41ec:	f003 f8dc 	bl	d73a8 <_ZN5Print5printEPKc>
        Serial.println(bme.sensorID(), 16);
   d41f0:	f003 fb84 	bl	d78fc <_Z16_fetch_usbserialv>
   d41f4:	4604      	mov	r4, r0
   d41f6:	483c      	ldr	r0, [pc, #240]	; (d42e8 <setup+0x144>)
   d41f8:	f000 fd0a 	bl	d4c10 <_ZN15Adafruit_BME2808sensorIDEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41fc:	2210      	movs	r2, #16
   d41fe:	4601      	mov	r1, r0
   d4200:	4620      	mov	r0, r4
   d4202:	f003 f8f0 	bl	d73e6 <_ZN5Print11printNumberEmh>
        n += println();
   d4206:	4620      	mov	r0, r4
   d4208:	f003 f8d5 	bl	d73b6 <_ZN5Print7printlnEv>
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
   d420c:	f003 fb76 	bl	d78fc <_Z16_fetch_usbserialv>
   d4210:	4938      	ldr	r1, [pc, #224]	; (d42f4 <setup+0x150>)
   d4212:	f003 f8c9 	bl	d73a8 <_ZN5Print5printEPKc>
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
   d4216:	f003 fb71 	bl	d78fc <_Z16_fetch_usbserialv>
   d421a:	4937      	ldr	r1, [pc, #220]	; (d42f8 <setup+0x154>)
   d421c:	f003 f8c4 	bl	d73a8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x60 represents a BME 280.\n");
   d4220:	f003 fb6c 	bl	d78fc <_Z16_fetch_usbserialv>
   d4224:	4935      	ldr	r1, [pc, #212]	; (d42fc <setup+0x158>)
   d4226:	f003 f8bf 	bl	d73a8 <_ZN5Print5printEPKc>
        Serial.print("        ID of 0x61 represents a BME 680.\n");
   d422a:	f003 fb67 	bl	d78fc <_Z16_fetch_usbserialv>
   d422e:	4934      	ldr	r1, [pc, #208]	; (d4300 <setup+0x15c>)
   d4230:	f003 f8ba 	bl	d73a8 <_ZN5Print5printEPKc>
        while (1)
   d4234:	e7fe      	b.n	d4234 <setup+0x90>
  Serial.println("-- Default Test --");
   d4236:	f003 fb61 	bl	d78fc <_Z16_fetch_usbserialv>
   d423a:	4932      	ldr	r1, [pc, #200]	; (d4304 <setup+0x160>)
   d423c:	f003 f8c7 	bl	d73ce <_ZN5Print7printlnEPKc>
  Serial.println();
   d4240:	f003 fb5c 	bl	d78fc <_Z16_fetch_usbserialv>
   d4244:	f003 f8b7 	bl	d73b6 <_ZN5Print7printlnEv>
  Time.zone ( -7) ; // MST = -7, MDT = -6
   d4248:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   d424c:	f003 f930 	bl	d74b0 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4250:	f002 fd5c 	bl	d6d0c <spark_cloud_flag_connected>
        if (!connected()) {
   d4254:	b110      	cbz	r0, d425c <setup+0xb8>
        return spark_sync_time(NULL);
   d4256:	2000      	movs	r0, #0
   d4258:	f002 fd60 	bl	d6d1c <spark_sync_time>
  Serial.begin(9600);
   d425c:	f003 fb4e 	bl	d78fc <_Z16_fetch_usbserialv>
   d4260:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4264:	f003 fb3e 	bl	d78e4 <_ZN9USBSerial5beginEl>
  pinMode(moisturePin,INPUT);
   d4268:	2100      	movs	r1, #0
   d426a:	2013      	movs	r0, #19
   d426c:	f004 f84e 	bl	d830c <pinMode>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
   d4270:	223c      	movs	r2, #60	; 0x3c
   d4272:	2102      	movs	r1, #2
   d4274:	4824      	ldr	r0, [pc, #144]	; (d4308 <setup+0x164>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4276:	4c25      	ldr	r4, [pc, #148]	; (d430c <setup+0x168>)
    Serial.printf(".");
   d4278:	4d25      	ldr	r5, [pc, #148]	; (d4310 <setup+0x16c>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
   d427a:	f001 fc17 	bl	d5aac <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); // show splashscreen
   d427e:	4822      	ldr	r0, [pc, #136]	; (d4308 <setup+0x164>)
   d4280:	f001 fba4 	bl	d59cc <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d4284:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4288:	f003 f9a2 	bl	d75d0 <delay>
   Serial.printf("Connecting to Internet \n");
   d428c:	f003 fb36 	bl	d78fc <_Z16_fetch_usbserialv>
   d4290:	4920      	ldr	r1, [pc, #128]	; (d4314 <setup+0x170>)
   d4292:	f7ff ff3d 	bl	d4110 <_ZN5Print6printfEPKcz>
   d4296:	2300      	movs	r3, #0
   d4298:	6860      	ldr	r0, [r4, #4]
   d429a:	461a      	mov	r2, r3
   d429c:	4619      	mov	r1, r3
   d429e:	f002 fcdd 	bl	d6c5c <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d42a2:	2200      	movs	r2, #0
   d42a4:	6860      	ldr	r0, [r4, #4]
   d42a6:	4611      	mov	r1, r2
   d42a8:	f002 fce0 	bl	d6c6c <network_connecting>
  while(WiFi.connecting()) {
   d42ac:	b140      	cbz	r0, d42c0 <setup+0x11c>
    Serial.printf(".");
   d42ae:	f003 fb25 	bl	d78fc <_Z16_fetch_usbserialv>
   d42b2:	4629      	mov	r1, r5
   d42b4:	f7ff ff2c 	bl	d4110 <_ZN5Print6printfEPKcz>
    delay(100);
   d42b8:	2064      	movs	r0, #100	; 0x64
   d42ba:	f003 f989 	bl	d75d0 <delay>
  while(WiFi.connecting()) {
   d42be:	e7f0      	b.n	d42a2 <setup+0xfe>
  Serial.printf("\n Connected!!!!!! \n"); // breathing green is connected to internet only :)
   d42c0:	f003 fb1c 	bl	d78fc <_Z16_fetch_usbserialv>
   d42c4:	4914      	ldr	r1, [pc, #80]	; (d4318 <setup+0x174>)
   d42c6:	f7ff ff23 	bl	d4110 <_ZN5Print6printfEPKcz>
  mqtt.subscribe(&pump_switch); // "turns on" subscription <NEED FEED VAR NOT FEEDNAME> <&> points to --> VAR
   d42ca:	4914      	ldr	r1, [pc, #80]	; (d431c <setup+0x178>)
   d42cc:	4814      	ldr	r0, [pc, #80]	; (d4320 <setup+0x17c>)
   d42ce:	f001 ffe7 	bl	d62a0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42d2:	f002 fae7 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
  starttime = millis();
   d42d6:	4b13      	ldr	r3, [pc, #76]	; (d4324 <setup+0x180>)
   d42d8:	6018      	str	r0, [r3, #0]
}
   d42da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  displayLargeText("MAJESTIC\n   I/O");
   d42de:	4812      	ldr	r0, [pc, #72]	; (d4328 <setup+0x184>)
   d42e0:	f7ff bf2e 	b.w	d4140 <_Z16displayLargeTextPc>
   d42e4:	000dc818 	.word	0x000dc818
   d42e8:	2003e434 	.word	0x2003e434
   d42ec:	000dc824 	.word	0x000dc824
   d42f0:	000dc86c 	.word	0x000dc86c
   d42f4:	000dc87d 	.word	0x000dc87d
   d42f8:	000dc8c4 	.word	0x000dc8c4
   d42fc:	000dc8ee 	.word	0x000dc8ee
   d4300:	000dc918 	.word	0x000dc918
   d4304:	000dc942 	.word	0x000dc942
   d4308:	2003e4a0 	.word	0x2003e4a0
   d430c:	2003e7c8 	.word	0x2003e7c8
   d4310:	000dca25 	.word	0x000dca25
   d4314:	000dc955 	.word	0x000dc955
   d4318:	000dc96e 	.word	0x000dc96e
   d431c:	2003e5dc 	.word	0x2003e5dc
   d4320:	2003e500 	.word	0x2003e500
   d4324:	2003e618 	.word	0x2003e618
   d4328:	000dc982 	.word	0x000dc982

000d432c <_Z11displayTextPci>:
void displayText(char desiredString[], int desiredOutput) { //takes args and prints them to OLED
   d432c:	b530      	push	{r4, r5, lr}

  display.clearDisplay();
   d432e:	4c1f      	ldr	r4, [pc, #124]	; (d43ac <_Z11displayTextPci+0x80>)
void displayText(char desiredString[], int desiredOutput) { //takes args and prints them to OLED
   d4330:	b08d      	sub	sp, #52	; 0x34
   d4332:	4605      	mov	r5, r0
  display.clearDisplay();
   d4334:	4620      	mov	r0, r4
void displayText(char desiredString[], int desiredOutput) { //takes args and prints them to OLED
   d4336:	910b      	str	r1, [sp, #44]	; 0x2c
  display.clearDisplay();
   d4338:	f001 fac4 	bl	d58c4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);             // Start cursor at top-left corner
   d433c:	2200      	movs	r2, #0
   d433e:	4611      	mov	r1, r2
   d4340:	4620      	mov	r0, r4
   d4342:	f001 fe31 	bl	d5fa8 <_ZN12Adafruit_GFX9setCursorEss>
  display.setRotation(0) ;
   d4346:	4620      	mov	r0, r4
   d4348:	2100      	movs	r1, #0
   d434a:	f001 fe3a 	bl	d5fc2 <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1); 
   d434e:	4620      	mov	r0, r4
   d4350:	2101      	movs	r1, #1
   d4352:	f001 fe2c 	bl	d5fae <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE); // Draw 'inverse' text
   d4356:	4620      	mov	r0, r4
   d4358:	2101      	movs	r1, #1
   d435a:	f001 fe2d 	bl	d5fb8 <_ZN12Adafruit_GFX12setTextColorEt>
  display.printf("*****SMART POT******\n\n%s %i\n%0.1f C\nHumidity %0.1f%c\n%s\nDust level %0.02f\nTime is %s",
   d435e:	4a14      	ldr	r2, [pc, #80]	; (d43b0 <_Z11displayTextPci+0x84>)
   d4360:	9208      	str	r2, [sp, #32]
   d4362:	4a14      	ldr	r2, [pc, #80]	; (d43b4 <_Z11displayTextPci+0x88>)
   d4364:	6810      	ldr	r0, [r2, #0]
   d4366:	f005 fca9 	bl	d9cbc <__aeabi_f2d>
   d436a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d436e:	4a12      	ldr	r2, [pc, #72]	; (d43b8 <_Z11displayTextPci+0x8c>)
   d4370:	6812      	ldr	r2, [r2, #0]
   d4372:	9205      	str	r2, [sp, #20]
   d4374:	4a11      	ldr	r2, [pc, #68]	; (d43bc <_Z11displayTextPci+0x90>)
   d4376:	7812      	ldrb	r2, [r2, #0]
   d4378:	9204      	str	r2, [sp, #16]
   d437a:	4a11      	ldr	r2, [pc, #68]	; (d43c0 <_Z11displayTextPci+0x94>)
   d437c:	6810      	ldr	r0, [r2, #0]
   d437e:	f005 fc9d 	bl	d9cbc <__aeabi_f2d>
   d4382:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4386:	4a0f      	ldr	r2, [pc, #60]	; (d43c4 <_Z11displayTextPci+0x98>)
   d4388:	6810      	ldr	r0, [r2, #0]
   d438a:	f005 fc97 	bl	d9cbc <__aeabi_f2d>
   d438e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4390:	e9cd 0100 	strd	r0, r1, [sp]
   d4394:	462a      	mov	r2, r5
   d4396:	490c      	ldr	r1, [pc, #48]	; (d43c8 <_Z11displayTextPci+0x9c>)
   d4398:	4620      	mov	r0, r4
   d439a:	f7ff feb9 	bl	d4110 <_ZN5Print6printfEPKcz>
     desiredString, desiredOutput, temp, humidity, percent, airQualityStatus.c_str(), concentration, currentTime);
  display.display();
   d439e:	4620      	mov	r0, r4
}
   d43a0:	b00d      	add	sp, #52	; 0x34
   d43a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.display();
   d43a6:	f001 bb11 	b.w	d59cc <_ZN16Adafruit_SSD13067displayEv>
   d43aa:	bf00      	nop
   d43ac:	2003e4a0 	.word	0x2003e4a0
   d43b0:	2003e495 	.word	0x2003e495
   d43b4:	2003e478 	.word	0x2003e478
   d43b8:	2003e400 	.word	0x2003e400
   d43bc:	2003ddb0 	.word	0x2003ddb0
   d43c0:	2003e4d4 	.word	0x2003e4d4
   d43c4:	2003e61c 	.word	0x2003e61c
   d43c8:	000dc992 	.word	0x000dc992

000d43cc <_Z12MQTT_connectv>:
void MQTT_connect() {
   d43cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d43ce:	4818      	ldr	r0, [pc, #96]	; (d4430 <_Z12MQTT_connectv+0x64>)
   d43d0:	f001 fe0b 	bl	d5fea <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d43d4:	bb50      	cbnz	r0, d442c <_Z12MQTT_connectv+0x60>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d43d6:	f003 fa91 	bl	d78fc <_Z16_fetch_usbserialv>
   d43da:	4916      	ldr	r1, [pc, #88]	; (d4434 <_Z12MQTT_connectv+0x68>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d43dc:	4e14      	ldr	r6, [pc, #80]	; (d4430 <_Z12MQTT_connectv+0x64>)
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d43de:	4f16      	ldr	r7, [pc, #88]	; (d4438 <_Z12MQTT_connectv+0x6c>)
  Serial.print("Connecting to MQTT... ");
   d43e0:	f002 ffe2 	bl	d73a8 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d43e4:	4812      	ldr	r0, [pc, #72]	; (d4430 <_Z12MQTT_connectv+0x64>)
   d43e6:	f002 f91c 	bl	d6622 <_ZN13Adafruit_MQTT7connectEv>
   d43ea:	4604      	mov	r4, r0
   d43ec:	b1b8      	cbz	r0, d441e <_Z12MQTT_connectv+0x52>
       Serial.println(mqtt.connectErrorString(ret));
   d43ee:	f003 fa85 	bl	d78fc <_Z16_fetch_usbserialv>
   d43f2:	4621      	mov	r1, r4
   d43f4:	4605      	mov	r5, r0
   d43f6:	4630      	mov	r0, r6
   d43f8:	f001 ff30 	bl	d625c <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d43fc:	4601      	mov	r1, r0
   d43fe:	4628      	mov	r0, r5
   d4400:	f002 ffe5 	bl	d73ce <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4404:	f003 fa7a 	bl	d78fc <_Z16_fetch_usbserialv>
   d4408:	4639      	mov	r1, r7
   d440a:	f002 ffe0 	bl	d73ce <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d440e:	4630      	mov	r0, r6
   d4410:	f001 ff32 	bl	d6278 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d4414:	f241 3088 	movw	r0, #5000	; 0x1388
   d4418:	f003 f8da 	bl	d75d0 <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d441c:	e7e2      	b.n	d43e4 <_Z12MQTT_connectv+0x18>
  }
  Serial.println("MQTT Connected!");
   d441e:	f003 fa6d 	bl	d78fc <_Z16_fetch_usbserialv>
}
   d4422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println("MQTT Connected!");
   d4426:	4905      	ldr	r1, [pc, #20]	; (d443c <_Z12MQTT_connectv+0x70>)
   d4428:	f002 bfd1 	b.w	d73ce <_ZN5Print7printlnEPKc>
}
   d442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d442e:	bf00      	nop
   d4430:	2003e500 	.word	0x2003e500
   d4434:	000dc9e7 	.word	0x000dc9e7
   d4438:	000dc9fe 	.word	0x000dc9fe
   d443c:	000dca27 	.word	0x000dca27

000d4440 <_Z8autoPumpv>:
void autoPump() {
   d4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while ((timer-waterTimer)>60000)
   d4442:	4e14      	ldr	r6, [pc, #80]	; (d4494 <_Z8autoPumpv+0x54>)
  {
    waterTimer=millis();
    if (moistVal > 3350) {
   d4444:	4f14      	ldr	r7, [pc, #80]	; (d4498 <_Z8autoPumpv+0x58>)
  while ((timer-waterTimer)>60000)
   d4446:	4c15      	ldr	r4, [pc, #84]	; (d449c <_Z8autoPumpv+0x5c>)
   d4448:	6822      	ldr	r2, [r4, #0]
   d444a:	6833      	ldr	r3, [r6, #0]
   d444c:	1a9b      	subs	r3, r3, r2
   d444e:	f64e 2260 	movw	r2, #60000	; 0xea60
   d4452:	4293      	cmp	r3, r2
   d4454:	dd1c      	ble.n	d4490 <_Z8autoPumpv+0x50>
   d4456:	f002 fa25 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
    if (moistVal > 3350) {
   d445a:	683a      	ldr	r2, [r7, #0]
    waterTimer=millis();
   d445c:	6020      	str	r0, [r4, #0]
    if (moistVal > 3350) {
   d445e:	f640 5316 	movw	r3, #3350	; 0xd16
   d4462:	429a      	cmp	r2, r3
   d4464:	ddf0      	ble.n	d4448 <_Z8autoPumpv+0x8>
      digitalWrite(PUMPPIN,HIGH);
      if ((timer - timeout)>300) {
   d4466:	4d0e      	ldr	r5, [pc, #56]	; (d44a0 <_Z8autoPumpv+0x60>)
      digitalWrite(PUMPPIN,HIGH);
   d4468:	2101      	movs	r1, #1
   d446a:	2003      	movs	r0, #3
   d446c:	f003 ff5f 	bl	d832e <digitalWrite>
      if ((timer - timeout)>300) {
   d4470:	6833      	ldr	r3, [r6, #0]
   d4472:	682a      	ldr	r2, [r5, #0]
   d4474:	1a9b      	subs	r3, r3, r2
   d4476:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   d447a:	dde4      	ble.n	d4446 <_Z8autoPumpv+0x6>
   d447c:	f002 fa12 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis();
        digitalWrite(PUMPPIN,LOW);
   d4480:	2100      	movs	r1, #0
        timeout = millis();
   d4482:	6028      	str	r0, [r5, #0]
        digitalWrite(PUMPPIN,LOW);
   d4484:	2003      	movs	r0, #3
   d4486:	f003 ff52 	bl	d832e <digitalWrite>
        waterTimer = 0;
   d448a:	2300      	movs	r3, #0
   d448c:	6023      	str	r3, [r4, #0]
   d448e:	e7da      	b.n	d4446 <_Z8autoPumpv+0x6>
      }
    }
  } 
}
   d4490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4492:	bf00      	nop
   d4494:	2003e630 	.word	0x2003e630
   d4498:	2003e4f0 	.word	0x2003e4f0
   d449c:	2003e634 	.word	0x2003e634
   d44a0:	2003e62c 	.word	0x2003e62c

000d44a4 <_Z10publishingv>:
void publishing() {
   d44a4:	b538      	push	{r3, r4, r5, lr}
    if((millis()-lastTime > 60000)) { // how to PUBLISH <don't over-publish, once or twice a min is good
   d44a6:	4d24      	ldr	r5, [pc, #144]	; (d4538 <_Z10publishingv+0x94>)
   d44a8:	f002 f9fc 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
   d44ac:	682a      	ldr	r2, [r5, #0]
   d44ae:	1a80      	subs	r0, r0, r2
   d44b0:	f64e 2260 	movw	r2, #60000	; 0xea60
   d44b4:	4290      	cmp	r0, r2
   d44b6:	d93d      	bls.n	d4534 <_Z10publishingv+0x90>
    if(mqtt.Update()) {
   d44b8:	4820      	ldr	r0, [pc, #128]	; (d453c <_Z10publishingv+0x98>)
   d44ba:	f001 fe14 	bl	d60e6 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d44be:	2800      	cmp	r0, #0
   d44c0:	d035      	beq.n	d452e <_Z10publishingv+0x8a>
      tempBME.publish(temp); //publish your <variable> to <feedvar2>
   d44c2:	4b1f      	ldr	r3, [pc, #124]	; (d4540 <_Z10publishingv+0x9c>)
      humidityBME.publish(humidity);
   d44c4:	4c1f      	ldr	r4, [pc, #124]	; (d4544 <_Z10publishingv+0xa0>)
      tempBME.publish(temp); //publish your <variable> to <feedvar2>
   d44c6:	6818      	ldr	r0, [r3, #0]
   d44c8:	f005 fbf8 	bl	d9cbc <__aeabi_f2d>
   d44cc:	ec41 0b10 	vmov	d0, r0, r1
   d44d0:	2102      	movs	r1, #2
   d44d2:	481d      	ldr	r0, [pc, #116]	; (d4548 <_Z10publishingv+0xa4>)
   d44d4:	f002 f910 	bl	d66f8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      humidityBME.publish(humidity);
   d44d8:	6820      	ldr	r0, [r4, #0]
   d44da:	f005 fbef 	bl	d9cbc <__aeabi_f2d>
   d44de:	ec41 0b10 	vmov	d0, r0, r1
   d44e2:	2102      	movs	r1, #2
   d44e4:	4819      	ldr	r0, [pc, #100]	; (d454c <_Z10publishingv+0xa8>)
   d44e6:	f002 f907 	bl	d66f8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      humidityBME.publish(humidity);
   d44ea:	6820      	ldr	r0, [r4, #0]
   d44ec:	f005 fbe6 	bl	d9cbc <__aeabi_f2d>
   d44f0:	ec41 0b10 	vmov	d0, r0, r1
   d44f4:	2102      	movs	r1, #2
   d44f6:	4815      	ldr	r0, [pc, #84]	; (d454c <_Z10publishingv+0xa8>)
   d44f8:	f002 f8fe 	bl	d66f8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      moistureValue.publish(moistVal);
   d44fc:	4b14      	ldr	r3, [pc, #80]	; (d4550 <_Z10publishingv+0xac>)
   d44fe:	4815      	ldr	r0, [pc, #84]	; (d4554 <_Z10publishingv+0xb0>)
   d4500:	6819      	ldr	r1, [r3, #0]
   d4502:	f002 f8ea 	bl	d66da <_ZN21Adafruit_MQTT_Publish7publishEi>
      // LPO.publish(lowpulseoccupancy); // publishing limit reached 
      // dustRatio.publish(ratio);
      dustConcentration.publish(concentration);
   d4506:	4b14      	ldr	r3, [pc, #80]	; (d4558 <_Z10publishingv+0xb4>)
   d4508:	6818      	ldr	r0, [r3, #0]
   d450a:	f005 fbd7 	bl	d9cbc <__aeabi_f2d>
   d450e:	ec41 0b10 	vmov	d0, r0, r1
   d4512:	2102      	movs	r1, #2
   d4514:	4811      	ldr	r0, [pc, #68]	; (d455c <_Z10publishingv+0xb8>)
   d4516:	f002 f8ef 	bl	d66f8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      airQuality.publish(airQualityVal);
   d451a:	4b11      	ldr	r3, [pc, #68]	; (d4560 <_Z10publishingv+0xbc>)
   d451c:	4811      	ldr	r0, [pc, #68]	; (d4564 <_Z10publishingv+0xc0>)
   d451e:	6819      	ldr	r1, [r3, #0]
   d4520:	f002 f8db 	bl	d66da <_ZN21Adafruit_MQTT_Publish7publishEi>
      Serial.printf("Publishing stats\n"); // tells you that you have published in Serial Monitor
   d4524:	f003 f9ea 	bl	d78fc <_Z16_fetch_usbserialv>
   d4528:	490f      	ldr	r1, [pc, #60]	; (d4568 <_Z10publishingv+0xc4>)
   d452a:	f7ff fdf1 	bl	d4110 <_ZN5Print6printfEPKcz>
   d452e:	f002 f9b9 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
      } 
    lastTime = millis();
   d4532:	6028      	str	r0, [r5, #0]
  }
}
   d4534:	bd38      	pop	{r3, r4, r5, pc}
   d4536:	bf00      	nop
   d4538:	2003e4e8 	.word	0x2003e4e8
   d453c:	2003e500 	.word	0x2003e500
   d4540:	2003e61c 	.word	0x2003e61c
   d4544:	2003e4d4 	.word	0x2003e4d4
   d4548:	2003e620 	.word	0x2003e620
   d454c:	2003e4d8 	.word	0x2003e4d8
   d4550:	2003e4f0 	.word	0x2003e4f0
   d4554:	2003e4f4 	.word	0x2003e4f4
   d4558:	2003e478 	.word	0x2003e478
   d455c:	2003e4c8 	.word	0x2003e4c8
   d4560:	2003e410 	.word	0x2003e410
   d4564:	2003e3f4 	.word	0x2003e3f4
   d4568:	000dca37 	.word	0x000dca37

000d456c <_Z10subscribesv>:
void subscribes() {
   d456c:	b538      	push	{r3, r4, r5, lr}
  // this is our 'wait for incoming subscription packets' busy subloop 

  Adafruit_MQTT_Subscribe *subscription; // how to SUBCRIBE 
  while ((subscription = mqtt.readSubscription(1000))) { // checks every arg time eg 1000 millis()
   d456e:	4d11      	ldr	r5, [pc, #68]	; (d45b4 <_Z10subscribesv+0x48>)
    if (subscription == &pump_switch) {
   d4570:	4c11      	ldr	r4, [pc, #68]	; (d45b8 <_Z10subscribesv+0x4c>)
  while ((subscription = mqtt.readSubscription(1000))) { // checks every arg time eg 1000 millis()
   d4572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4576:	4628      	mov	r0, r5
   d4578:	f001 fead 	bl	d62d6 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d457c:	4601      	mov	r1, r0
   d457e:	b158      	cbz	r0, d4598 <_Z10subscribesv+0x2c>
    if (subscription == &pump_switch) {
   d4580:	42a0      	cmp	r0, r4
   d4582:	d1f6      	bne.n	d4572 <_Z10subscribesv+0x6>
      pumpState = atof((char *)pump_switch.lastread);
   d4584:	1d60      	adds	r0, r4, #5
   d4586:	f006 fa4b 	bl	daa20 <atof>
   d458a:	ec51 0b10 	vmov	r0, r1, d0
   d458e:	f005 febd 	bl	da30c <__aeabi_d2f>
   d4592:	4b0a      	ldr	r3, [pc, #40]	; (d45bc <_Z10subscribesv+0x50>)
   d4594:	6018      	str	r0, [r3, #0]
   d4596:	e7ec      	b.n	d4572 <_Z10subscribesv+0x6>

    }
    }
    if (pumpState) {
   d4598:	4b08      	ldr	r3, [pc, #32]	; (d45bc <_Z10subscribesv+0x50>)
   d459a:	edd3 7a00 	vldr	s15, [r3]
   d459e:	eef5 7a40 	vcmp.f32	s15, #0.0
   d45a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      digitalWrite(PUMPPIN,HIGH);
    }
    else {
      digitalWrite(PUMPPIN,LOW);
    }
}
   d45a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      digitalWrite(PUMPPIN,HIGH);
   d45aa:	bf18      	it	ne
   d45ac:	2101      	movne	r1, #1
      digitalWrite(PUMPPIN,LOW);
   d45ae:	2003      	movs	r0, #3
   d45b0:	f003 bebd 	b.w	d832e <digitalWrite>
   d45b4:	2003e500 	.word	0x2003e500
   d45b8:	2003e5dc 	.word	0x2003e5dc
   d45bc:	2003e5d8 	.word	0x2003e5d8

000d45c0 <_Z4pingv>:
void ping() {
   d45c0:	b510      	push	{r4, lr}
  // Ping MQTT Broker every 2 minutes to keep connection alive
  if ((millis()-last)>120000) {
   d45c2:	4c0f      	ldr	r4, [pc, #60]	; (d4600 <_Z4pingv+0x40>)
   d45c4:	f002 f96e 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
   d45c8:	6822      	ldr	r2, [r4, #0]
   d45ca:	1a80      	subs	r0, r0, r2
   d45cc:	4a0d      	ldr	r2, [pc, #52]	; (d4604 <_Z4pingv+0x44>)
   d45ce:	4290      	cmp	r0, r2
   d45d0:	d914      	bls.n	d45fc <_Z4pingv+0x3c>
      Serial.printf("Pinging MQTT \n");
   d45d2:	f003 f993 	bl	d78fc <_Z16_fetch_usbserialv>
   d45d6:	490c      	ldr	r1, [pc, #48]	; (d4608 <_Z4pingv+0x48>)
   d45d8:	f7ff fd9a 	bl	d4110 <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   d45dc:	480b      	ldr	r0, [pc, #44]	; (d460c <_Z4pingv+0x4c>)
   d45de:	2101      	movs	r1, #1
   d45e0:	f001 fef0 	bl	d63c4 <_ZN13Adafruit_MQTT4pingEh>
   d45e4:	b938      	cbnz	r0, d45f6 <_Z4pingv+0x36>
        Serial.printf("Disconnecting \n");
   d45e6:	f003 f989 	bl	d78fc <_Z16_fetch_usbserialv>
   d45ea:	4909      	ldr	r1, [pc, #36]	; (d4610 <_Z4pingv+0x50>)
   d45ec:	f7ff fd90 	bl	d4110 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   d45f0:	4806      	ldr	r0, [pc, #24]	; (d460c <_Z4pingv+0x4c>)
   d45f2:	f001 fe41 	bl	d6278 <_ZN13Adafruit_MQTT10disconnectEv>
   d45f6:	f002 f955 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   d45fa:	6020      	str	r0, [r4, #0]
  }
}
   d45fc:	bd10      	pop	{r4, pc}
   d45fe:	bf00      	nop
   d4600:	2003e4e4 	.word	0x2003e4e4
   d4604:	0001d4c0 	.word	0x0001d4c0
   d4608:	000dca49 	.word	0x000dca49
   d460c:	2003e500 	.word	0x2003e500
   d4610:	000dca58 	.word	0x000dca58

000d4614 <_Z8bmeStatsv>:
void bmeStats() {
   d4614:	b508      	push	{r3, lr}
  temp = bme.readTemperature();
   d4616:	480d      	ldr	r0, [pc, #52]	; (d464c <_Z8bmeStatsv+0x38>)
   d4618:	f000 fbca 	bl	d4db0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d461c:	4b0c      	ldr	r3, [pc, #48]	; (d4650 <_Z8bmeStatsv+0x3c>)
  pressure = bme.readPressure();
   d461e:	480b      	ldr	r0, [pc, #44]	; (d464c <_Z8bmeStatsv+0x38>)
  temp = bme.readTemperature();
   d4620:	ed83 0a00 	vstr	s0, [r3]
  pressure = bme.readPressure();
   d4624:	f000 fbf2 	bl	d4e0c <_ZN15Adafruit_BME28012readPressureEv>
   d4628:	4b0a      	ldr	r3, [pc, #40]	; (d4654 <_Z8bmeStatsv+0x40>)
  altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d462a:	4808      	ldr	r0, [pc, #32]	; (d464c <_Z8bmeStatsv+0x38>)
  pressure = bme.readPressure();
   d462c:	ed83 0a00 	vstr	s0, [r3]
  altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d4630:	ed9f 0a09 	vldr	s0, [pc, #36]	; d4658 <_Z8bmeStatsv+0x44>
   d4634:	f000 fcc4 	bl	d4fc0 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4638:	4b08      	ldr	r3, [pc, #32]	; (d465c <_Z8bmeStatsv+0x48>)
  humidity = bme.readHumidity();
   d463a:	4804      	ldr	r0, [pc, #16]	; (d464c <_Z8bmeStatsv+0x38>)
  altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d463c:	ed83 0a00 	vstr	s0, [r3]
  humidity = bme.readHumidity();
   d4640:	f000 fd5e 	bl	d5100 <_ZN15Adafruit_BME28012readHumidityEv>
   d4644:	4b06      	ldr	r3, [pc, #24]	; (d4660 <_Z8bmeStatsv+0x4c>)
   d4646:	ed83 0a00 	vstr	s0, [r3]
}
   d464a:	bd08      	pop	{r3, pc}
   d464c:	2003e434 	.word	0x2003e434
   d4650:	2003e61c 	.word	0x2003e61c
   d4654:	2003e5d4 	.word	0x2003e5d4
   d4658:	447d5000 	.word	0x447d5000
   d465c:	2003e430 	.word	0x2003e430
   d4660:	2003e4d4 	.word	0x2003e4d4
   d4664:	00000000 	.word	0x00000000

000d4668 <_Z10dustSensorv>:
void dustSensor() {
   d4668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      //This section is for the dust sensor
  duration = pulseIn(DUSTPIN, LOW);
   d466c:	2100      	movs	r1, #0
void dustSensor() {
   d466e:	ed2d 8b02 	vpush	{d8}
  duration = pulseIn(DUSTPIN, LOW);
   d4672:	2012      	movs	r0, #18
   d4674:	f003 fec1 	bl	d83fa <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy+duration;
   d4678:	4c43      	ldr	r4, [pc, #268]	; (d4788 <_Z10dustSensorv+0x120>)
  duration = pulseIn(DUSTPIN, LOW);
   d467a:	4b44      	ldr	r3, [pc, #272]	; (d478c <_Z10dustSensorv+0x124>)
 
  if ((millis()-starttime) > sampletime_ms)//if the sample time == 30s
   d467c:	4d44      	ldr	r5, [pc, #272]	; (d4790 <_Z10dustSensorv+0x128>)
  duration = pulseIn(DUSTPIN, LOW);
   d467e:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy+duration;
   d4680:	6823      	ldr	r3, [r4, #0]
   d4682:	4418      	add	r0, r3
   d4684:	6020      	str	r0, [r4, #0]
   d4686:	f002 f90d 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-starttime) > sampletime_ms)//if the sample time == 30s
   d468a:	4b42      	ldr	r3, [pc, #264]	; (d4794 <_Z10dustSensorv+0x12c>)
   d468c:	f8d3 8000 	ldr.w	r8, [r3]
   d4690:	682b      	ldr	r3, [r5, #0]
   d4692:	1ac0      	subs	r0, r0, r3
   d4694:	4540      	cmp	r0, r8
   d4696:	d961      	bls.n	d475c <_Z10dustSensorv+0xf4>
  {
      ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4698:	6820      	ldr	r0, [r4, #0]
   d469a:	f005 faed 	bl	d9c78 <__aeabi_ui2d>
   d469e:	4606      	mov	r6, r0
   d46a0:	4640      	mov	r0, r8
   d46a2:	460f      	mov	r7, r1
   d46a4:	f005 fae8 	bl	d9c78 <__aeabi_ui2d>
   d46a8:	4b3b      	ldr	r3, [pc, #236]	; (d4798 <_Z10dustSensorv+0x130>)
   d46aa:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d47a4 <_Z10dustSensorv+0x13c>
   d46ae:	2200      	movs	r2, #0
   d46b0:	f005 fb5c 	bl	d9d6c <__aeabi_dmul>
   d46b4:	4602      	mov	r2, r0
   d46b6:	460b      	mov	r3, r1
   d46b8:	4630      	mov	r0, r6
   d46ba:	4639      	mov	r1, r7
   d46bc:	f005 fc80 	bl	d9fc0 <__aeabi_ddiv>
   d46c0:	f005 fe24 	bl	da30c <__aeabi_d2f>
   d46c4:	f8c8 0000 	str.w	r0, [r8]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d46c8:	f005 faf8 	bl	d9cbc <__aeabi_f2d>
   d46cc:	ed9f 1b26 	vldr	d1, [pc, #152]	; d4768 <_Z10dustSensorv+0x100>
   d46d0:	ec41 0b10 	vmov	d0, r0, r1
   d46d4:	f003 fff0 	bl	d86b8 <pow>
      concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d46d8:	ed98 8a00 	vldr	s16, [r8]
   d46dc:	ee18 0a10 	vmov	r0, s16
   d46e0:	ec57 6b10 	vmov	r6, r7, d0
   d46e4:	f005 faea 	bl	d9cbc <__aeabi_f2d>
   d46e8:	a321      	add	r3, pc, #132	; (adr r3, d4770 <_Z10dustSensorv+0x108>)
   d46ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ee:	4680      	mov	r8, r0
   d46f0:	4689      	mov	r9, r1
   d46f2:	4630      	mov	r0, r6
   d46f4:	4639      	mov	r1, r7
   d46f6:	f005 fb39 	bl	d9d6c <__aeabi_dmul>
   d46fa:	4642      	mov	r2, r8
   d46fc:	4606      	mov	r6, r0
   d46fe:	460f      	mov	r7, r1
   d4700:	464b      	mov	r3, r9
   d4702:	4640      	mov	r0, r8
   d4704:	4649      	mov	r1, r9
   d4706:	f005 fb31 	bl	d9d6c <__aeabi_dmul>
   d470a:	a31b      	add	r3, pc, #108	; (adr r3, d4778 <_Z10dustSensorv+0x110>)
   d470c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4710:	f005 fb2c 	bl	d9d6c <__aeabi_dmul>
   d4714:	4602      	mov	r2, r0
   d4716:	460b      	mov	r3, r1
   d4718:	4630      	mov	r0, r6
   d471a:	4639      	mov	r1, r7
   d471c:	f005 f96e 	bl	d99fc <__aeabi_dsub>
   d4720:	eddf 7a1e 	vldr	s15, [pc, #120]	; d479c <_Z10dustSensorv+0x134>
   d4724:	ee68 7a27 	vmul.f32	s15, s16, s15
   d4728:	4606      	mov	r6, r0
   d472a:	ee17 0a90 	vmov	r0, s15
   d472e:	460f      	mov	r7, r1
   d4730:	f005 fac4 	bl	d9cbc <__aeabi_f2d>
   d4734:	4602      	mov	r2, r0
   d4736:	460b      	mov	r3, r1
   d4738:	4630      	mov	r0, r6
   d473a:	4639      	mov	r1, r7
   d473c:	f005 f960 	bl	d9a00 <__adddf3>
   d4740:	a30f      	add	r3, pc, #60	; (adr r3, d4780 <_Z10dustSensorv+0x118>)
   d4742:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4746:	f005 f95b 	bl	d9a00 <__adddf3>
   d474a:	f005 fddf 	bl	da30c <__aeabi_d2f>
   d474e:	4b14      	ldr	r3, [pc, #80]	; (d47a0 <_Z10dustSensorv+0x138>)
   d4750:	6018      	str	r0, [r3, #0]
      // Serial.printf("LPO %i\nRatio %0.02f\nConcentration %0.02f\n",lowpulseoccupancy,ratio,concentration);
      
      lowpulseoccupancy = 0;
   d4752:	2300      	movs	r3, #0
   d4754:	6023      	str	r3, [r4, #0]
   d4756:	f002 f8a5 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
      starttime = millis();
   d475a:	6028      	str	r0, [r5, #0]
  }
}
   d475c:	ecbd 8b02 	vpop	{d8}
   d4760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4764:	f3af 8000 	nop.w
   d4768:	00000000 	.word	0x00000000
   d476c:	40080000 	.word	0x40080000
   d4770:	9999999a 	.word	0x9999999a
   d4774:	3ff19999 	.word	0x3ff19999
   d4778:	66666666 	.word	0x66666666
   d477c:	400e6666 	.word	0x400e6666
   d4780:	3d70a3d7 	.word	0x3d70a3d7
   d4784:	3fe3d70a 	.word	0x3fe3d70a
   d4788:	2003e4ec 	.word	0x2003e4ec
   d478c:	2003e4c4 	.word	0x2003e4c4
   d4790:	2003e618 	.word	0x2003e618
   d4794:	2003ddb4 	.word	0x2003ddb4
   d4798:	40240000 	.word	0x40240000
   d479c:	44020000 	.word	0x44020000
   d47a0:	2003e478 	.word	0x2003e478
   d47a4:	2003e614 	.word	0x2003e614

000d47a8 <_Z9airSensorv>:
void airSensor() {
   d47a8:	b538      	push	{r3, r4, r5, lr}
   //This is for the air sensor
   airQualityVal = airqualitysensor.getValue();
   d47aa:	481f      	ldr	r0, [pc, #124]	; (d4828 <_Z9airSensorv+0x80>)
   d47ac:	4d1f      	ldr	r5, [pc, #124]	; (d482c <_Z9airSensorv+0x84>)
   current_quality=airqualitysensor.slope();
   d47ae:	4c20      	ldr	r4, [pc, #128]	; (d4830 <_Z9airSensorv+0x88>)
   airQualityVal = airqualitysensor.getValue();
   d47b0:	f001 ffd0 	bl	d6754 <_ZN16AirQualitySensor8getValueEv>
   d47b4:	6028      	str	r0, [r5, #0]
   current_quality=airqualitysensor.slope();
   d47b6:	481c      	ldr	r0, [pc, #112]	; (d4828 <_Z9airSensorv+0x80>)
   d47b8:	f001 ffe6 	bl	d6788 <_ZN16AirQualitySensor5slopeEv>
    if (current_quality >= 0)// if a valid data returned.
   d47bc:	2800      	cmp	r0, #0
   current_quality=airqualitysensor.slope();
   d47be:	6020      	str	r0, [r4, #0]
    if (current_quality >= 0)// if a valid data returned.
   d47c0:	db30      	blt.n	d4824 <_Z9airSensorv+0x7c>
    {
      Serial.printf("airQualityVal = %i\n",airQualityVal);
   d47c2:	f003 f89b 	bl	d78fc <_Z16_fetch_usbserialv>
   d47c6:	682a      	ldr	r2, [r5, #0]
   d47c8:	491a      	ldr	r1, [pc, #104]	; (d4834 <_Z9airSensorv+0x8c>)
   d47ca:	f7ff fca1 	bl	d4110 <_ZN5Print6printfEPKcz>
        if (current_quality==0) {
   d47ce:	6823      	ldr	r3, [r4, #0]
   d47d0:	b953      	cbnz	r3, d47e8 <_Z9airSensorv+0x40>
            airQualityStatus = "Danger high pollution";
   d47d2:	4919      	ldr	r1, [pc, #100]	; (d4838 <_Z9airSensorv+0x90>)
   d47d4:	4819      	ldr	r0, [pc, #100]	; (d483c <_Z9airSensorv+0x94>)
   d47d6:	f002 fd59 	bl	d728c <_ZN6StringaSEPKc>
            Serial.println("High pollution! Force signal active");}
   d47da:	f003 f88f 	bl	d78fc <_Z16_fetch_usbserialv>
   d47de:	4918      	ldr	r1, [pc, #96]	; (d4840 <_Z9airSensorv+0x98>)
            Serial.println("Low pollution!");}
        else if (current_quality ==3){
            airQualityStatus = "Fresh Air";
            Serial.println("Fresh air");}
    }//end air sensor section
}
   d47e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Fresh air");}
   d47e4:	f002 bdf3 	b.w	d73ce <_ZN5Print7printlnEPKc>
        else if (current_quality==1){
   d47e8:	2b01      	cmp	r3, #1
   d47ea:	d107      	bne.n	d47fc <_Z9airSensorv+0x54>
            airQualityStatus = "High pollution level";
   d47ec:	4915      	ldr	r1, [pc, #84]	; (d4844 <_Z9airSensorv+0x9c>)
   d47ee:	4813      	ldr	r0, [pc, #76]	; (d483c <_Z9airSensorv+0x94>)
   d47f0:	f002 fd4c 	bl	d728c <_ZN6StringaSEPKc>
            Serial.println("High pollution!");}
   d47f4:	f003 f882 	bl	d78fc <_Z16_fetch_usbserialv>
   d47f8:	4913      	ldr	r1, [pc, #76]	; (d4848 <_Z9airSensorv+0xa0>)
   d47fa:	e7f1      	b.n	d47e0 <_Z9airSensorv+0x38>
        else if (current_quality==2){
   d47fc:	2b02      	cmp	r3, #2
   d47fe:	d107      	bne.n	d4810 <_Z9airSensorv+0x68>
            airQualityStatus = "Low pollution";
   d4800:	4912      	ldr	r1, [pc, #72]	; (d484c <_Z9airSensorv+0xa4>)
   d4802:	480e      	ldr	r0, [pc, #56]	; (d483c <_Z9airSensorv+0x94>)
   d4804:	f002 fd42 	bl	d728c <_ZN6StringaSEPKc>
            Serial.println("Low pollution!");}
   d4808:	f003 f878 	bl	d78fc <_Z16_fetch_usbserialv>
   d480c:	4910      	ldr	r1, [pc, #64]	; (d4850 <_Z9airSensorv+0xa8>)
   d480e:	e7e7      	b.n	d47e0 <_Z9airSensorv+0x38>
        else if (current_quality ==3){
   d4810:	2b03      	cmp	r3, #3
   d4812:	d107      	bne.n	d4824 <_Z9airSensorv+0x7c>
            airQualityStatus = "Fresh Air";
   d4814:	490f      	ldr	r1, [pc, #60]	; (d4854 <_Z9airSensorv+0xac>)
   d4816:	4809      	ldr	r0, [pc, #36]	; (d483c <_Z9airSensorv+0x94>)
   d4818:	f002 fd38 	bl	d728c <_ZN6StringaSEPKc>
            Serial.println("Fresh air");}
   d481c:	f003 f86e 	bl	d78fc <_Z16_fetch_usbserialv>
   d4820:	490d      	ldr	r1, [pc, #52]	; (d4858 <_Z9airSensorv+0xb0>)
   d4822:	e7dd      	b.n	d47e0 <_Z9airSensorv+0x38>
}
   d4824:	bd38      	pop	{r3, r4, r5, pc}
   d4826:	bf00      	nop
   d4828:	2003e414 	.word	0x2003e414
   d482c:	2003e410 	.word	0x2003e410
   d4830:	2003ddac 	.word	0x2003ddac
   d4834:	000dca68 	.word	0x000dca68
   d4838:	000dca7c 	.word	0x000dca7c
   d483c:	2003e400 	.word	0x2003e400
   d4840:	000dca92 	.word	0x000dca92
   d4844:	000dcab6 	.word	0x000dcab6
   d4848:	000dcacb 	.word	0x000dcacb
   d484c:	000dcadb 	.word	0x000dcadb
   d4850:	000dcae9 	.word	0x000dcae9
   d4854:	000dcaf8 	.word	0x000dcaf8
   d4858:	000dcb02 	.word	0x000dcb02

000d485c <_Z9timeStuffv>:
void timeStuff() {
   d485c:	b530      	push	{r4, r5, lr}
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d485e:	4c16      	ldr	r4, [pc, #88]	; (d48b8 <_Z9timeStuffv+0x5c>)
   d4860:	4d16      	ldr	r5, [pc, #88]	; (d48bc <_Z9timeStuffv+0x60>)
   d4862:	4917      	ldr	r1, [pc, #92]	; (d48c0 <_Z9timeStuffv+0x64>)
   d4864:	b085      	sub	sp, #20
   d4866:	4620      	mov	r0, r4
   d4868:	2300      	movs	r3, #0
   d486a:	2219      	movs	r2, #25
   d486c:	f002 fd20 	bl	d72b0 <_ZNK6String8getBytesEPhjj>
   d4870:	4914      	ldr	r1, [pc, #80]	; (d48c4 <_Z9timeStuffv+0x68>)
   d4872:	2300      	movs	r3, #0
   d4874:	2209      	movs	r2, #9
   d4876:	4628      	mov	r0, r5
   d4878:	f002 fd1a 	bl	d72b0 <_ZNK6String8getBytesEPhjj>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d487c:	f002 fe8d 	bl	d759a <_ZN9TimeClass3nowEv>
   d4880:	4602      	mov	r2, r0
   d4882:	17c3      	asrs	r3, r0, #31
   d4884:	4668      	mov	r0, sp
   d4886:	f002 fe33 	bl	d74f0 <_ZN9TimeClass7timeStrEx>
   // Convert String to char arrays - this is needed for formatted print
  DateTime.toCharArray (currentDateTime, 25) ;
  TimeOnly.toCharArray (currentTime, 9) ;
  DateTime = Time.timeStr () ; // Current Date and Time from Particle Time class
   d488a:	4669      	mov	r1, sp
   d488c:	4620      	mov	r0, r4
   d488e:	f002 fcf5 	bl	d727c <_ZN6StringaSEOS_>
   d4892:	4668      	mov	r0, sp
   d4894:	f002 fc76 	bl	d7184 <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring (11 ,19) ; // Extract the Time from the DateTime String
   d4898:	2313      	movs	r3, #19
   d489a:	220b      	movs	r2, #11
   d489c:	4621      	mov	r1, r4
   d489e:	4668      	mov	r0, sp
   d48a0:	f002 fd1e 	bl	d72e0 <_ZNK6String9substringEjj>
   d48a4:	4669      	mov	r1, sp
   d48a6:	4628      	mov	r0, r5
   d48a8:	f002 fce8 	bl	d727c <_ZN6StringaSEOS_>
   d48ac:	4668      	mov	r0, sp
   d48ae:	f002 fc69 	bl	d7184 <_ZN6StringD1Ev>
}
   d48b2:	b005      	add	sp, #20
   d48b4:	bd30      	pop	{r4, r5, pc}
   d48b6:	bf00      	nop
   d48b8:	2003e3ac 	.word	0x2003e3ac
   d48bc:	2003e3e4 	.word	0x2003e3e4
   d48c0:	2003e47c 	.word	0x2003e47c
   d48c4:	2003e495 	.word	0x2003e495

000d48c8 <_Z11serialPrintv>:
void serialPrint() {
   d48c8:	b510      	push	{r4, lr}
   if ((timer - timeout)>1000) {
   d48ca:	4b26      	ldr	r3, [pc, #152]	; (d4964 <_Z11serialPrintv+0x9c>)
   d48cc:	4c26      	ldr	r4, [pc, #152]	; (d4968 <_Z11serialPrintv+0xa0>)
   d48ce:	681b      	ldr	r3, [r3, #0]
   d48d0:	6822      	ldr	r2, [r4, #0]
   d48d2:	1a9b      	subs	r3, r3, r2
   d48d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void serialPrint() {
   d48d8:	b08a      	sub	sp, #40	; 0x28
   if ((timer - timeout)>1000) {
   d48da:	dd41      	ble.n	d4960 <_Z11serialPrintv+0x98>
   d48dc:	f001 ffe2 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
    timeout = millis();
   d48e0:	6020      	str	r0, [r4, #0]
    Serial.printf("temp %0.02f\npressure %0.02f\naltitude %0.02f\nhumidity %0.02f\nmoisture level %i\n", 
   d48e2:	f003 f80b 	bl	d78fc <_Z16_fetch_usbserialv>
   d48e6:	4b21      	ldr	r3, [pc, #132]	; (d496c <_Z11serialPrintv+0xa4>)
   d48e8:	4604      	mov	r4, r0
   d48ea:	6818      	ldr	r0, [r3, #0]
   d48ec:	f005 f9e6 	bl	d9cbc <__aeabi_f2d>
   d48f0:	460b      	mov	r3, r1
   d48f2:	491f      	ldr	r1, [pc, #124]	; (d4970 <_Z11serialPrintv+0xa8>)
   d48f4:	6809      	ldr	r1, [r1, #0]
   d48f6:	9106      	str	r1, [sp, #24]
   d48f8:	491e      	ldr	r1, [pc, #120]	; (d4974 <_Z11serialPrintv+0xac>)
   d48fa:	4602      	mov	r2, r0
   d48fc:	6808      	ldr	r0, [r1, #0]
   d48fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d4902:	f005 f9db 	bl	d9cbc <__aeabi_f2d>
   d4906:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d490a:	491b      	ldr	r1, [pc, #108]	; (d4978 <_Z11serialPrintv+0xb0>)
   d490c:	6808      	ldr	r0, [r1, #0]
   d490e:	f005 f9d5 	bl	d9cbc <__aeabi_f2d>
   d4912:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4916:	4919      	ldr	r1, [pc, #100]	; (d497c <_Z11serialPrintv+0xb4>)
   d4918:	6808      	ldr	r0, [r1, #0]
   d491a:	f005 f9cf 	bl	d9cbc <__aeabi_f2d>
   d491e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d4922:	e9cd 0100 	strd	r0, r1, [sp]
   d4926:	4916      	ldr	r1, [pc, #88]	; (d4980 <_Z11serialPrintv+0xb8>)
   d4928:	4620      	mov	r0, r4
   d492a:	f7ff fbf1 	bl	d4110 <_ZN5Print6printfEPKcz>
    temp, pressure, altitude, humidity, moistVal);
     // Print using formatted print
    Serial.printf ("Date and time is %s\n", currentDateTime );
   d492e:	f002 ffe5 	bl	d78fc <_Z16_fetch_usbserialv>
   d4932:	4a14      	ldr	r2, [pc, #80]	; (d4984 <_Z11serialPrintv+0xbc>)
   d4934:	4914      	ldr	r1, [pc, #80]	; (d4988 <_Z11serialPrintv+0xc0>)
   d4936:	f7ff fbeb 	bl	d4110 <_ZN5Print6printfEPKcz>
    Serial.printf ("Time is %s\n", currentTime );
   d493a:	f002 ffdf 	bl	d78fc <_Z16_fetch_usbserialv>
   d493e:	4a13      	ldr	r2, [pc, #76]	; (d498c <_Z11serialPrintv+0xc4>)
   d4940:	4913      	ldr	r1, [pc, #76]	; (d4990 <_Z11serialPrintv+0xc8>)
   d4942:	f7ff fbe5 	bl	d4110 <_ZN5Print6printfEPKcz>
    Serial.printf("pump value is %0.02f\n",pumpState);
   d4946:	f002 ffd9 	bl	d78fc <_Z16_fetch_usbserialv>
   d494a:	4b12      	ldr	r3, [pc, #72]	; (d4994 <_Z11serialPrintv+0xcc>)
   d494c:	4604      	mov	r4, r0
   d494e:	6818      	ldr	r0, [r3, #0]
   d4950:	f005 f9b4 	bl	d9cbc <__aeabi_f2d>
   d4954:	4602      	mov	r2, r0
   d4956:	460b      	mov	r3, r1
   d4958:	4620      	mov	r0, r4
   d495a:	490f      	ldr	r1, [pc, #60]	; (d4998 <_Z11serialPrintv+0xd0>)
   d495c:	f7ff fbd8 	bl	d4110 <_ZN5Print6printfEPKcz>
  }
   d4960:	b00a      	add	sp, #40	; 0x28
   d4962:	bd10      	pop	{r4, pc}
   d4964:	2003e630 	.word	0x2003e630
   d4968:	2003e62c 	.word	0x2003e62c
   d496c:	2003e61c 	.word	0x2003e61c
   d4970:	2003e4f0 	.word	0x2003e4f0
   d4974:	2003e4d4 	.word	0x2003e4d4
   d4978:	2003e430 	.word	0x2003e430
   d497c:	2003e5d4 	.word	0x2003e5d4
   d4980:	000dcb0c 	.word	0x000dcb0c
   d4984:	2003e47c 	.word	0x2003e47c
   d4988:	000dcb5b 	.word	0x000dcb5b
   d498c:	2003e495 	.word	0x2003e495
   d4990:	000dcb70 	.word	0x000dcb70
   d4994:	2003e5d8 	.word	0x2003e5d8
   d4998:	000dcb7c 	.word	0x000dcb7c

000d499c <loop>:
void loop() {
   d499c:	b510      	push	{r4, lr}
  moistVal = analogRead(moisturePin);
   d499e:	2013      	movs	r0, #19
   d49a0:	f003 fcf1 	bl	d8386 <analogRead>
   d49a4:	4c0f      	ldr	r4, [pc, #60]	; (d49e4 <loop+0x48>)
   d49a6:	6020      	str	r0, [r4, #0]
   d49a8:	f001 ff7c 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
  timer = millis();
   d49ac:	4b0e      	ldr	r3, [pc, #56]	; (d49e8 <loop+0x4c>)
   d49ae:	6018      	str	r0, [r3, #0]
  dustSensor();
   d49b0:	f7ff fe5a 	bl	d4668 <_Z10dustSensorv>
  airSensor();
   d49b4:	f7ff fef8 	bl	d47a8 <_Z9airSensorv>
  timeStuff();
   d49b8:	f7ff ff50 	bl	d485c <_Z9timeStuffv>
  bmeStats();
   d49bc:	f7ff fe2a 	bl	d4614 <_Z8bmeStatsv>
  serialPrint(); 
   d49c0:	f7ff ff82 	bl	d48c8 <_Z11serialPrintv>
  displayText("Moisture Value:", moistVal);
   d49c4:	6821      	ldr	r1, [r4, #0]
   d49c6:	4809      	ldr	r0, [pc, #36]	; (d49ec <loop+0x50>)
   d49c8:	f7ff fcb0 	bl	d432c <_Z11displayTextPci>
  MQTT_connect();
   d49cc:	f7ff fcfe 	bl	d43cc <_Z12MQTT_connectv>
  ping();
   d49d0:	f7ff fdf6 	bl	d45c0 <_Z4pingv>
  subscribes();
   d49d4:	f7ff fdca 	bl	d456c <_Z10subscribesv>
  publishing();
   d49d8:	f7ff fd64 	bl	d44a4 <_Z10publishingv>
} //end void loop
   d49dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  autoPump(); //moisture activated pump 
   d49e0:	f7ff bd2e 	b.w	d4440 <_Z8autoPumpv>
   d49e4:	2003e4f0 	.word	0x2003e4f0
   d49e8:	2003e630 	.word	0x2003e630
   d49ec:	000dcb92 	.word	0x000dcb92

000d49f0 <_ZN16Adafruit_SSD1306D0Ev>:
   d49f0:	b510      	push	{r4, lr}
   d49f2:	2124      	movs	r1, #36	; 0x24
   d49f4:	4604      	mov	r4, r0
   d49f6:	f003 fd48 	bl	d848a <_ZdlPvj>
   d49fa:	4620      	mov	r0, r4
   d49fc:	bd10      	pop	{r4, pc}

000d49fe <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d49fe:	b510      	push	{r4, lr}
   d4a00:	21d4      	movs	r1, #212	; 0xd4
   d4a02:	4604      	mov	r4, r0
   d4a04:	f003 fd41 	bl	d848a <_ZdlPvj>
   d4a08:	4620      	mov	r0, r4
   d4a0a:	bd10      	pop	{r4, pc}

000d4a0c <_GLOBAL__sub_I_SystemMode>:
   d4a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4a10:	4c43      	ldr	r4, [pc, #268]	; (d4b20 <_GLOBAL__sub_I_SystemMode+0x114>)
    SleepResult() {}
   d4a12:	4b44      	ldr	r3, [pc, #272]	; (d4b24 <_GLOBAL__sub_I_SystemMode+0x118>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4a14:	4e44      	ldr	r6, [pc, #272]	; (d4b28 <_GLOBAL__sub_I_SystemMode+0x11c>)
   d4a16:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4a18:	2500      	movs	r5, #0
   d4a1a:	6025      	str	r5, [r4, #0]
   d4a1c:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d4a1e:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a20:	2002      	movs	r0, #2
   d4a22:	f002 f8ef 	bl	d6c04 <set_system_mode>
   d4a26:	4632      	mov	r2, r6
   d4a28:	4940      	ldr	r1, [pc, #256]	; (d4b2c <_GLOBAL__sub_I_SystemMode+0x120>)
String airQualityStatus, DateTime, TimeOnly;
   d4a2a:	4f41      	ldr	r7, [pc, #260]	; (d4b30 <_GLOBAL__sub_I_SystemMode+0x124>)
   d4a2c:	f8df 8168 	ldr.w	r8, [pc, #360]	; d4b98 <_GLOBAL__sub_I_SystemMode+0x18c>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4a30:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   d4a32:	4c40      	ldr	r4, [pc, #256]	; (d4b34 <_GLOBAL__sub_I_SystemMode+0x128>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4a34:	f003 fd24 	bl	d8480 <__aeabi_atexit>
AirQualitySensor airqualitysensor(AIRSENSORPIN); // define objects
   d4a38:	2111      	movs	r1, #17
   d4a3a:	483f      	ldr	r0, [pc, #252]	; (d4b38 <_GLOBAL__sub_I_SystemMode+0x12c>)
   d4a3c:	f001 fe85 	bl	d674a <_ZN16AirQualitySensorC1Ei>
Adafruit_SSD1306 display(OLED_RESET);
   d4a40:	2104      	movs	r1, #4
   d4a42:	4620      	mov	r0, r4
   d4a44:	f000 ff28 	bl	d5898 <_ZN16Adafruit_SSD1306C1Ea>
   d4a48:	4632      	mov	r2, r6
   d4a4a:	493c      	ldr	r1, [pc, #240]	; (d4b3c <_GLOBAL__sub_I_SystemMode+0x130>)
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	f003 fd17 	bl	d8480 <__aeabi_atexit>
String airQualityStatus, DateTime, TimeOnly;
   d4a52:	4c3b      	ldr	r4, [pc, #236]	; (d4b40 <_GLOBAL__sub_I_SystemMode+0x134>)
   d4a54:	4639      	mov	r1, r7
   d4a56:	4640      	mov	r0, r8
   d4a58:	f002 fbdf 	bl	d721a <_ZN6StringC1EPKc>
   d4a5c:	4640      	mov	r0, r8
   d4a5e:	f8df 813c 	ldr.w	r8, [pc, #316]	; d4b9c <_GLOBAL__sub_I_SystemMode+0x190>
   d4a62:	4632      	mov	r2, r6
   d4a64:	4621      	mov	r1, r4
   d4a66:	f003 fd0b 	bl	d8480 <__aeabi_atexit>
   d4a6a:	4639      	mov	r1, r7
   d4a6c:	4640      	mov	r0, r8
   d4a6e:	f002 fbd4 	bl	d721a <_ZN6StringC1EPKc>
   d4a72:	4640      	mov	r0, r8
   d4a74:	f8df 8128 	ldr.w	r8, [pc, #296]	; d4ba0 <_GLOBAL__sub_I_SystemMode+0x194>
   d4a78:	4632      	mov	r2, r6
   d4a7a:	4621      	mov	r1, r4
   d4a7c:	f003 fd00 	bl	d8480 <__aeabi_atexit>
   d4a80:	4639      	mov	r1, r7
   d4a82:	4640      	mov	r0, r8
   d4a84:	f002 fbc9 	bl	d721a <_ZN6StringC1EPKc>
TCPClient TheClient; 
   d4a88:	4f2e      	ldr	r7, [pc, #184]	; (d4b44 <_GLOBAL__sub_I_SystemMode+0x138>)
String airQualityStatus, DateTime, TimeOnly;
   d4a8a:	4632      	mov	r2, r6
   d4a8c:	4621      	mov	r1, r4
   d4a8e:	4640      	mov	r0, r8
   d4a90:	f003 fcf6 	bl	d8480 <__aeabi_atexit>
Adafruit_BME280 bme;
   d4a94:	482c      	ldr	r0, [pc, #176]	; (d4b48 <_GLOBAL__sub_I_SystemMode+0x13c>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4a96:	4c2d      	ldr	r4, [pc, #180]	; (d4b4c <_GLOBAL__sub_I_SystemMode+0x140>)
   d4a98:	f000 f8b6 	bl	d4c08 <_ZN15Adafruit_BME280C1Ev>
TCPClient TheClient; 
   d4a9c:	4638      	mov	r0, r7
   d4a9e:	f003 fafd 	bl	d809c <_ZN9TCPClientC1Ev>
   d4aa2:	4632      	mov	r2, r6
   d4aa4:	492a      	ldr	r1, [pc, #168]	; (d4b50 <_GLOBAL__sub_I_SystemMode+0x144>)
   d4aa6:	4638      	mov	r0, r7
   d4aa8:	f003 fcea 	bl	d8480 <__aeabi_atexit>
   d4aac:	4b29      	ldr	r3, [pc, #164]	; (d4b54 <_GLOBAL__sub_I_SystemMode+0x148>)
   d4aae:	9300      	str	r3, [sp, #0]
   d4ab0:	4929      	ldr	r1, [pc, #164]	; (d4b58 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d4ab2:	4b2a      	ldr	r3, [pc, #168]	; (d4b5c <_GLOBAL__sub_I_SystemMode+0x150>)
   d4ab4:	f240 725b 	movw	r2, #1883	; 0x75b
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f001 fb49 	bl	d6150 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4abe:	4b28      	ldr	r3, [pc, #160]	; (d4b60 <_GLOBAL__sub_I_SystemMode+0x154>)
   d4ac0:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4ac2:	4632      	mov	r2, r6
   d4ac4:	4927      	ldr	r1, [pc, #156]	; (d4b64 <_GLOBAL__sub_I_SystemMode+0x158>)
   d4ac6:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
   d4aca:	4620      	mov	r0, r4
   d4acc:	f003 fcd8 	bl	d8480 <__aeabi_atexit>
Adafruit_MQTT_Publish tempBME = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tempBME");
   d4ad0:	462b      	mov	r3, r5
   d4ad2:	4621      	mov	r1, r4
   d4ad4:	4a24      	ldr	r2, [pc, #144]	; (d4b68 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4ad6:	4825      	ldr	r0, [pc, #148]	; (d4b6c <_GLOBAL__sub_I_SystemMode+0x160>)
   d4ad8:	f001 fdfa 	bl	d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish dustConcentration = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/dustConcentration");
   d4adc:	462b      	mov	r3, r5
   d4ade:	4621      	mov	r1, r4
   d4ae0:	4a23      	ldr	r2, [pc, #140]	; (d4b70 <_GLOBAL__sub_I_SystemMode+0x164>)
   d4ae2:	4824      	ldr	r0, [pc, #144]	; (d4b74 <_GLOBAL__sub_I_SystemMode+0x168>)
   d4ae4:	f001 fdf4 	bl	d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish humidityBME = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/humidityBME");
   d4ae8:	462b      	mov	r3, r5
   d4aea:	4621      	mov	r1, r4
   d4aec:	4a22      	ldr	r2, [pc, #136]	; (d4b78 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4aee:	4823      	ldr	r0, [pc, #140]	; (d4b7c <_GLOBAL__sub_I_SystemMode+0x170>)
   d4af0:	f001 fdee 	bl	d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish moistureValue = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/moistureValue");
   d4af4:	462b      	mov	r3, r5
   d4af6:	4621      	mov	r1, r4
   d4af8:	4a21      	ldr	r2, [pc, #132]	; (d4b80 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4afa:	4822      	ldr	r0, [pc, #136]	; (d4b84 <_GLOBAL__sub_I_SystemMode+0x178>)
   d4afc:	f001 fde8 	bl	d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airQuality = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/airQuality");
   d4b00:	462b      	mov	r3, r5
   d4b02:	4621      	mov	r1, r4
   d4b04:	4a20      	ldr	r2, [pc, #128]	; (d4b88 <_GLOBAL__sub_I_SystemMode+0x17c>)
   d4b06:	4821      	ldr	r0, [pc, #132]	; (d4b8c <_GLOBAL__sub_I_SystemMode+0x180>)
   d4b08:	f001 fde2 	bl	d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe pump_switch = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/pump_switch"); 
   d4b0c:	4a20      	ldr	r2, [pc, #128]	; (d4b90 <_GLOBAL__sub_I_SystemMode+0x184>)
   d4b0e:	4821      	ldr	r0, [pc, #132]	; (d4b94 <_GLOBAL__sub_I_SystemMode+0x188>)
   d4b10:	462b      	mov	r3, r5
   d4b12:	4621      	mov	r1, r4
   d4b14:	b002      	add	sp, #8
   d4b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
Adafruit_MQTT_Subscribe pump_switch = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/pump_switch"); 
   d4b1a:	f001 be09 	b.w	d6730 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d4b1e:	bf00      	nop
   d4b20:	2003e3bc 	.word	0x2003e3bc
   d4b24:	ffff0000 	.word	0xffff0000
   d4b28:	2003e3a8 	.word	0x2003e3a8
   d4b2c:	000d4101 	.word	0x000d4101
   d4b30:	000dc981 	.word	0x000dc981
   d4b34:	2003e4a0 	.word	0x2003e4a0
   d4b38:	2003e414 	.word	0x2003e414
   d4b3c:	000d40c9 	.word	0x000d40c9
   d4b40:	000d7185 	.word	0x000d7185
   d4b44:	2003e3c8 	.word	0x2003e3c8
   d4b48:	2003e434 	.word	0x2003e434
   d4b4c:	2003e500 	.word	0x2003e500
   d4b50:	000d40cd 	.word	0x000d40cd
   d4b54:	000dcbbd 	.word	0x000dcbbd
   d4b58:	000dcbad 	.word	0x000dcbad
   d4b5c:	000dcba2 	.word	0x000dcba2
   d4b60:	000dd25c 	.word	0x000dd25c
   d4b64:	000d40cb 	.word	0x000d40cb
   d4b68:	000dcbde 	.word	0x000dcbde
   d4b6c:	2003e620 	.word	0x2003e620
   d4b70:	000dcbf7 	.word	0x000dcbf7
   d4b74:	2003e4c8 	.word	0x2003e4c8
   d4b78:	000dcc1a 	.word	0x000dcc1a
   d4b7c:	2003e4d8 	.word	0x2003e4d8
   d4b80:	000dcc37 	.word	0x000dcc37
   d4b84:	2003e4f4 	.word	0x2003e4f4
   d4b88:	000dcc56 	.word	0x000dcc56
   d4b8c:	2003e3f4 	.word	0x2003e3f4
   d4b90:	000dcc72 	.word	0x000dcc72
   d4b94:	2003e5dc 	.word	0x2003e5dc
   d4b98:	2003e400 	.word	0x2003e400
   d4b9c:	2003e3ac 	.word	0x2003e3ac
   d4ba0:	2003e3e4 	.word	0x2003e3e4

000d4ba4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4ba4:	4770      	bx	lr

000d4ba6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4ba6:	b510      	push	{r4, lr}
  }
   d4ba8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4baa:	4604      	mov	r4, r0
  }
   d4bac:	f003 fc6d 	bl	d848a <_ZdlPvj>
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4bb6:	4604      	mov	r4, r0
   d4bb8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4bba:	7922      	ldrb	r2, [r4, #4]
   d4bbc:	68a3      	ldr	r3, [r4, #8]
   d4bbe:	b132      	cbz	r2, d4bce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4bc0:	b9a3      	cbnz	r3, d4bec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4bc2:	490b      	ldr	r1, [pc, #44]	; (d4bf0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4bc4:	b002      	add	sp, #8
   d4bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4bca:	f002 bbed 	b.w	d73a8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4bce:	4a09      	ldr	r2, [pc, #36]	; (d4bf4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4bd0:	7b26      	ldrb	r6, [r4, #12]
   d4bd2:	4d09      	ldr	r5, [pc, #36]	; (d4bf8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4bd4:	4909      	ldr	r1, [pc, #36]	; (d4bfc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4bd6:	7b64      	ldrb	r4, [r4, #13]
   d4bd8:	2e01      	cmp	r6, #1
   d4bda:	bf18      	it	ne
   d4bdc:	4629      	movne	r1, r5
   d4bde:	e9cd 1400 	strd	r1, r4, [sp]
   d4be2:	4907      	ldr	r1, [pc, #28]	; (d4c00 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4be4:	f7ff fa94 	bl	d4110 <_ZN5Print6printfEPKcz>
  }
   d4be8:	b002      	add	sp, #8
   d4bea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4bec:	4a05      	ldr	r2, [pc, #20]	; (d4c04 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4bee:	e7ef      	b.n	d4bd0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4bf0:	000dcca0 	.word	0x000dcca0
   d4bf4:	000dc981 	.word	0x000dc981
   d4bf8:	000dcc9c 	.word	0x000dcc9c
   d4bfc:	000dcc98 	.word	0x000dcc98
   d4c00:	000dccb6 	.word	0x000dccb6
   d4c04:	000dcc8f 	.word	0x000dcc8f

000d4c08 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4c08:	f04f 33ff 	mov.w	r3, #4294967295
   d4c0c:	6103      	str	r3, [r0, #16]
{ }
   d4c0e:	4770      	bx	lr

000d4c10 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4c10:	6880      	ldr	r0, [r0, #8]
   d4c12:	4770      	bx	lr

000d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4c14:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4c16:	4c0b      	ldr	r4, [pc, #44]	; (d4c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4c18:	7821      	ldrb	r1, [r4, #0]
   d4c1a:	f3bf 8f5b 	dmb	ish
   d4c1e:	f011 0101 	ands.w	r1, r1, #1
   d4c22:	d10b      	bne.n	d4c3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4c24:	4620      	mov	r0, r4
   d4c26:	9101      	str	r1, [sp, #4]
   d4c28:	f7ff fa46 	bl	d40b8 <__cxa_guard_acquire>
   d4c2c:	9901      	ldr	r1, [sp, #4]
   d4c2e:	b128      	cbz	r0, d4c3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4c30:	4805      	ldr	r0, [pc, #20]	; (d4c48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4c32:	f002 f91f 	bl	d6e74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c36:	4620      	mov	r0, r4
   d4c38:	f7ff fa43 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4c3c:	4802      	ldr	r0, [pc, #8]	; (d4c48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4c3e:	b002      	add	sp, #8
   d4c40:	bd10      	pop	{r4, pc}
   d4c42:	bf00      	nop
   d4c44:	2003e638 	.word	0x2003e638
   d4c48:	2003e63c 	.word	0x2003e63c

000d4c4c <_ZN15Adafruit_BME2807spixferEh>:
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sck == -1)
   d4c50:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c54:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4c56:	4605      	mov	r5, r0
   d4c58:	460f      	mov	r7, r1
    if (_sck == -1)
   d4c5a:	d106      	bne.n	d4c6a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4c5c:	f7ff ffda 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4c60:	4639      	mov	r1, r7
}
   d4c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4c66:	f002 ba25 	b.w	d70b4 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4c6a:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4c6c:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4c6e:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4c72:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4c76:	2100      	movs	r1, #0
   d4c78:	b280      	uxth	r0, r0
   d4c7a:	f003 fb58 	bl	d832e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4c7e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4c82:	fa08 f106 	lsl.w	r1, r8, r6
   d4c86:	4039      	ands	r1, r7
   d4c88:	b280      	uxth	r0, r0
   d4c8a:	f003 fb50 	bl	d832e <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4c8e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4c92:	2101      	movs	r1, #1
   d4c94:	b280      	uxth	r0, r0
   d4c96:	f003 fb4a 	bl	d832e <digitalWrite>
        if (digitalRead(_miso))
   d4c9a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4c9e:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4ca0:	b280      	uxth	r0, r0
        reply <<= 1;
   d4ca2:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4ca4:	f003 fb5c 	bl	d8360 <digitalRead>
   d4ca8:	b108      	cbz	r0, d4cae <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4caa:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4cae:	3e01      	subs	r6, #1
   d4cb0:	d2df      	bcs.n	d4c72 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4cb8:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4cba:	f7ff ffab 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4cc2:	f002 b918 	b.w	d6ef6 <_ZN8SPIClass14endTransactionEv>

000d4cc6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4cc6:	b507      	push	{r0, r1, r2, lr}
   d4cc8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4cca:	f7ff ffa3 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4cce:	9901      	ldr	r1, [sp, #4]
    }
   d4cd0:	b003      	add	sp, #12
   d4cd2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4cd6:	f002 b927 	b.w	d6f28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4cdc <_ZN15Adafruit_BME2806read24Eh>:
{
   d4cdc:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4cde:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4ce2:	3301      	adds	r3, #1
{
   d4ce4:	b085      	sub	sp, #20
   d4ce6:	4604      	mov	r4, r0
   d4ce8:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4cea:	d123      	bne.n	d4d34 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4cec:	7901      	ldrb	r1, [r0, #4]
   d4cee:	6800      	ldr	r0, [r0, #0]
   d4cf0:	f002 ff1c 	bl	d7b2c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4cf4:	6820      	ldr	r0, [r4, #0]
   d4cf6:	6803      	ldr	r3, [r0, #0]
   d4cf8:	4629      	mov	r1, r5
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	4798      	blx	r3
        _wire -> endTransmission();
   d4cfe:	6820      	ldr	r0, [r4, #0]
   d4d00:	f002 ff1f 	bl	d7b42 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4d04:	7921      	ldrb	r1, [r4, #4]
   d4d06:	6820      	ldr	r0, [r4, #0]
   d4d08:	2203      	movs	r2, #3
   d4d0a:	f002 ff0c 	bl	d7b26 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4d0e:	6820      	ldr	r0, [r4, #0]
   d4d10:	6803      	ldr	r3, [r0, #0]
   d4d12:	695b      	ldr	r3, [r3, #20]
   d4d14:	4798      	blx	r3
        value <<= 8;
   d4d16:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d18:	6820      	ldr	r0, [r4, #0]
   d4d1a:	6803      	ldr	r3, [r0, #0]
   d4d1c:	695b      	ldr	r3, [r3, #20]
   d4d1e:	4798      	blx	r3
   d4d20:	4328      	orrs	r0, r5
        value <<= 8;
   d4d22:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4d24:	6820      	ldr	r0, [r4, #0]
   d4d26:	6803      	ldr	r3, [r0, #0]
   d4d28:	695b      	ldr	r3, [r3, #20]
   d4d2a:	4798      	blx	r3
   d4d2c:	4305      	orrs	r5, r0
}
   d4d2e:	4628      	mov	r0, r5
   d4d30:	b005      	add	sp, #20
   d4d32:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4d34:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d38:	3301      	adds	r3, #1
   d4d3a:	d10c      	bne.n	d4d56 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4d3c:	4b1a      	ldr	r3, [pc, #104]	; (d4da8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4d3e:	9300      	str	r3, [sp, #0]
   d4d40:	2300      	movs	r3, #0
   d4d42:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d46:	4b19      	ldr	r3, [pc, #100]	; (d4dac <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4d48:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d4a:	4668      	mov	r0, sp
   d4d4c:	2301      	movs	r3, #1
   d4d4e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4d52:	f7ff ffb8 	bl	d4cc6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4d56:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d5a:	2100      	movs	r1, #0
   d4d5c:	b280      	uxth	r0, r0
   d4d5e:	f003 fae6 	bl	d832e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4d62:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4d66:	4620      	mov	r0, r4
   d4d68:	f7ff ff70 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4d6c:	2100      	movs	r1, #0
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f7ff ff6c 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d4d74:	2100      	movs	r1, #0
        value <<= 8;
   d4d76:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4d78:	4620      	mov	r0, r4
   d4d7a:	f7ff ff67 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
   d4d7e:	4328      	orrs	r0, r5
        value <<= 8;
   d4d80:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4d82:	2100      	movs	r1, #0
   d4d84:	4620      	mov	r0, r4
   d4d86:	f7ff ff61 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
   d4d8a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d4d8c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d90:	2101      	movs	r1, #1
   d4d92:	b280      	uxth	r0, r0
   d4d94:	f003 facb 	bl	d832e <digitalWrite>
        if (_sck == -1)
   d4d98:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4d9c:	3301      	adds	r3, #1
   d4d9e:	d1c6      	bne.n	d4d2e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d4da0:	f7ff ff8a 	bl	d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d4da4:	e7c3      	b.n	d4d2e <_ZN15Adafruit_BME2806read24Eh+0x52>
   d4da6:	bf00      	nop
   d4da8:	000dccdc 	.word	0x000dccdc
   d4dac:	0007a120 	.word	0x0007a120

000d4db0 <_ZN15Adafruit_BME28015readTemperatureEv>:
{
   d4db0:	b510      	push	{r4, lr}
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4db2:	21fa      	movs	r1, #250	; 0xfa
{
   d4db4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4db6:	f7ff ff91 	bl	d4cdc <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4dba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4dbe:	d01e      	beq.n	d4dfe <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4dc0:	8aa1      	ldrh	r1, [r4, #20]
    return T/100;
   d4dc2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4e04 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4dc6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4dc8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4dcc:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d4dd0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4dd4:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4dd6:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d4dd8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4ddc:	1312      	asrs	r2, r2, #12
   d4dde:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4de0:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d4de2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d4de6:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d4de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4dec:	3380      	adds	r3, #128	; 0x80
   d4dee:	121b      	asrs	r3, r3, #8
   d4df0:	ee07 3a90 	vmov	s15, r3
   d4df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d4df8:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4dfc:	bd10      	pop	{r4, pc}
        return NAN;
   d4dfe:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e08 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d4e02:	e7fb      	b.n	d4dfc <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d4e04:	42c80000 	.word	0x42c80000
   d4e08:	7fc00000 	.word	0x7fc00000

000d4e0c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   d4e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e10:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4e12:	f7ff ffcd 	bl	d4db0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e16:	21f7      	movs	r1, #247	; 0xf7
   d4e18:	4620      	mov	r0, r4
   d4e1a:	f7ff ff5f 	bl	d4cdc <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4e22:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4e24:	f000 80bf 	beq.w	d4fa6 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
    var1 = ((int64_t)t_fine) - 128000;
   d4e28:	68e0      	ldr	r0, [r4, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e2a:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d4e2e:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d4e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d4e36:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4e3a:	fba3 8903 	umull	r8, r9, r3, r3
   d4e3e:	fb03 f102 	mul.w	r1, r3, r2
   d4e42:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4e46:	17f7      	asrs	r7, r6, #31
   d4e48:	fb06 f102 	mul.w	r1, r6, r2
   d4e4c:	fb03 1107 	mla	r1, r3, r7, r1
   d4e50:	fba6 6703 	umull	r6, r7, r6, r3
   d4e54:	440f      	add	r7, r1
   d4e56:	0339      	lsls	r1, r7, #12
   d4e58:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d4e5c:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4e5e:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d4e62:	17f7      	asrs	r7, r6, #31
   d4e64:	fb06 fc09 	mul.w	ip, r6, r9
   d4e68:	fb08 cc07 	mla	ip, r8, r7, ip
   d4e6c:	fba6 6708 	umull	r6, r7, r6, r8
   d4e70:	4467      	add	r7, ip
   d4e72:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d4e76:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4e7a:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4e7c:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d4e80:	eb1c 0000 	adds.w	r0, ip, r0
   d4e84:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4e88:	3000      	adds	r0, #0
   d4e8a:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d4e8e:	fba0 0106 	umull	r0, r1, r0, r6
   d4e92:	fb06 110e 	mla	r1, r6, lr, r1
   d4e96:	104e      	asrs	r6, r1, #1
   d4e98:	17cf      	asrs	r7, r1, #31
    if (var1 == 0) {
   d4e9a:	ea56 0107 	orrs.w	r1, r6, r7
   d4e9e:	f000 8085 	beq.w	d4fac <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4ea2:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d4ea6:	fb00 fc09 	mul.w	ip, r0, r9
   d4eaa:	17c1      	asrs	r1, r0, #31
   d4eac:	fb08 cc01 	mla	ip, r8, r1, ip
   d4eb0:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4eb4:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d4eb8:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d4ebc:	fb08 f202 	mul.w	r2, r8, r2
   d4ec0:	fb03 2209 	mla	r2, r3, r9, r2
   d4ec4:	fba8 8903 	umull	r8, r9, r8, r3
   d4ec8:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4eca:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ecc:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d4ed0:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d4ed4:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ed6:	1812      	adds	r2, r2, r0
    p = 1048576 - adc_P;
   d4ed8:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4edc:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4ee0:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ee4:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4ee8:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d4eea:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4eec:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d4eee:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d4ef2:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4ef6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d4efa:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d4efe:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d4f02:	1ac0      	subs	r0, r0, r3
   d4f04:	f640 4335 	movw	r3, #3125	; 0xc35
   d4f08:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d4f0c:	fba0 0103 	umull	r0, r1, r0, r3
   d4f10:	fb03 110e 	mla	r1, r3, lr, r1
   d4f14:	4632      	mov	r2, r6
   d4f16:	463b      	mov	r3, r7
   d4f18:	f005 fb56 	bl	da5c8 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4f1c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d4f20:	134d      	asrs	r5, r1, #13
   d4f22:	0b46      	lsrs	r6, r0, #13
   d4f24:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d4f28:	fb02 f705 	mul.w	r7, r2, r5
   d4f2c:	17d3      	asrs	r3, r2, #31
   d4f2e:	fb06 7703 	mla	r7, r6, r3, r7
   d4f32:	fba2 2306 	umull	r2, r3, r2, r6
   d4f36:	443b      	add	r3, r7
   d4f38:	4355      	muls	r5, r2
   d4f3a:	fb06 5503 	mla	r5, r6, r3, r5
   d4f3e:	fba2 2306 	umull	r2, r3, r2, r6
   d4f42:	442b      	add	r3, r5
   d4f44:	0e55      	lsrs	r5, r2, #25
   d4f46:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4f4a:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f4e:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d4f52:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4f54:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f58:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4f5c:	17d3      	asrs	r3, r2, #31
   d4f5e:	4351      	muls	r1, r2
   d4f60:	fb00 1103 	mla	r1, r0, r3, r1
   d4f64:	fba2 2300 	umull	r2, r3, r2, r0
   d4f68:	440b      	add	r3, r1
   d4f6a:	0cd1      	lsrs	r1, r2, #19
   d4f6c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f70:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4f72:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4f76:	eb46 0300 	adc.w	r3, r6, r0
   d4f7a:	0a2a      	lsrs	r2, r5, #8
   d4f7c:	17e5      	asrs	r5, r4, #31
   d4f7e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4f82:	1219      	asrs	r1, r3, #8
   d4f84:	0120      	lsls	r0, r4, #4
   d4f86:	012b      	lsls	r3, r5, #4
   d4f88:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d4f8c:	1880      	adds	r0, r0, r2
   d4f8e:	eb43 0101 	adc.w	r1, r3, r1
   d4f92:	f005 fadb 	bl	da54c <__aeabi_l2f>
   d4f96:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4fb4 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d4f9a:	ee07 0a90 	vmov	s15, r0
   d4f9e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d4fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d4fa6:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4fb8 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d4faa:	e7fa      	b.n	d4fa2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d4fac:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4fbc <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4fb0:	e7f7      	b.n	d4fa2 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d4fb2:	bf00      	nop
   d4fb4:	3b800000 	.word	0x3b800000
   d4fb8:	7fc00000 	.word	0x7fc00000
   d4fbc:	00000000 	.word	0x00000000

000d4fc0 <_ZN15Adafruit_BME28012readAltitudeEf>:
{
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	ed2d 8b02 	vpush	{d8}
   d4fc6:	eeb0 8a40 	vmov.f32	s16, s0
    float atmospheric = readPressure() / 100.0F;
   d4fca:	f7ff ff1f 	bl	d4e0c <_ZN15Adafruit_BME28012readPressureEv>
   d4fce:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5028 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d4fd2:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4fd6:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d4fda:	ee17 0a90 	vmov	r0, s15
   d4fde:	f004 fe6d 	bl	d9cbc <__aeabi_f2d>
   d4fe2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d5018 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d4fe6:	ec41 0b10 	vmov	d0, r0, r1
   d4fea:	f003 fb65 	bl	d86b8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d4fee:	490f      	ldr	r1, [pc, #60]	; (d502c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d4ff0:	ec53 2b10 	vmov	r2, r3, d0
   d4ff4:	2000      	movs	r0, #0
   d4ff6:	f004 fd01 	bl	d99fc <__aeabi_dsub>
   d4ffa:	a309      	add	r3, pc, #36	; (adr r3, d5020 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d4ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5000:	f004 feb4 	bl	d9d6c <__aeabi_dmul>
   d5004:	f005 f982 	bl	da30c <__aeabi_d2f>
}
   d5008:	ecbd 8b02 	vpop	{d8}
   d500c:	ee00 0a10 	vmov	s0, r0
   d5010:	bd08      	pop	{r3, pc}
   d5012:	bf00      	nop
   d5014:	f3af 8000 	nop.w
   d5018:	1a36e2eb 	.word	0x1a36e2eb
   d501c:	3fc85bc0 	.word	0x3fc85bc0
   d5020:	00000000 	.word	0x00000000
   d5024:	40e5a540 	.word	0x40e5a540
   d5028:	42c80000 	.word	0x42c80000
   d502c:	3ff00000 	.word	0x3ff00000

000d5030 <_ZN15Adafruit_BME2806read16Eh>:
{
   d5030:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5032:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5036:	3301      	adds	r3, #1
{
   d5038:	b085      	sub	sp, #20
   d503a:	4604      	mov	r4, r0
   d503c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d503e:	d11f      	bne.n	d5080 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5040:	7901      	ldrb	r1, [r0, #4]
   d5042:	6800      	ldr	r0, [r0, #0]
   d5044:	f002 fd72 	bl	d7b2c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5048:	6820      	ldr	r0, [r4, #0]
   d504a:	6803      	ldr	r3, [r0, #0]
   d504c:	4629      	mov	r1, r5
   d504e:	689b      	ldr	r3, [r3, #8]
   d5050:	4798      	blx	r3
        _wire -> endTransmission();
   d5052:	6820      	ldr	r0, [r4, #0]
   d5054:	f002 fd75 	bl	d7b42 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5058:	7921      	ldrb	r1, [r4, #4]
   d505a:	6820      	ldr	r0, [r4, #0]
   d505c:	2202      	movs	r2, #2
   d505e:	f002 fd62 	bl	d7b26 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5062:	6820      	ldr	r0, [r4, #0]
   d5064:	6803      	ldr	r3, [r0, #0]
   d5066:	695b      	ldr	r3, [r3, #20]
   d5068:	4798      	blx	r3
   d506a:	4605      	mov	r5, r0
   d506c:	6820      	ldr	r0, [r4, #0]
   d506e:	6803      	ldr	r3, [r0, #0]
   d5070:	695b      	ldr	r3, [r3, #20]
   d5072:	4798      	blx	r3
   d5074:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5078:	b285      	uxth	r5, r0
}
   d507a:	4628      	mov	r0, r5
   d507c:	b005      	add	sp, #20
   d507e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5080:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5084:	3301      	adds	r3, #1
   d5086:	d10c      	bne.n	d50a2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5088:	4b18      	ldr	r3, [pc, #96]	; (d50ec <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d508a:	9300      	str	r3, [sp, #0]
   d508c:	2300      	movs	r3, #0
   d508e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5092:	4b17      	ldr	r3, [pc, #92]	; (d50f0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5094:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5096:	4668      	mov	r0, sp
   d5098:	2301      	movs	r3, #1
   d509a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d509e:	f7ff fe12 	bl	d4cc6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d50a2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d50a6:	2100      	movs	r1, #0
   d50a8:	b280      	uxth	r0, r0
   d50aa:	f003 f940 	bl	d832e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d50ae:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d50b2:	4620      	mov	r0, r4
   d50b4:	f7ff fdca 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d50b8:	2100      	movs	r1, #0
   d50ba:	4620      	mov	r0, r4
   d50bc:	f7ff fdc6 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
   d50c0:	2100      	movs	r1, #0
   d50c2:	4605      	mov	r5, r0
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7ff fdc1 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
   d50ca:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d50ce:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d50d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d50d4:	2101      	movs	r1, #1
   d50d6:	b280      	uxth	r0, r0
   d50d8:	f003 f929 	bl	d832e <digitalWrite>
        if (_sck == -1)
   d50dc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d50e0:	3301      	adds	r3, #1
   d50e2:	d1ca      	bne.n	d507a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d50e4:	f7ff fde8 	bl	d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d50e8:	e7c7      	b.n	d507a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d50ea:	bf00      	nop
   d50ec:	000dccdc 	.word	0x000dccdc
   d50f0:	0007a120 	.word	0x0007a120

000d50f4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d50f4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d50f6:	f7ff ff9b 	bl	d5030 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d50fa:	ba40      	rev16	r0, r0
}
   d50fc:	b280      	uxth	r0, r0
   d50fe:	bd08      	pop	{r3, pc}

000d5100 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d5100:	b538      	push	{r3, r4, r5, lr}
   d5102:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d5104:	f7ff fe54 	bl	d4db0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d5108:	21fd      	movs	r1, #253	; 0xfd
   d510a:	4620      	mov	r0, r4
   d510c:	f7ff ff90 	bl	d5030 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d5110:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d5114:	d038      	beq.n	d5188 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5116:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d511a:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d511c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5120:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d5122:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5126:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d512a:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d512e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d5132:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5134:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5138:	4353      	muls	r3, r2
   d513a:	12db      	asrs	r3, r3, #11
   d513c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d5140:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d5144:	4353      	muls	r3, r2
   d5146:	129b      	asrs	r3, r3, #10
   d5148:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d514a:	129b      	asrs	r3, r3, #10
   d514c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5150:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5154:	4353      	muls	r3, r2
   d5156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d515a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d515c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d515e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5160:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5164:	4352      	muls	r2, r2
   d5166:	11d2      	asrs	r2, r2, #7
   d5168:	434a      	muls	r2, r1
   d516a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d516e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5172:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5176:	bfa8      	it	ge
   d5178:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d517c:	131b      	asrs	r3, r3, #12
   d517e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5182:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5186:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5188:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5190 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d518c:	e7fb      	b.n	d5186 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d518e:	bf00      	nop
   d5190:	7fc00000 	.word	0x7fc00000

000d5194 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5194:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5196:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d519a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d519c:	b085      	sub	sp, #20
   d519e:	4604      	mov	r4, r0
   d51a0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d51a2:	d118      	bne.n	d51d6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d51a4:	7901      	ldrb	r1, [r0, #4]
   d51a6:	6800      	ldr	r0, [r0, #0]
   d51a8:	f002 fcc0 	bl	d7b2c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d51ac:	6820      	ldr	r0, [r4, #0]
   d51ae:	6803      	ldr	r3, [r0, #0]
   d51b0:	4629      	mov	r1, r5
   d51b2:	689b      	ldr	r3, [r3, #8]
   d51b4:	4798      	blx	r3
        _wire -> endTransmission();
   d51b6:	6820      	ldr	r0, [r4, #0]
   d51b8:	f002 fcc3 	bl	d7b42 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d51bc:	7921      	ldrb	r1, [r4, #4]
   d51be:	6820      	ldr	r0, [r4, #0]
   d51c0:	2201      	movs	r2, #1
   d51c2:	f002 fcb0 	bl	d7b26 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d51c6:	6820      	ldr	r0, [r4, #0]
   d51c8:	6803      	ldr	r3, [r0, #0]
   d51ca:	695b      	ldr	r3, [r3, #20]
   d51cc:	4798      	blx	r3
   d51ce:	b2c5      	uxtb	r5, r0
}
   d51d0:	4628      	mov	r0, r5
   d51d2:	b005      	add	sp, #20
   d51d4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d51d6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d51da:	3301      	adds	r3, #1
   d51dc:	d10c      	bne.n	d51f8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d51de:	4b15      	ldr	r3, [pc, #84]	; (d5234 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d51e0:	9300      	str	r3, [sp, #0]
   d51e2:	2300      	movs	r3, #0
   d51e4:	f88d 3004 	strb.w	r3, [sp, #4]
   d51e8:	4b13      	ldr	r3, [pc, #76]	; (d5238 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d51ea:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d51ec:	4668      	mov	r0, sp
   d51ee:	2301      	movs	r3, #1
   d51f0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d51f4:	f7ff fd67 	bl	d4cc6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d51f8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51fc:	2100      	movs	r1, #0
   d51fe:	b280      	uxth	r0, r0
   d5200:	f003 f895 	bl	d832e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5204:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff fd1f 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d520e:	2100      	movs	r1, #0
   d5210:	4620      	mov	r0, r4
   d5212:	f7ff fd1b 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
   d5216:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5218:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d521c:	2101      	movs	r1, #1
   d521e:	b280      	uxth	r0, r0
   d5220:	f003 f885 	bl	d832e <digitalWrite>
        if (_sck == -1)
   d5224:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5228:	3301      	adds	r3, #1
   d522a:	d1d1      	bne.n	d51d0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d522c:	f7ff fd44 	bl	d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5230:	e7ce      	b.n	d51d0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d5232:	bf00      	nop
   d5234:	000dccdc 	.word	0x000dccdc
   d5238:	0007a120 	.word	0x0007a120

000d523c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d523c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d523e:	21f3      	movs	r1, #243	; 0xf3
   d5240:	f7ff ffa8 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
}
   d5244:	f000 0001 	and.w	r0, r0, #1
   d5248:	bd08      	pop	{r3, pc}

000d524a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d524a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d524c:	2188      	movs	r1, #136	; 0x88
{
   d524e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5250:	f7ff ff50 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5254:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5256:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5258:	4620      	mov	r0, r4
   d525a:	f7ff ff4b 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d525e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5260:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5262:	4620      	mov	r0, r4
   d5264:	f7ff ff46 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5268:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d526a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff ff41 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5272:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5274:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5276:	4620      	mov	r0, r4
   d5278:	f7ff ff3c 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d527c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d527e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5280:	4620      	mov	r0, r4
   d5282:	f7ff ff37 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5286:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5288:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ff32 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5290:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5292:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff ff2d 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d529a:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d529c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff ff28 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d52a4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d52a6:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d52a8:	4620      	mov	r0, r4
   d52aa:	f7ff ff23 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d52ae:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d52b0:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d52b2:	4620      	mov	r0, r4
   d52b4:	f7ff ff1e 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
   d52b8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d52ba:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d52bc:	4620      	mov	r0, r4
   d52be:	f7ff ff19 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52c2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d52c4:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff ff64 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d52cc:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d52ce:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ff0e 	bl	d50f4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52d8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d52da:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52dc:	4620      	mov	r0, r4
   d52de:	f7ff ff59 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52e2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d52e4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d52e8:	4620      	mov	r0, r4
   d52ea:	f7ff ff53 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
   d52ee:	21e5      	movs	r1, #229	; 0xe5
   d52f0:	4605      	mov	r5, r0
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff ff4e 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
   d52f8:	f000 030f 	and.w	r3, r0, #15
   d52fc:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5300:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5302:	21e6      	movs	r1, #230	; 0xe6
   d5304:	4620      	mov	r0, r4
   d5306:	f7ff ff45 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
   d530a:	21e5      	movs	r1, #229	; 0xe5
   d530c:	4605      	mov	r5, r0
   d530e:	4620      	mov	r0, r4
   d5310:	f7ff ff40 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
   d5314:	1103      	asrs	r3, r0, #4
   d5316:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d531a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d531c:	21e7      	movs	r1, #231	; 0xe7
   d531e:	4620      	mov	r0, r4
   d5320:	f7ff ff38 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
   d5324:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5328:	bd38      	pop	{r3, r4, r5, pc}
	...

000d532c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d532c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d532e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5332:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5334:	4604      	mov	r4, r0
   d5336:	460e      	mov	r6, r1
   d5338:	4615      	mov	r5, r2
    if (_cs == -1) {
   d533a:	d112      	bne.n	d5362 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d533c:	7901      	ldrb	r1, [r0, #4]
   d533e:	6800      	ldr	r0, [r0, #0]
   d5340:	f002 fbf4 	bl	d7b2c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5344:	6820      	ldr	r0, [r4, #0]
   d5346:	6803      	ldr	r3, [r0, #0]
   d5348:	4631      	mov	r1, r6
   d534a:	689b      	ldr	r3, [r3, #8]
   d534c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d534e:	6820      	ldr	r0, [r4, #0]
   d5350:	6803      	ldr	r3, [r0, #0]
   d5352:	4629      	mov	r1, r5
   d5354:	689b      	ldr	r3, [r3, #8]
   d5356:	4798      	blx	r3
        _wire -> endTransmission();
   d5358:	6820      	ldr	r0, [r4, #0]
   d535a:	f002 fbf2 	bl	d7b42 <_ZN7TwoWire15endTransmissionEv>
}
   d535e:	b004      	add	sp, #16
   d5360:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5362:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5366:	3301      	adds	r3, #1
   d5368:	d10c      	bne.n	d5384 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d536a:	4b14      	ldr	r3, [pc, #80]	; (d53bc <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d536c:	9300      	str	r3, [sp, #0]
   d536e:	2300      	movs	r3, #0
   d5370:	f88d 3004 	strb.w	r3, [sp, #4]
   d5374:	4b12      	ldr	r3, [pc, #72]	; (d53c0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5376:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5378:	4668      	mov	r0, sp
   d537a:	2301      	movs	r3, #1
   d537c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5380:	f7ff fca1 	bl	d4cc6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5384:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5388:	2100      	movs	r1, #0
   d538a:	b280      	uxth	r0, r0
   d538c:	f002 ffcf 	bl	d832e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5390:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5394:	4620      	mov	r0, r4
   d5396:	f7ff fc59 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d539a:	4629      	mov	r1, r5
   d539c:	4620      	mov	r0, r4
   d539e:	f7ff fc55 	bl	d4c4c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d53a2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d53a6:	2101      	movs	r1, #1
   d53a8:	b280      	uxth	r0, r0
   d53aa:	f002 ffc0 	bl	d832e <digitalWrite>
    if (_sck == -1)
   d53ae:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d53b2:	3301      	adds	r3, #1
   d53b4:	d1d3      	bne.n	d535e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d53b6:	f7ff fc7f 	bl	d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d53ba:	e7d0      	b.n	d535e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d53bc:	000dccdc 	.word	0x000dccdc
   d53c0:	0007a120 	.word	0x0007a120

000d53c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d53c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d53c6:	00db      	lsls	r3, r3, #3
   d53c8:	f002 0207 	and.w	r2, r2, #7
   d53cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d53d0:	4313      	orrs	r3, r2
   d53d2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d53d6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d53da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d53de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d53e2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d53e6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d53ea:	f366 1347 	bfi	r3, r6, #5, #3
   d53ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d53f2:	00ed      	lsls	r5, r5, #3
   d53f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d53f8:	f007 0707 	and.w	r7, r7, #7
   d53fc:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d5400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5404:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5406:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5408:	431d      	orrs	r5, r3
   d540a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d540e:	f006 0207 	and.w	r2, r6, #7
   d5412:	21f2      	movs	r1, #242	; 0xf2
   d5414:	f7ff ff8a 	bl	d532c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5418:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d541c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d5420:	f002 0107 	and.w	r1, r2, #7
   d5424:	009b      	lsls	r3, r3, #2
   d5426:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d542a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d542e:	4620      	mov	r0, r4
   d5430:	21f5      	movs	r1, #245	; 0xf5
   d5432:	f7ff ff7b 	bl	d532c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5436:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d543a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d543e:	f002 0107 	and.w	r1, r2, #7
   d5442:	009b      	lsls	r3, r3, #2
   d5444:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5448:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d544c:	4620      	mov	r0, r4
   d544e:	21f4      	movs	r1, #244	; 0xf4
}
   d5450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5454:	f7ff bf6a 	b.w	d532c <_ZN15Adafruit_BME2806write8Ehh>

000d5458 <_ZN15Adafruit_BME2804initEv>:
{
   d5458:	b530      	push	{r4, r5, lr}
   d545a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d545c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5460:	1c42      	adds	r2, r0, #1
{
   d5462:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5464:	d119      	bne.n	d549a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5466:	6820      	ldr	r0, [r4, #0]
   d5468:	f002 fb2e 	bl	d7ac8 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d546c:	21d0      	movs	r1, #208	; 0xd0
   d546e:	4620      	mov	r0, r4
   d5470:	f7ff fe90 	bl	d5194 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5474:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5476:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5478:	d145      	bne.n	d5506 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d547a:	4620      	mov	r0, r4
   d547c:	22b6      	movs	r2, #182	; 0xb6
   d547e:	21e0      	movs	r1, #224	; 0xe0
   d5480:	f7ff ff54 	bl	d532c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5484:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5488:	f002 f8a2 	bl	d75d0 <delay>
    while (isReadingCalibration())
   d548c:	4620      	mov	r0, r4
   d548e:	f7ff fed5 	bl	d523c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5492:	4605      	mov	r5, r0
   d5494:	b328      	cbz	r0, d54e2 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5496:	2064      	movs	r0, #100	; 0x64
   d5498:	e7f6      	b.n	d5488 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d549a:	2101      	movs	r1, #1
   d549c:	b280      	uxth	r0, r0
   d549e:	f002 ff46 	bl	d832e <digitalWrite>
        pinMode(_cs, OUTPUT);
   d54a2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d54a6:	2101      	movs	r1, #1
   d54a8:	b280      	uxth	r0, r0
   d54aa:	f002 ff2f 	bl	d830c <pinMode>
        if (_sck == -1) {
   d54ae:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d54b2:	1c43      	adds	r3, r0, #1
   d54b4:	d104      	bne.n	d54c0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d54b6:	f7ff fbad 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d54ba:	f001 fce5 	bl	d6e88 <_ZN8SPIClass5beginEv>
    }
   d54be:	e7d5      	b.n	d546c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d54c0:	2101      	movs	r1, #1
   d54c2:	b280      	uxth	r0, r0
   d54c4:	f002 ff22 	bl	d830c <pinMode>
            pinMode(_mosi, OUTPUT);
   d54c8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d54cc:	2101      	movs	r1, #1
   d54ce:	b280      	uxth	r0, r0
   d54d0:	f002 ff1c 	bl	d830c <pinMode>
            pinMode(_miso, INPUT);
   d54d4:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d54d8:	2100      	movs	r1, #0
   d54da:	b280      	uxth	r0, r0
   d54dc:	f002 ff16 	bl	d830c <pinMode>
   d54e0:	e7c4      	b.n	d546c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff feb1 	bl	d524a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d54e8:	2305      	movs	r3, #5
   d54ea:	9300      	str	r3, [sp, #0]
   d54ec:	461a      	mov	r2, r3
   d54ee:	2103      	movs	r1, #3
   d54f0:	4620      	mov	r0, r4
   d54f2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d54f6:	f7ff ff65 	bl	d53c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d54fa:	2064      	movs	r0, #100	; 0x64
   d54fc:	f002 f868 	bl	d75d0 <delay>
   d5500:	2001      	movs	r0, #1
}
   d5502:	b005      	add	sp, #20
   d5504:	bd30      	pop	{r4, r5, pc}
        return false;
   d5506:	2000      	movs	r0, #0
   d5508:	e7fb      	b.n	d5502 <_ZN15Adafruit_BME2804initEv+0xaa>

000d550a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d550a:	2377      	movs	r3, #119	; 0x77
{
   d550c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d550e:	7103      	strb	r3, [r0, #4]
{
   d5510:	4604      	mov	r4, r0
	_wire = &Wire;
   d5512:	f002 ff8d 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5516:	6020      	str	r0, [r4, #0]
	status = init();
   d5518:	4620      	mov	r0, r4
   d551a:	f7ff ff9d 	bl	d5458 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d551e:	b930      	cbnz	r0, d552e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d5520:	2376      	movs	r3, #118	; 0x76
   d5522:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5524:	4620      	mov	r0, r4
}
   d5526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d552a:	f7ff bf95 	b.w	d5458 <_ZN15Adafruit_BME2804initEv>
}
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5530:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d5532:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5534:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d5538:	2d02      	cmp	r5, #2
   d553a:	d067      	beq.n	d560c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d553c:	2d03      	cmp	r5, #3
   d553e:	f000 8097 	beq.w	d5670 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d5542:	2d01      	cmp	r5, #1
   d5544:	d16a      	bne.n	d561c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d5546:	8905      	ldrh	r5, [r0, #8]
   d5548:	43d2      	mvns	r2, r2
   d554a:	442a      	add	r2, r5
   d554c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d554e:	2a00      	cmp	r2, #0
   d5550:	db5b      	blt.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5552:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5556:	4295      	cmp	r5, r2
   d5558:	dd57      	ble.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d555a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d555c:	bfbe      	ittt	lt
   d555e:	185b      	addlt	r3, r3, r1
   d5560:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5562:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5564:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d5568:	18cd      	adds	r5, r1, r3
   d556a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d556c:	bfc4      	itt	gt
   d556e:	1a43      	subgt	r3, r0, r1
   d5570:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5572:	2b00      	cmp	r3, #0
   d5574:	dd49      	ble.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5576:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d557a:	f8df c11c 	ldr.w	ip, [pc, #284]	; d5698 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d557e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5582:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d5586:	b2db      	uxtb	r3, r3
  pBuf += x;
   d5588:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d558c:	d01a      	beq.n	d55c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d558e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5592:	4e3f      	ldr	r6, [pc, #252]	; (d5690 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d5594:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5596:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d5598:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d559a:	bf3f      	itttt	cc
   d559c:	eba5 0e03 	subcc.w	lr, r5, r3
   d55a0:	26ff      	movcc	r6, #255	; 0xff
   d55a2:	fa46 f60e 	asrcc.w	r6, r6, lr
   d55a6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d55a8:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d55ac:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d55ae:	bf0c      	ite	eq
   d55b0:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d55b2:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d55b4:	42ab      	cmp	r3, r5
   d55b6:	f80c 6002 	strb.w	r6, [ip, r2]
   d55ba:	d326      	bcc.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d55bc:	3908      	subs	r1, #8
   d55be:	440b      	add	r3, r1
   d55c0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d55c2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d55c4:	2b07      	cmp	r3, #7
   d55c6:	d917      	bls.n	d55f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d55c8:	2c01      	cmp	r4, #1
   d55ca:	bf0c      	ite	eq
   d55cc:	25ff      	moveq	r5, #255	; 0xff
   d55ce:	2500      	movne	r5, #0
   d55d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d55d4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d55d6:	3a08      	subs	r2, #8
   d55d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d55da:	2a07      	cmp	r2, #7
      *pBuf = val;
   d55dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d55e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d55e4:	d8f7      	bhi.n	d55d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d55e6:	f1a3 0208 	sub.w	r2, r3, #8
   d55ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d55ee:	3201      	adds	r2, #1
   d55f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d55f4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d55f8:	b13b      	cbz	r3, d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d55fa:	4a26      	ldr	r2, [pc, #152]	; (d5694 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d55fc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d55fe:	7803      	ldrb	r3, [r0, #0]
   d5600:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d5602:	bf0c      	ite	eq
   d5604:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5606:	4393      	bicne	r3, r2
   d5608:	7003      	strb	r3, [r0, #0]
}
   d560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d560c:	8945      	ldrh	r5, [r0, #10]
   d560e:	43d2      	mvns	r2, r2
   d5610:	442a      	add	r2, r5
      x -= (w-1);
   d5612:	18cd      	adds	r5, r1, r3
   d5614:	8901      	ldrh	r1, [r0, #8]
   d5616:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d5618:	b212      	sxth	r2, r2
      x -= (w-1);
   d561a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d561c:	2a00      	cmp	r2, #0
   d561e:	dbf4      	blt.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5620:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d5624:	4295      	cmp	r5, r2
   d5626:	ddf0      	ble.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d5628:	2900      	cmp	r1, #0
    w += x;
   d562a:	bfbe      	ittt	lt
   d562c:	185b      	addlt	r3, r3, r1
   d562e:	b21b      	sxthlt	r3, r3
    x = 0;
   d5630:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d5632:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d5636:	18ce      	adds	r6, r1, r3
   d5638:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d563a:	bfc4      	itt	gt
   d563c:	1a6b      	subgt	r3, r5, r1
   d563e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d5640:	2b00      	cmp	r3, #0
   d5642:	dde2      	ble.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5644:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d5646:	2580      	movs	r5, #128	; 0x80
   d5648:	fb10 1105 	smlabb	r1, r0, r5, r1
   d564c:	4812      	ldr	r0, [pc, #72]	; (d5698 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d564e:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d5650:	f002 0107 	and.w	r1, r2, #7
   d5654:	2201      	movs	r2, #1
   d5656:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d5658:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d565a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d565c:	4403      	add	r3, r0
   d565e:	d10c      	bne.n	d567a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d5660:	4283      	cmp	r3, r0
   d5662:	d0d2      	beq.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5664:	f810 4b01 	ldrb.w	r4, [r0], #1
   d5668:	4314      	orrs	r4, r2
   d566a:	f800 4c01 	strb.w	r4, [r0, #-1]
   d566e:	e7f7      	b.n	d5660 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d5670:	18cd      	adds	r5, r1, r3
   d5672:	8941      	ldrh	r1, [r0, #10]
   d5674:	1b49      	subs	r1, r1, r5
   d5676:	b209      	sxth	r1, r1
      break;
   d5678:	e769      	b.n	d554e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d567a:	43d2      	mvns	r2, r2
   d567c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d567e:	4283      	cmp	r3, r0
   d5680:	d0c3      	beq.n	d560a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5682:	f810 4b01 	ldrb.w	r4, [r0], #1
   d5686:	4014      	ands	r4, r2
   d5688:	f800 4c01 	strb.w	r4, [r0, #-1]
   d568c:	e7f7      	b.n	d567e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d568e:	bf00      	nop
   d5690:	2003ddc0 	.word	0x2003ddc0
   d5694:	2003ddb8 	.word	0x2003ddb8
   d5698:	2003ddc8 	.word	0x2003ddc8

000d569c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d569c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d569e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d56a0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d56a4:	2d02      	cmp	r5, #2
   d56a6:	d034      	beq.n	d5712 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d56a8:	2d03      	cmp	r5, #3
   d56aa:	f000 8099 	beq.w	d57e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d56ae:	2d01      	cmp	r5, #1
   d56b0:	d137      	bne.n	d5722 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d56b2:	18d5      	adds	r5, r2, r3
   d56b4:	8902      	ldrh	r2, [r0, #8]
   d56b6:	1b52      	subs	r2, r2, r5
   d56b8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d56ba:	2900      	cmp	r1, #0
   d56bc:	f2c0 808f 	blt.w	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d56c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d56c4:	428d      	cmp	r5, r1
   d56c6:	f340 808a 	ble.w	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d56ca:	2a00      	cmp	r2, #0
    w += x;
   d56cc:	bfbe      	ittt	lt
   d56ce:	189b      	addlt	r3, r3, r2
   d56d0:	b21b      	sxthlt	r3, r3
    x = 0;
   d56d2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d56d4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d56d8:	18d6      	adds	r6, r2, r3
   d56da:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d56dc:	bfc4      	itt	gt
   d56de:	1aab      	subgt	r3, r5, r2
   d56e0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d56e2:	2b00      	cmp	r3, #0
   d56e4:	dd7b      	ble.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d56e6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d56e8:	2580      	movs	r5, #128	; 0x80
   d56ea:	fb10 2205 	smlabb	r2, r0, r5, r2
   d56ee:	4844      	ldr	r0, [pc, #272]	; (d5800 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d56f0:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d56f2:	f001 0207 	and.w	r2, r1, #7
   d56f6:	2101      	movs	r1, #1
   d56f8:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d56fa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d56fc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d56fe:	4403      	add	r3, r0
   d5700:	d173      	bne.n	d57ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d5702:	4298      	cmp	r0, r3
   d5704:	d06b      	beq.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d5706:	f810 4b01 	ldrb.w	r4, [r0], #1
   d570a:	430c      	orrs	r4, r1
   d570c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d5710:	e7f7      	b.n	d5702 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d5712:	8905      	ldrh	r5, [r0, #8]
   d5714:	43c9      	mvns	r1, r1
   d5716:	4429      	add	r1, r5
      y -= (h-1);
   d5718:	18d5      	adds	r5, r2, r3
   d571a:	8942      	ldrh	r2, [r0, #10]
   d571c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d571e:	b209      	sxth	r1, r1
      y -= (h-1);
   d5720:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d5722:	2900      	cmp	r1, #0
   d5724:	db5b      	blt.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d5726:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d572a:	428d      	cmp	r5, r1
   d572c:	dd57      	ble.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d572e:	2a00      	cmp	r2, #0
    __h += __y;
   d5730:	bfbe      	ittt	lt
   d5732:	189b      	addlt	r3, r3, r2
   d5734:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5736:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d5738:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d573c:	18d5      	adds	r5, r2, r3
   d573e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d5740:	bfc4      	itt	gt
   d5742:	1a83      	subgt	r3, r0, r2
   d5744:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d5746:	2b00      	cmp	r3, #0
   d5748:	dd49      	ble.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d574a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d574e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d5800 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d5752:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d5756:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d575a:	b2db      	uxtb	r3, r3
  pBuf += x;
   d575c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d5760:	d01a      	beq.n	d5798 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d5762:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d5766:	4e27      	ldr	r6, [pc, #156]	; (d5804 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d5768:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d576a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d576c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d576e:	bf3f      	itttt	cc
   d5770:	eba5 0e03 	subcc.w	lr, r5, r3
   d5774:	26ff      	movcc	r6, #255	; 0xff
   d5776:	fa46 f60e 	asrcc.w	r6, r6, lr
   d577a:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d577c:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d5780:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d5782:	bf0c      	ite	eq
   d5784:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d5786:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d5788:	42ab      	cmp	r3, r5
   d578a:	f80c 6001 	strb.w	r6, [ip, r1]
   d578e:	d326      	bcc.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d5790:	3a08      	subs	r2, #8
   d5792:	4413      	add	r3, r2
   d5794:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d5796:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d5798:	2b07      	cmp	r3, #7
   d579a:	d917      	bls.n	d57cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d579c:	2c01      	cmp	r4, #1
   d579e:	bf0c      	ite	eq
   d57a0:	25ff      	moveq	r5, #255	; 0xff
   d57a2:	2500      	movne	r5, #0
   d57a4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d57a8:	461a      	mov	r2, r3
      h -= 8;
   d57aa:	3a08      	subs	r2, #8
   d57ac:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d57ae:	2a07      	cmp	r2, #7
      *pBuf = val;
   d57b0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d57b4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d57b8:	d8f7      	bhi.n	d57aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d57ba:	f1a3 0208 	sub.w	r2, r3, #8
   d57be:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d57c2:	3201      	adds	r2, #1
   d57c4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d57c8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d57cc:	b13b      	cbz	r3, d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d57ce:	4a0e      	ldr	r2, [pc, #56]	; (d5808 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d57d0:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d57d2:	7803      	ldrb	r3, [r0, #0]
   d57d4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d57d6:	bf0c      	ite	eq
   d57d8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d57da:	4393      	bicne	r3, r2
   d57dc:	7003      	strb	r3, [r0, #0]
}
   d57de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d57e0:	8945      	ldrh	r5, [r0, #10]
   d57e2:	43c9      	mvns	r1, r1
   d57e4:	4429      	add	r1, r5
   d57e6:	b209      	sxth	r1, r1
      break;
   d57e8:	e767      	b.n	d56ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d57ea:	43c9      	mvns	r1, r1
   d57ec:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d57ee:	4298      	cmp	r0, r3
   d57f0:	d0f5      	beq.n	d57de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d57f2:	f810 4b01 	ldrb.w	r4, [r0], #1
   d57f6:	400c      	ands	r4, r1
   d57f8:	f800 4c01 	strb.w	r4, [r0, #-1]
   d57fc:	e7f7      	b.n	d57ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d57fe:	bf00      	nop
   d5800:	2003ddc8 	.word	0x2003ddc8
   d5804:	2003ddc0 	.word	0x2003ddc0
   d5808:	2003ddb8 	.word	0x2003ddb8

000d580c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d580e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5810:	4606      	mov	r6, r0
   d5812:	4614      	mov	r4, r2
   d5814:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5816:	db2d      	blt.n	d5874 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d5818:	f000 fbe1 	bl	d5fde <_ZN12Adafruit_GFX5widthEv>
   d581c:	42a8      	cmp	r0, r5
   d581e:	dd29      	ble.n	d5874 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d5820:	2c00      	cmp	r4, #0
   d5822:	db27      	blt.n	d5874 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d5824:	4630      	mov	r0, r6
   d5826:	f000 fbdd 	bl	d5fe4 <_ZN12Adafruit_GFX6heightEv>
   d582a:	42a0      	cmp	r0, r4
   d582c:	dd22      	ble.n	d5874 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d582e:	4630      	mov	r0, r6
   d5830:	f000 fbc5 	bl	d5fbe <_ZN12Adafruit_GFX11getRotationEv>
   d5834:	2802      	cmp	r0, #2
   d5836:	d01e      	beq.n	d5876 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d5838:	2803      	cmp	r0, #3
   d583a:	d025      	beq.n	d5888 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d583c:	2801      	cmp	r0, #1
   d583e:	d104      	bne.n	d584a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d5840:	8932      	ldrh	r2, [r6, #8]
   d5842:	43e4      	mvns	r4, r4
   d5844:	4422      	add	r2, r4
    break;
   d5846:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d5848:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d584a:	2c00      	cmp	r4, #0
   d584c:	4621      	mov	r1, r4
   d584e:	bfb8      	it	lt
   d5850:	1de1      	addlt	r1, r4, #7
   d5852:	10c9      	asrs	r1, r1, #3
   d5854:	2380      	movs	r3, #128	; 0x80
   d5856:	fb11 5503 	smlabb	r5, r1, r3, r5
   d585a:	490e      	ldr	r1, [pc, #56]	; (d5894 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d585c:	2201      	movs	r2, #1
   d585e:	f004 0407 	and.w	r4, r4, #7
   d5862:	574b      	ldrsb	r3, [r1, r5]
   d5864:	fa02 f404 	lsl.w	r4, r2, r4
   d5868:	b264      	sxtb	r4, r4
   d586a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d586c:	bf0c      	ite	eq
   d586e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d5870:	43a3      	bicne	r3, r4
   d5872:	554b      	strb	r3, [r1, r5]
}
   d5874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d5876:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5878:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d587a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d587c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d587e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d5880:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d5882:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d5884:	b224      	sxth	r4, r4
    break;
   d5886:	e7e0      	b.n	d584a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d5888:	8973      	ldrh	r3, [r6, #10]
   d588a:	3b01      	subs	r3, #1
   d588c:	1b5b      	subs	r3, r3, r5
    break;
   d588e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d5890:	b21c      	sxth	r4, r3
    break;
   d5892:	e7da      	b.n	d584a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d5894:	2003ddc8 	.word	0x2003ddc8

000d5898 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5898:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d589a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d589c:	4604      	mov	r4, r0
   d589e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d58a0:	2180      	movs	r1, #128	; 0x80
   d58a2:	f000 fab3 	bl	d5e0c <_ZN12Adafruit_GFXC1Ess>
   d58a6:	4b06      	ldr	r3, [pc, #24]	; (d58c0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d58a8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d58aa:	23ff      	movs	r3, #255	; 0xff
   d58ac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d58b0:	7763      	strb	r3, [r4, #29]
   d58b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d58b6:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d58b8:	f884 5020 	strb.w	r5, [r4, #32]
}
   d58bc:	4620      	mov	r0, r4
   d58be:	bd38      	pop	{r3, r4, r5, pc}
   d58c0:	000dccf0 	.word	0x000dccf0

000d58c4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d58c4:	4802      	ldr	r0, [pc, #8]	; (d58d0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d58c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d58ca:	2100      	movs	r1, #0
   d58cc:	f005 b8f6 	b.w	daabc <memset>
   d58d0:	2003ddc8 	.word	0x2003ddc8

000d58d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d58d4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d58d6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d58da:	b143      	cbz	r3, d58ee <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d58dc:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   d58de:	f7ff f999 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d58e2:	9901      	ldr	r1, [sp, #4]
}
   d58e4:	b003      	add	sp, #12
   d58e6:	f85d eb04 	ldr.w	lr, [sp], #4
   d58ea:	f001 bbe3 	b.w	d70b4 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d58ee:	460b      	mov	r3, r1
   d58f0:	7f81      	ldrb	r1, [r0, #30]
   d58f2:	7f40      	ldrb	r0, [r0, #29]
   d58f4:	2201      	movs	r2, #1
}
   d58f6:	b003      	add	sp, #12
   d58f8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d58fc:	f002 bd5a 	b.w	d83b4 <shiftOut>

000d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5900:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5902:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5906:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5908:	4604      	mov	r4, r0
   d590a:	460d      	mov	r5, r1
  if (sid != -1)
   d590c:	d01d      	beq.n	d594a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d590e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d5912:	2101      	movs	r1, #1
   d5914:	b280      	uxth	r0, r0
   d5916:	f002 fd0a 	bl	d832e <digitalWrite>
    digitalWrite(dc, LOW);
   d591a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d591e:	2100      	movs	r1, #0
   d5920:	b280      	uxth	r0, r0
   d5922:	f002 fd04 	bl	d832e <digitalWrite>
    digitalWrite(cs, LOW);
   d5926:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d592a:	2100      	movs	r1, #0
   d592c:	b280      	uxth	r0, r0
   d592e:	f002 fcfe 	bl	d832e <digitalWrite>
    fastSPIwrite(c);
   d5932:	4629      	mov	r1, r5
   d5934:	4620      	mov	r0, r4
   d5936:	f7ff ffcd 	bl	d58d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d593a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d593e:	2101      	movs	r1, #1
}
   d5940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d5944:	b280      	uxth	r0, r0
   d5946:	f002 bcf2 	b.w	d832e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d594a:	f002 fd71 	bl	d8430 <_Z19__fetch_global_Wirev>
   d594e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5952:	f002 f8ef 	bl	d7b34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5956:	f002 fd6b 	bl	d8430 <_Z19__fetch_global_Wirev>
   d595a:	6803      	ldr	r3, [r0, #0]
   d595c:	2100      	movs	r1, #0
   d595e:	689b      	ldr	r3, [r3, #8]
   d5960:	4798      	blx	r3
    Wire.write(c);
   d5962:	f002 fd65 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5966:	6803      	ldr	r3, [r0, #0]
   d5968:	4629      	mov	r1, r5
   d596a:	689b      	ldr	r3, [r3, #8]
   d596c:	4798      	blx	r3
    Wire.endTransmission();
   d596e:	f002 fd5f 	bl	d8430 <_Z19__fetch_global_Wirev>
}
   d5972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d5976:	f002 b8e4 	b.w	d7b42 <_ZN7TwoWire15endTransmissionEv>

000d597a <_ZN16Adafruit_SSD130616startscrollrightEhh>:
void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop){
   d597a:	b570      	push	{r4, r5, r6, lr}
   d597c:	4604      	mov	r4, r0
   d597e:	460e      	mov	r6, r1
	ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
   d5980:	2126      	movs	r1, #38	; 0x26
void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop){
   d5982:	4615      	mov	r5, r2
	ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
   d5984:	f7ff ffbc 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d5988:	4620      	mov	r0, r4
   d598a:	2100      	movs	r1, #0
   d598c:	f7ff ffb8 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(start);
   d5990:	4631      	mov	r1, r6
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff ffb4 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d5998:	4620      	mov	r0, r4
   d599a:	2100      	movs	r1, #0
   d599c:	f7ff ffb0 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(stop);
   d59a0:	4629      	mov	r1, r5
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff ffac 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d59a8:	4620      	mov	r0, r4
   d59aa:	2100      	movs	r1, #0
   d59ac:	f7ff ffa8 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0XFF);
   d59b0:	4620      	mov	r0, r4
   d59b2:	21ff      	movs	r1, #255	; 0xff
   d59b4:	f7ff ffa4 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d59b8:	4620      	mov	r0, r4
   d59ba:	212f      	movs	r1, #47	; 0x2f
}
   d59bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d59c0:	f7ff bf9e 	b.w	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d59c4 <_ZN16Adafruit_SSD130610stopscrollEv>:
	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   d59c4:	212e      	movs	r1, #46	; 0x2e
   d59c6:	f7ff bf9b 	b.w	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	...

000d59cc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d59cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d59ce:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d59d0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d59d2:	f7ff ff95 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d59d6:	2100      	movs	r1, #0
   d59d8:	4620      	mov	r0, r4
   d59da:	f7ff ff91 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d59de:	217f      	movs	r1, #127	; 0x7f
   d59e0:	4620      	mov	r0, r4
   d59e2:	f7ff ff8d 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d59e6:	2122      	movs	r1, #34	; 0x22
   d59e8:	4620      	mov	r0, r4
   d59ea:	f7ff ff89 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d59ee:	2100      	movs	r1, #0
   d59f0:	4620      	mov	r0, r4
   d59f2:	f7ff ff85 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d59f6:	2107      	movs	r1, #7
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff ff81 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d59fe:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5a02:	4f29      	ldr	r7, [pc, #164]	; (d5aa8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d5a04:	3301      	adds	r3, #1
   d5a06:	d02a      	beq.n	d5a5e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d5a08:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a0c:	2101      	movs	r1, #1
   d5a0e:	b280      	uxth	r0, r0
   d5a10:	f002 fc8d 	bl	d832e <digitalWrite>
    digitalWrite(dc, HIGH);
   d5a14:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5a18:	2101      	movs	r1, #1
   d5a1a:	b280      	uxth	r0, r0
   d5a1c:	f002 fc87 	bl	d832e <digitalWrite>
    digitalWrite(cs, LOW);
   d5a20:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a24:	2100      	movs	r1, #0
   d5a26:	b280      	uxth	r0, r0
   d5a28:	f002 fc81 	bl	d832e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5a2c:	2001      	movs	r0, #1
   d5a2e:	f000 ff31 	bl	d6894 <HAL_Delay_Microseconds>
   d5a32:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d5a36:	3d01      	subs	r5, #1
   d5a38:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	b2ad      	uxth	r5, r5
   d5a40:	f7ff ff48 	bl	d58d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5a44:	2d00      	cmp	r5, #0
   d5a46:	d1f6      	bne.n	d5a36 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d5a48:	2001      	movs	r0, #1
   d5a4a:	f000 ff23 	bl	d6894 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d5a4e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a52:	2101      	movs	r1, #1
}
   d5a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d5a58:	b280      	uxth	r0, r0
   d5a5a:	f002 bc68 	b.w	d832e <digitalWrite>
   d5a5e:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d5a60:	f002 fce6 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5a64:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5a68:	f002 f864 	bl	d7b34 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d5a6c:	f002 fce0 	bl	d8430 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5a70:	6803      	ldr	r3, [r0, #0]
   d5a72:	f1a6 0510 	sub.w	r5, r6, #16
   d5a76:	689b      	ldr	r3, [r3, #8]
   d5a78:	2140      	movs	r1, #64	; 0x40
   d5a7a:	b2ad      	uxth	r5, r5
   d5a7c:	4798      	blx	r3
		Wire.write(buffer[i]);
   d5a7e:	f002 fcd7 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5a82:	6803      	ldr	r3, [r0, #0]
   d5a84:	5d79      	ldrb	r1, [r7, r5]
   d5a86:	689b      	ldr	r3, [r3, #8]
		i++;
   d5a88:	3501      	adds	r5, #1
   d5a8a:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d5a8c:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d5a8e:	42ae      	cmp	r6, r5
   d5a90:	d1f5      	bne.n	d5a7e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d5a92:	f002 fccd 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5a96:	f002 f854 	bl	d7b42 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5a9a:	f106 0310 	add.w	r3, r6, #16
   d5a9e:	b29e      	uxth	r6, r3
   d5aa0:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d5aa4:	d1dc      	bne.n	d5a60 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d5aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5aa8:	2003ddc8 	.word	0x2003ddc8

000d5aac <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5aac:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d5aae:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d5ab2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d5ab4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5ab6:	4604      	mov	r4, r0
   d5ab8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d5aba:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d5abc:	f000 80c9 	beq.w	d5c52 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d5ac0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5ac4:	2101      	movs	r1, #1
   d5ac6:	b280      	uxth	r0, r0
   d5ac8:	f002 fc20 	bl	d830c <pinMode>
    pinMode(cs, OUTPUT);
   d5acc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5ad0:	2101      	movs	r1, #1
   d5ad2:	b280      	uxth	r0, r0
   d5ad4:	f002 fc1a 	bl	d830c <pinMode>
    if (!hwSPI){
   d5ad8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5adc:	2b00      	cmp	r3, #0
   d5ade:	f000 80a6 	beq.w	d5c2e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d5ae2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5ae6:	2101      	movs	r1, #1
   d5ae8:	b280      	uxth	r0, r0
   d5aea:	f002 fc20 	bl	d832e <digitalWrite>
        instance().setBitOrder(order);
   d5aee:	f7ff f891 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5af2:	2101      	movs	r1, #1
   d5af4:	f001 f9d9 	bl	d6eaa <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d5af8:	f7ff f88c 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5afc:	2110      	movs	r1, #16
   d5afe:	f001 fab3 	bl	d7068 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d5b02:	f7ff f887 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b06:	2100      	movs	r1, #0
   d5b08:	f001 f9e2 	bl	d6ed0 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d5b0c:	f7ff f882 	bl	d4c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b10:	f001 f9ba 	bl	d6e88 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d5b14:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5b18:	2101      	movs	r1, #1
   d5b1a:	b280      	uxth	r0, r0
   d5b1c:	f002 fbf6 	bl	d830c <pinMode>
  digitalWrite(rst, HIGH);
   d5b20:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5b24:	2101      	movs	r1, #1
   d5b26:	b280      	uxth	r0, r0
   d5b28:	f002 fc01 	bl	d832e <digitalWrite>
  delay(1);
   d5b2c:	2001      	movs	r0, #1
   d5b2e:	f001 fd4f 	bl	d75d0 <delay>
  digitalWrite(rst, LOW);
   d5b32:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5b36:	2100      	movs	r1, #0
   d5b38:	b280      	uxth	r0, r0
   d5b3a:	f002 fbf8 	bl	d832e <digitalWrite>
  delay(10);
   d5b3e:	200a      	movs	r0, #10
   d5b40:	f001 fd46 	bl	d75d0 <delay>
  digitalWrite(rst, HIGH);
   d5b44:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5b48:	2101      	movs	r1, #1
   d5b4a:	b280      	uxth	r0, r0
   d5b4c:	f002 fbef 	bl	d832e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5b50:	4620      	mov	r0, r4
   d5b52:	21ae      	movs	r1, #174	; 0xae
   d5b54:	f7ff fed4 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5b58:	4620      	mov	r0, r4
   d5b5a:	21d5      	movs	r1, #213	; 0xd5
   d5b5c:	f7ff fed0 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5b60:	4620      	mov	r0, r4
   d5b62:	2180      	movs	r1, #128	; 0x80
   d5b64:	f7ff fecc 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5b68:	4620      	mov	r0, r4
   d5b6a:	21a8      	movs	r1, #168	; 0xa8
   d5b6c:	f7ff fec8 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d5b70:	4620      	mov	r0, r4
   d5b72:	213f      	movs	r1, #63	; 0x3f
   d5b74:	f7ff fec4 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5b78:	4620      	mov	r0, r4
   d5b7a:	21d3      	movs	r1, #211	; 0xd3
   d5b7c:	f7ff fec0 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d5b80:	4620      	mov	r0, r4
   d5b82:	2100      	movs	r1, #0
   d5b84:	f7ff febc 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5b88:	4620      	mov	r0, r4
   d5b8a:	2140      	movs	r1, #64	; 0x40
   d5b8c:	f7ff feb8 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5b90:	218d      	movs	r1, #141	; 0x8d
   d5b92:	4620      	mov	r0, r4
   d5b94:	f7ff feb4 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5b98:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d5b9a:	bf0c      	ite	eq
   d5b9c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d5b9e:	2114      	movne	r1, #20
   d5ba0:	4620      	mov	r0, r4
   d5ba2:	f7ff fead 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	2120      	movs	r1, #32
   d5baa:	f7ff fea9 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5bae:	4620      	mov	r0, r4
   d5bb0:	2100      	movs	r1, #0
   d5bb2:	f7ff fea5 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	21a1      	movs	r1, #161	; 0xa1
   d5bba:	f7ff fea1 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	21c8      	movs	r1, #200	; 0xc8
   d5bc2:	f7ff fe9d 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	21da      	movs	r1, #218	; 0xda
   d5bca:	f7ff fe99 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5bce:	4620      	mov	r0, r4
   d5bd0:	2112      	movs	r1, #18
   d5bd2:	f7ff fe95 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5bd6:	2181      	movs	r1, #129	; 0x81
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff fe91 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5bde:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5be0:	bf0c      	ite	eq
   d5be2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d5be4:	21cf      	movne	r1, #207	; 0xcf
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff fe8a 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5bec:	21d9      	movs	r1, #217	; 0xd9
   d5bee:	4620      	mov	r0, r4
   d5bf0:	f7ff fe86 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5bf4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5bf6:	bf0c      	ite	eq
   d5bf8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d5bfa:	21f1      	movne	r1, #241	; 0xf1
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	f7ff fe7f 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5c02:	4620      	mov	r0, r4
   d5c04:	21db      	movs	r1, #219	; 0xdb
   d5c06:	f7ff fe7b 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	2140      	movs	r1, #64	; 0x40
   d5c0e:	f7ff fe77 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5c12:	4620      	mov	r0, r4
   d5c14:	21a4      	movs	r1, #164	; 0xa4
   d5c16:	f7ff fe73 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5c1a:	4620      	mov	r0, r4
   d5c1c:	21a6      	movs	r1, #166	; 0xa6
   d5c1e:	f7ff fe6f 	bl	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5c22:	4620      	mov	r0, r4
   d5c24:	21af      	movs	r1, #175	; 0xaf
}
   d5c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5c2a:	f7ff be69 	b.w	d5900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d5c2e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5c32:	2101      	movs	r1, #1
   d5c34:	b280      	uxth	r0, r0
   d5c36:	f002 fb69 	bl	d830c <pinMode>
    	pinMode(sclk, OUTPUT);
   d5c3a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d5c3e:	2101      	movs	r1, #1
   d5c40:	b280      	uxth	r0, r0
   d5c42:	f002 fb63 	bl	d830c <pinMode>
    if (hwSPI){
   d5c46:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5c4a:	2b00      	cmp	r3, #0
   d5c4c:	f43f af62 	beq.w	d5b14 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d5c50:	e747      	b.n	d5ae2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d5c52:	f002 fbed 	bl	d8430 <_Z19__fetch_global_Wirev>
   d5c56:	f001 ff37 	bl	d7ac8 <_ZN7TwoWire5beginEv>
   d5c5a:	e75b      	b.n	d5b14 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d5c5c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c60:	b085      	sub	sp, #20
   d5c62:	461f      	mov	r7, r3
   d5c64:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5c68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5c6c:	eba8 0902 	sub.w	r9, r8, r2
   d5c70:	eba7 0a01 	sub.w	sl, r7, r1
   d5c74:	f1b9 0f00 	cmp.w	r9, #0
   d5c78:	bfb8      	it	lt
   d5c7a:	f1c9 0900 	rsblt	r9, r9, #0
   d5c7e:	f1ba 0f00 	cmp.w	sl, #0
   d5c82:	bfb8      	it	lt
   d5c84:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d5c88:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d5c8a:	4683      	mov	fp, r0
   d5c8c:	460c      	mov	r4, r1
   d5c8e:	4615      	mov	r5, r2
  if (steep) {
   d5c90:	dd04      	ble.n	d5c9c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d5c92:	463a      	mov	r2, r7
    swap(x0, y0);
   d5c94:	462c      	mov	r4, r5
    swap(x1, y1);
   d5c96:	4647      	mov	r7, r8
    swap(x0, y0);
   d5c98:	460d      	mov	r5, r1
    swap(x1, y1);
   d5c9a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d5c9c:	42bc      	cmp	r4, r7
   d5c9e:	dd05      	ble.n	d5cac <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d5ca0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5ca2:	4645      	mov	r5, r8
   d5ca4:	4690      	mov	r8, r2
  if (x0 > x1) {
   d5ca6:	4622      	mov	r2, r4
   d5ca8:	463c      	mov	r4, r7
   d5caa:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5cac:	1b3e      	subs	r6, r7, r4
   d5cae:	b2b2      	uxth	r2, r6
   d5cb0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d5cb2:	eba8 0205 	sub.w	r2, r8, r5
   d5cb6:	2a00      	cmp	r2, #0
   d5cb8:	bfb8      	it	lt
   d5cba:	4252      	neglt	r2, r2
   d5cbc:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d5cbe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5cc2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5cc6:	4545      	cmp	r5, r8
   d5cc8:	bfb4      	ite	lt
   d5cca:	2201      	movlt	r2, #1
   d5ccc:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d5cd0:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d5cd2:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d5cd4:	42bc      	cmp	r4, r7
   d5cd6:	dc1c      	bgt.n	d5d12 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d5cd8:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d5cdc:	9303      	str	r3, [sp, #12]
    if (steep) {
   d5cde:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d5ce0:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d5ce4:	bfc7      	ittee	gt
   d5ce6:	4629      	movgt	r1, r5
   d5ce8:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d5cea:	462a      	movle	r2, r5
   d5cec:	4621      	movle	r1, r4
   d5cee:	4658      	mov	r0, fp
   d5cf0:	47c0      	blx	r8
    }
    err -= dy;
   d5cf2:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d5cf4:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d5cf6:	1ab6      	subs	r6, r6, r2
   d5cf8:	b2b1      	uxth	r1, r6
   d5cfa:	b236      	sxth	r6, r6
    if (err < 0) {
   d5cfc:	2e00      	cmp	r6, #0
   d5cfe:	da05      	bge.n	d5d0c <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d5d00:	9a02      	ldr	r2, [sp, #8]
   d5d02:	4415      	add	r5, r2
      err += dx;
   d5d04:	9a00      	ldr	r2, [sp, #0]
   d5d06:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d5d08:	b22d      	sxth	r5, r5
      err += dx;
   d5d0a:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d5d0c:	3401      	adds	r4, #1
   d5d0e:	b224      	sxth	r4, r4
   d5d10:	e7e0      	b.n	d5cd4 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d5d12:	b005      	add	sp, #20
   d5d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5d18 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5d18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d1c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5d20:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d5d22:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5d26:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d5d2a:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5d2c:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d5d2e:	4616      	mov	r6, r2
   d5d30:	468a      	mov	sl, r1
   d5d32:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d5d34:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5d36:	6823      	ldr	r3, [r4, #0]
   d5d38:	f8cd 8000 	str.w	r8, [sp]
   d5d3c:	f109 32ff 	add.w	r2, r9, #4294967295
   d5d40:	4432      	add	r2, r6
   d5d42:	69df      	ldr	r7, [r3, #28]
   d5d44:	4651      	mov	r1, sl
   d5d46:	462b      	mov	r3, r5
   d5d48:	4620      	mov	r0, r4
   d5d4a:	b212      	sxth	r2, r2
   d5d4c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5d4e:	6823      	ldr	r3, [r4, #0]
   d5d50:	f8cd 8000 	str.w	r8, [sp]
   d5d54:	699f      	ldr	r7, [r3, #24]
   d5d56:	4632      	mov	r2, r6
   d5d58:	464b      	mov	r3, r9
   d5d5a:	4651      	mov	r1, sl
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5d60:	1e6b      	subs	r3, r5, #1
   d5d62:	eb03 010a 	add.w	r1, r3, sl
   d5d66:	6823      	ldr	r3, [r4, #0]
   d5d68:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5d6c:	699d      	ldr	r5, [r3, #24]
   d5d6e:	4632      	mov	r2, r6
   d5d70:	464b      	mov	r3, r9
   d5d72:	b209      	sxth	r1, r1
   d5d74:	4620      	mov	r0, r4
   d5d76:	46ac      	mov	ip, r5
}
   d5d78:	b002      	add	sp, #8
   d5d7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d5d7e:	4760      	bx	ip

000d5d80 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5d82:	3b01      	subs	r3, #1
   d5d84:	4413      	add	r3, r2
   d5d86:	6804      	ldr	r4, [r0, #0]
   d5d88:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5d8c:	9501      	str	r5, [sp, #4]
   d5d8e:	b21b      	sxth	r3, r3
   d5d90:	9300      	str	r3, [sp, #0]
   d5d92:	6964      	ldr	r4, [r4, #20]
   d5d94:	460b      	mov	r3, r1
   d5d96:	47a0      	blx	r4
}
   d5d98:	b003      	add	sp, #12
   d5d9a:	bd30      	pop	{r4, r5, pc}

000d5d9c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d5d9e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5da2:	6804      	ldr	r4, [r0, #0]
   d5da4:	e9cd 2500 	strd	r2, r5, [sp]
   d5da8:	3b01      	subs	r3, #1
   d5daa:	440b      	add	r3, r1
   d5dac:	6964      	ldr	r4, [r4, #20]
   d5dae:	b21b      	sxth	r3, r3
   d5db0:	47a0      	blx	r4
}
   d5db2:	b003      	add	sp, #12
   d5db4:	bd30      	pop	{r4, r5, pc}

000d5db6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5db6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5dba:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5dbe:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5dc2:	4605      	mov	r5, r0
   d5dc4:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5dc6:	460c      	mov	r4, r1
   d5dc8:	18ce      	adds	r6, r1, r3
   d5dca:	42b4      	cmp	r4, r6
   d5dcc:	da0b      	bge.n	d5de6 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d5dce:	682b      	ldr	r3, [r5, #0]
   d5dd0:	f8cd 8000 	str.w	r8, [sp]
   d5dd4:	699f      	ldr	r7, [r3, #24]
   d5dd6:	4621      	mov	r1, r4
   d5dd8:	464b      	mov	r3, r9
   d5dda:	4652      	mov	r2, sl
   d5ddc:	4628      	mov	r0, r5
   d5dde:	3401      	adds	r4, #1
   d5de0:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d5de2:	b224      	sxth	r4, r4
   d5de4:	e7f1      	b.n	d5dca <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d5de6:	b002      	add	sp, #8
   d5de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5dec <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5dec:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5dee:	6802      	ldr	r2, [r0, #0]
   d5df0:	9101      	str	r1, [sp, #4]
   d5df2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5df6:	9100      	str	r1, [sp, #0]
   d5df8:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d5dfa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5dfe:	2200      	movs	r2, #0
   d5e00:	4611      	mov	r1, r2
   d5e02:	47a0      	blx	r4
}
   d5e04:	b002      	add	sp, #8
   d5e06:	bd10      	pop	{r4, pc}

000d5e08 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d5e08:	4770      	bx	lr
	...

000d5e0c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5e0c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5e0e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d5e10:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d5e12:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d5e16:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d5e18:	4d05      	ldr	r5, [pc, #20]	; (d5e30 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d5e1a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d5e1c:	2201      	movs	r2, #1
   d5e1e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d5e20:	6005      	str	r5, [r0, #0]
   d5e22:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d5e24:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d5e26:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d5e28:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d5e2a:	7682      	strb	r2, [r0, #26]
}
   d5e2c:	bd30      	pop	{r4, r5, pc}
   d5e2e:	bf00      	nop
   d5e30:	000dd224 	.word	0x000dd224

000d5e34 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e38:	ed2d 8b02 	vpush	{d8}
   d5e3c:	b08b      	sub	sp, #44	; 0x2c
   d5e3e:	4606      	mov	r6, r0
   d5e40:	9103      	str	r1, [sp, #12]
   d5e42:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d5e46:	9105      	str	r1, [sp, #20]
   d5e48:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d5e4c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d5e4e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5e52:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5e54:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5e58:	4281      	cmp	r1, r0
   d5e5a:	dd51      	ble.n	d5f00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d5e5c:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d5e60:	4291      	cmp	r1, r2
   d5e62:	dd4d      	ble.n	d5f00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5e64:	2106      	movs	r1, #6
   d5e66:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d5e6a:	2c00      	cmp	r4, #0
   d5e6c:	dd48      	ble.n	d5f00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d5e6e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d5e72:	2c00      	cmp	r4, #0
   d5e74:	dd44      	ble.n	d5f00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d5e76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e7a:	9309      	str	r3, [sp, #36]	; 0x24
   d5e7c:	b293      	uxth	r3, r2
   d5e7e:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d5e80:	2400      	movs	r4, #0
   d5e82:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d5e84:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d5e86:	bf1c      	itt	ne
   d5e88:	4b2d      	ldrne	r3, [pc, #180]	; (d5f40 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d5e8a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5e8c:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d5e8e:	bf16      	itet	ne
   d5e90:	191b      	addne	r3, r3, r4
      line = 0x0;
   d5e92:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d5e94:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d5e96:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5e98:	9a03      	ldr	r2, [sp, #12]
   d5e9a:	b2ab      	uxth	r3, r5
   d5e9c:	9308      	str	r3, [sp, #32]
   d5e9e:	fb04 f305 	mul.w	r3, r4, r5
   d5ea2:	fa13 f382 	uxtah	r3, r3, r2
   d5ea6:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d5ea8:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5eac:	ee08 3a10 	vmov	s16, r3
   d5eb0:	f04f 0800 	mov.w	r8, #0
   d5eb4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d5eb8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d5ebc:	9b02      	ldr	r3, [sp, #8]
   d5ebe:	07db      	lsls	r3, r3, #31
   d5ec0:	d52f      	bpl.n	d5f22 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5ec2:	2d01      	cmp	r5, #1
   d5ec4:	6833      	ldr	r3, [r6, #0]
   d5ec6:	d120      	bne.n	d5f0a <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d5ec8:	9a04      	ldr	r2, [sp, #16]
   d5eca:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5ece:	9b05      	ldr	r3, [sp, #20]
   d5ed0:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d5ed2:	b212      	sxth	r2, r2
   d5ed4:	4651      	mov	r1, sl
   d5ed6:	4630      	mov	r0, r6
   d5ed8:	47d8      	blx	fp
      line >>= 1;
   d5eda:	9b02      	ldr	r3, [sp, #8]
   d5edc:	085b      	lsrs	r3, r3, #1
   d5ede:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d5ee0:	9b08      	ldr	r3, [sp, #32]
   d5ee2:	f108 0801 	add.w	r8, r8, #1
   d5ee6:	441f      	add	r7, r3
   d5ee8:	f1b8 0f08 	cmp.w	r8, #8
   d5eec:	b2bf      	uxth	r7, r7
   d5eee:	d1e5      	bne.n	d5ebc <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d5ef0:	9b07      	ldr	r3, [sp, #28]
   d5ef2:	3b01      	subs	r3, #1
   d5ef4:	3401      	adds	r4, #1
   d5ef6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5efa:	b264      	sxtb	r4, r4
   d5efc:	9307      	str	r3, [sp, #28]
   d5efe:	d1c1      	bne.n	d5e84 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d5f00:	b00b      	add	sp, #44	; 0x2c
   d5f02:	ecbd 8b02 	vpop	{d8}
   d5f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5f0a:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f0c:	e9cd 9200 	strd	r9, r2, [sp]
   d5f10:	ee18 1a10 	vmov	r1, s16
   d5f14:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5f18:	b23a      	sxth	r2, r7
   d5f1a:	464b      	mov	r3, r9
   d5f1c:	4630      	mov	r0, r6
   d5f1e:	47d8      	blx	fp
   d5f20:	e7db      	b.n	d5eda <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d5f22:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d5f26:	4293      	cmp	r3, r2
   d5f28:	d0d7      	beq.n	d5eda <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d5f2a:	2d01      	cmp	r5, #1
   d5f2c:	6833      	ldr	r3, [r6, #0]
   d5f2e:	d105      	bne.n	d5f3c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d5f30:	9a04      	ldr	r2, [sp, #16]
   d5f32:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5f36:	9b06      	ldr	r3, [sp, #24]
   d5f38:	4442      	add	r2, r8
   d5f3a:	e7ca      	b.n	d5ed2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f3c:	9a06      	ldr	r2, [sp, #24]
   d5f3e:	e7e5      	b.n	d5f0c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d5f40:	000dcd20 	.word	0x000dcd20

000d5f44 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5f44:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d5f46:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d5f48:	b085      	sub	sp, #20
   d5f4a:	4604      	mov	r4, r0
  if (c == '\n') {
   d5f4c:	d107      	bne.n	d5f5e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d5f4e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d5f50:	8a63      	ldrh	r3, [r4, #18]
   d5f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5f56:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5f58:	2300      	movs	r3, #0
   d5f5a:	8223      	strh	r3, [r4, #16]
   d5f5c:	e021      	b.n	d5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d5f5e:	290d      	cmp	r1, #13
   d5f60:	d01f      	beq.n	d5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5f62:	7e03      	ldrb	r3, [r0, #24]
   d5f64:	9302      	str	r3, [sp, #8]
   d5f66:	8ac3      	ldrh	r3, [r0, #22]
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	8a83      	ldrh	r3, [r0, #20]
   d5f6c:	9300      	str	r3, [sp, #0]
   d5f6e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5f72:	460b      	mov	r3, r1
   d5f74:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5f78:	f7ff ff5c 	bl	d5e34 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5f7c:	7e21      	ldrb	r1, [r4, #24]
   d5f7e:	8a23      	ldrh	r3, [r4, #16]
   d5f80:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5f84:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5f88:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d5f8a:	b21b      	sxth	r3, r3
   d5f8c:	460a      	mov	r2, r1
   d5f8e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5f90:	b138      	cbz	r0, d5fa2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   d5f92:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5f96:	f06f 0505 	mvn.w	r5, #5
   d5f9a:	fb05 0101 	mla	r1, r5, r1, r0
   d5f9e:	428b      	cmp	r3, r1
   d5fa0:	dcd6      	bgt.n	d5f50 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d5fa2:	2001      	movs	r0, #1
   d5fa4:	b005      	add	sp, #20
   d5fa6:	bd30      	pop	{r4, r5, pc}

000d5fa8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d5fa8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d5faa:	8242      	strh	r2, [r0, #18]
}
   d5fac:	4770      	bx	lr

000d5fae <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d5fae:	2901      	cmp	r1, #1
   d5fb0:	bf38      	it	cc
   d5fb2:	2101      	movcc	r1, #1
   d5fb4:	7601      	strb	r1, [r0, #24]
}
   d5fb6:	4770      	bx	lr

000d5fb8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d5fb8:	82c1      	strh	r1, [r0, #22]
   d5fba:	8281      	strh	r1, [r0, #20]
}
   d5fbc:	4770      	bx	lr

000d5fbe <_ZN12Adafruit_GFX11getRotationEv>:
}
   d5fbe:	7e40      	ldrb	r0, [r0, #25]
   d5fc0:	4770      	bx	lr

000d5fc2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d5fc2:	f001 0303 	and.w	r3, r1, #3
   d5fc6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5fca:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   d5fcc:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   d5fce:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5fd2:	bf59      	ittee	pl
   d5fd4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d5fd6:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   d5fd8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d5fda:	81c3      	strhmi	r3, [r0, #14]
}
   d5fdc:	4770      	bx	lr

000d5fde <_ZN12Adafruit_GFX5widthEv>:
}
   d5fde:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5fe2:	4770      	bx	lr

000d5fe4 <_ZN12Adafruit_GFX6heightEv>:
}
   d5fe4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5fe8:	4770      	bx	lr

000d5fea <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5fea:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5fec:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5ff0:	6803      	ldr	r3, [r0, #0]
   d5ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ff4:	4798      	blx	r3
}
   d5ff6:	3800      	subs	r0, #0
   d5ff8:	bf18      	it	ne
   d5ffa:	2001      	movne	r0, #1
   d5ffc:	bd08      	pop	{r3, pc}

000d5ffe <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6000:	4606      	mov	r6, r0
   d6002:	460f      	mov	r7, r1
   d6004:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d6006:	b1c4      	cbz	r4, d603a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d6008:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d600c:	6803      	ldr	r3, [r0, #0]
   d600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6010:	4798      	blx	r3
   d6012:	b908      	cbnz	r0, d6018 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d6014:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d6016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d6018:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d601c:	2cfa      	cmp	r4, #250	; 0xfa
   d601e:	6803      	ldr	r3, [r0, #0]
   d6020:	4625      	mov	r5, r4
   d6022:	bfa8      	it	ge
   d6024:	25fa      	movge	r5, #250	; 0xfa
   d6026:	68db      	ldr	r3, [r3, #12]
   d6028:	462a      	mov	r2, r5
   d602a:	4639      	mov	r1, r7
   d602c:	4798      	blx	r3
   d602e:	b283      	uxth	r3, r0
      len -= ret;
   d6030:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d6032:	429d      	cmp	r5, r3
      len -= ret;
   d6034:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d6036:	d0e6      	beq.n	d6006 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d6038:	e7ec      	b.n	d6014 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d603a:	2001      	movs	r0, #1
   d603c:	e7eb      	b.n	d6016 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d603e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d603e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6042:	4606      	mov	r6, r0
   d6044:	4688      	mov	r8, r1
   d6046:	4691      	mov	r9, r2
   d6048:	461f      	mov	r7, r3
   d604a:	461d      	mov	r5, r3
  uint16_t len = 0;
   d604c:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d604e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d6052:	6803      	ldr	r3, [r0, #0]
   d6054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6056:	4798      	blx	r3
   d6058:	b1d0      	cbz	r0, d6090 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d605a:	2d00      	cmp	r5, #0
   d605c:	db18      	blt.n	d6090 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d605e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d6062:	6803      	ldr	r3, [r0, #0]
   d6064:	691b      	ldr	r3, [r3, #16]
   d6066:	4798      	blx	r3
   d6068:	b160      	cbz	r0, d6084 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d606a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d606e:	6803      	ldr	r3, [r0, #0]
   d6070:	695b      	ldr	r3, [r3, #20]
   d6072:	4798      	blx	r3
   d6074:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d6078:	3401      	adds	r4, #1
   d607a:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d607c:	454c      	cmp	r4, r9
   d607e:	d007      	beq.n	d6090 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d6080:	463d      	mov	r5, r7
   d6082:	e7ec      	b.n	d605e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d6084:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d6086:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d6088:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d608a:	f001 faa1 	bl	d75d0 <delay>
  while (client->connected() && (timeout >= 0)) {
   d608e:	e7de      	b.n	d604e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d6090:	4620      	mov	r0, r4
   d6092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6096 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d6096:	b570      	push	{r4, r5, r6, lr}
   d6098:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d609a:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d609e:	2296      	movs	r2, #150	; 0x96
   d60a0:	2100      	movs	r1, #0
   d60a2:	4628      	mov	r0, r5
   d60a4:	f004 fd0a 	bl	daabc <memset>
  strcpy((char *)buffer, servername);
   d60a8:	6861      	ldr	r1, [r4, #4]
   d60aa:	4628      	mov	r0, r5
   d60ac:	f004 fd3c 	bl	dab28 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d60b0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d60b4:	8922      	ldrh	r2, [r4, #8]
   d60b6:	6803      	ldr	r3, [r0, #0]
   d60b8:	4629      	mov	r1, r5
   d60ba:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d60bc:	2300      	movs	r3, #0
   d60be:	47b0      	blx	r6
}
   d60c0:	3800      	subs	r0, #0
   d60c2:	bf18      	it	ne
   d60c4:	2001      	movne	r0, #1
   d60c6:	bd70      	pop	{r4, r5, r6, pc}

000d60c8 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d60c8:	b510      	push	{r4, lr}
   d60ca:	4604      	mov	r4, r0
  if (client->connected()) {
   d60cc:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d60d0:	6803      	ldr	r3, [r0, #0]
   d60d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60d4:	4798      	blx	r3
   d60d6:	b120      	cbz	r0, d60e2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d60d8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d60dc:	6803      	ldr	r3, [r0, #0]
   d60de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60e0:	4798      	blx	r3
}
   d60e2:	2001      	movs	r0, #1
   d60e4:	bd10      	pop	{r4, pc}

000d60e6 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   d60e6:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   d60e8:	6803      	ldr	r3, [r0, #0]
   d60ea:	689b      	ldr	r3, [r3, #8]
{
   d60ec:	4604      	mov	r4, r0
    if (!connected())
   d60ee:	4798      	blx	r3
   d60f0:	b9c8      	cbnz	r0, d6126 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d60f2:	4620      	mov	r0, r4
   d60f4:	f000 fa95 	bl	d6622 <_ZN13Adafruit_MQTT7connectEv>
   d60f8:	2504      	movs	r5, #4
   d60fa:	b170      	cbz	r0, d611a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d60fc:	3d01      	subs	r5, #1
   d60fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6102:	d00a      	beq.n	d611a <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   d6104:	4620      	mov	r0, r4
   d6106:	f000 f8b7 	bl	d6278 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d610a:	f241 3088 	movw	r0, #5000	; 0x1388
   d610e:	f001 fa5f 	bl	d75d0 <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d6112:	4620      	mov	r0, r4
   d6114:	f000 fa85 	bl	d6622 <_ZN13Adafruit_MQTT7connectEv>
   d6118:	e7ef      	b.n	d60fa <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   d611a:	6823      	ldr	r3, [r4, #0]
   d611c:	4620      	mov	r0, r4
   d611e:	689b      	ldr	r3, [r3, #8]
}
   d6120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   d6124:	4718      	bx	r3
}
   d6126:	bd70      	pop	{r4, r5, r6, pc}

000d6128 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d6128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d612a:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d612c:	4608      	mov	r0, r1
   d612e:	9101      	str	r1, [sp, #4]
   d6130:	f004 fd02 	bl	dab38 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d6134:	1203      	asrs	r3, r0, #8
   d6136:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d6138:	7060      	strb	r0, [r4, #1]
   d613a:	b285      	uxth	r5, r0
   d613c:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d613e:	9901      	ldr	r1, [sp, #4]
   d6140:	462a      	mov	r2, r5
   d6142:	4620      	mov	r0, r4
   d6144:	f004 fd34 	bl	dabb0 <strncpy>
  return p+len;
}
   d6148:	1960      	adds	r0, r4, r5
   d614a:	b003      	add	sp, #12
   d614c:	bd30      	pop	{r4, r5, pc}
	...

000d6150 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d6150:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d6152:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d6154:	4a0a      	ldr	r2, [pc, #40]	; (d6180 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d6156:	4d0b      	ldr	r5, [pc, #44]	; (d6184 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d6158:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d615c:	9b03      	ldr	r3, [sp, #12]
   d615e:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d6160:	2300      	movs	r3, #0
  servername = server;
   d6162:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d6166:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d616a:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d616e:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d6172:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d6176:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d6178:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d617c:	bd30      	pop	{r4, r5, pc}
   d617e:	bf00      	nop
   d6180:	000dc981 	.word	0x000dc981
   d6184:	000dd468 	.word	0x000dd468

000d6188 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d6188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d618c:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d618e:	6802      	ldr	r2, [r0, #0]
   d6190:	b21b      	sxth	r3, r3
   d6192:	6997      	ldr	r7, [r2, #24]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d6198:	4605      	mov	r5, r0
   d619a:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   d619c:	47b8      	blx	r7
  if (rlen != 1) return 0;
   d619e:	b2c7      	uxtb	r7, r0
   d61a0:	2f01      	cmp	r7, #1
   d61a2:	9b01      	ldr	r3, [sp, #4]
   d61a4:	d003      	beq.n	d61ae <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   d61a6:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   d61a8:	b003      	add	sp, #12
   d61aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   d61ae:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   d61b2:	f104 0a04 	add.w	sl, r4, #4
  uint32_t value = 0;
   d61b6:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   d61ba:	682a      	ldr	r2, [r5, #0]
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	f8d2 b018 	ldr.w	fp, [r2, #24]
   d61c2:	4641      	mov	r1, r8
   d61c4:	2201      	movs	r2, #1
   d61c6:	4628      	mov	r0, r5
   d61c8:	47d8      	blx	fp
    if (rlen != 1) return 0;
   d61ca:	b2c0      	uxtb	r0, r0
   d61cc:	2801      	cmp	r0, #1
   d61ce:	d1ea      	bne.n	d61a6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    if (multiplier > (128UL*128UL*128UL)) {
   d61d0:	45c2      	cmp	sl, r8
    multiplier *= 128;
   d61d2:	ea4f 10c7 	mov.w	r0, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d61d6:	d0e6      	beq.n	d61a6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d61d8:	f818 2b01 	ldrb.w	r2, [r8], #1
  } while (encodedByte & 0x80);
   d61dc:	9b01      	ldr	r3, [sp, #4]
    uint32_t intermediate = encodedByte & 0x7F;
   d61de:	f002 017f 	and.w	r1, r2, #127	; 0x7f
  } while (encodedByte & 0x80);
   d61e2:	f012 0f80 	tst.w	r2, #128	; 0x80
    value += intermediate;
   d61e6:	fb01 9907 	mla	r9, r1, r7, r9
  } while (encodedByte & 0x80);
   d61ea:	d116      	bne.n	d621a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x92>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d61ec:	eba8 0404 	sub.w	r4, r8, r4
   d61f0:	b2a7      	uxth	r7, r4
   d61f2:	1b34      	subs	r4, r6, r4
   d61f4:	682a      	ldr	r2, [r5, #0]
   d61f6:	3c01      	subs	r4, #1
   d61f8:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d61fa:	f8d2 a018 	ldr.w	sl, [r2, #24]
   d61fe:	bf3d      	ittte	cc
   d6200:	f106 32ff 	addcc.w	r2, r6, #4294967295
   d6204:	1bd2      	subcc	r2, r2, r7
   d6206:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   d6208:	fa1f f289 	uxthcs.w	r2, r9
   d620c:	4641      	mov	r1, r8
   d620e:	4628      	mov	r0, r5
   d6210:	47d0      	blx	sl
   d6212:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   d6214:	4438      	add	r0, r7
   d6216:	b280      	uxth	r0, r0
   d6218:	e7c6      	b.n	d61a8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
   d621a:	4607      	mov	r7, r0
   d621c:	e7cd      	b.n	d61ba <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
	...

000d6220 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d6220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   d6224:	f8df 8030 	ldr.w	r8, [pc, #48]	; d6258 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d6228:	4605      	mov	r5, r0
   d622a:	460c      	mov	r4, r1
   d622c:	4616      	mov	r6, r2
   d622e:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d6230:	463b      	mov	r3, r7
   d6232:	2296      	movs	r2, #150	; 0x96
   d6234:	4621      	mov	r1, r4
   d6236:	4628      	mov	r0, r5
   d6238:	f7ff ffa6 	bl	d6188 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d623c:	b148      	cbz	r0, d6252 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   d623e:	7823      	ldrb	r3, [r4, #0]
   d6240:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d6244:	d005      	beq.n	d6252 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   d6246:	f001 fb59 	bl	d78fc <_Z16_fetch_usbserialv>
   d624a:	4641      	mov	r1, r8
   d624c:	f001 f8bf 	bl	d73ce <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d6250:	e7ee      	b.n	d6230 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   d6252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6256:	bf00      	nop
   d6258:	000dd278 	.word	0x000dd278

000d625c <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   d625c:	3102      	adds	r1, #2
   d625e:	b2c9      	uxtb	r1, r1
   d6260:	2909      	cmp	r1, #9
   d6262:	bf9a      	itte	ls
   d6264:	4b02      	ldrls	r3, [pc, #8]	; (d6270 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d6266:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   d626a:	4802      	ldrhi	r0, [pc, #8]	; (d6274 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d626c:	4770      	bx	lr
   d626e:	bf00      	nop
   d6270:	000dd484 	.word	0x000dd484
   d6274:	000dd289 	.word	0x000dd289

000d6278 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d6278:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d627a:	23e0      	movs	r3, #224	; 0xe0
   d627c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   d6280:	4601      	mov	r1, r0
  packet[1] = 0;
   d6282:	2300      	movs	r3, #0
   d6284:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   d6288:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   d628c:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   d628e:	695b      	ldr	r3, [r3, #20]
   d6290:	2202      	movs	r2, #2
   d6292:	4798      	blx	r3
  return disconnectServer();
   d6294:	6823      	ldr	r3, [r4, #0]
   d6296:	4620      	mov	r0, r4
   d6298:	691b      	ldr	r3, [r3, #16]
}
   d629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   d629e:	4718      	bx	r3

000d62a0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d62a0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d62a4:	b530      	push	{r4, r5, lr}
   d62a6:	4613      	mov	r3, r2
   d62a8:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   d62ac:	f853 5b04 	ldr.w	r5, [r3], #4
   d62b0:	428d      	cmp	r5, r1
   d62b2:	d009      	beq.n	d62c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d62b4:	42a3      	cmp	r3, r4
   d62b6:	d1f9      	bne.n	d62ac <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d62b8:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   d62ba:	f852 4b04 	ldr.w	r4, [r2], #4
   d62be:	b92c      	cbnz	r4, d62cc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   d62c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d62c4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   d62c8:	2001      	movs	r0, #1
   d62ca:	e003      	b.n	d62d4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d62cc:	3301      	adds	r3, #1
   d62ce:	2b05      	cmp	r3, #5
   d62d0:	d1f3      	bne.n	d62ba <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   d62d2:	2000      	movs	r0, #0
}
   d62d4:	bd30      	pop	{r4, r5, pc}

000d62d6 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d62d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d62da:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d62de:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d62e0:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d62e2:	2296      	movs	r2, #150	; 0x96
   d62e4:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d62e6:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d62e8:	f7ff ff4e 	bl	d6188 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d62ec:	4606      	mov	r6, r0
   d62ee:	b1f0      	cbz	r0, d632e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   d62f0:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   d62f4:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d62f6:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   d62fa:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d62fe:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   d6302:	f85a 4b04 	ldr.w	r4, [sl], #4
   d6306:	b16c      	cbz	r4, d6324 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   d6308:	6821      	ldr	r1, [r4, #0]
   d630a:	9101      	str	r1, [sp, #4]
   d630c:	4608      	mov	r0, r1
   d630e:	f004 fc13 	bl	dab38 <strlen>
   d6312:	42b8      	cmp	r0, r7
   d6314:	d106      	bne.n	d6324 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d6316:	9901      	ldr	r1, [sp, #4]
   d6318:	463a      	mov	r2, r7
   d631a:	4658      	mov	r0, fp
   d631c:	f004 fc14 	bl	dab48 <strncasecmp>
   d6320:	2800      	cmp	r0, #0
   d6322:	d045      	beq.n	d63b0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d6324:	f108 0801 	add.w	r8, r8, #1
   d6328:	f1b8 0f05 	cmp.w	r8, #5
   d632c:	d1e9      	bne.n	d6302 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   d632e:	2000      	movs	r0, #0
   d6330:	e03b      	b.n	d63aa <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd4>
    packetid = buffer[topiclen+4];
   d6332:	19ea      	adds	r2, r5, r7
   d6334:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   d6338:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   d633c:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d6340:	2214      	movs	r2, #20
   d6342:	2100      	movs	r1, #0
   d6344:	1d60      	adds	r0, r4, #5
   d6346:	f004 fbb9 	bl	daabc <memset>
  datalen = len - topiclen - packet_id_len - 4;
   d634a:	9b00      	ldr	r3, [sp, #0]
   d634c:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   d6350:	34fc      	adds	r4, #252	; 0xfc
   d6352:	4426      	add	r6, r4
   d6354:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   d6358:	eba6 060b 	sub.w	r6, r6, fp
   d635c:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d635e:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d6360:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   d6364:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d6368:	bf28      	it	cs
   d636a:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d636c:	4459      	add	r1, fp
   d636e:	4632      	mov	r2, r6
   d6370:	4449      	add	r1, r9
   d6372:	3005      	adds	r0, #5
   d6374:	f004 fb88 	bl	daa88 <memmove>
  subscriptions[i]->datalen = datalen;
   d6378:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   d637c:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d637e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   d6382:	f003 0306 	and.w	r3, r3, #6
   d6386:	2b02      	cmp	r3, #2
   d6388:	d10d      	bne.n	d63a6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd0>
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d638a:	f44f 7310 	mov.w	r3, #576	; 0x240
   d638e:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (!sendPacket(ackpacket, len))
   d6392:	682b      	ldr	r3, [r5, #0]
  packet[2] = packetid >> 8;
   d6394:	fa9a fa9a 	rev16.w	sl, sl
    if (!sendPacket(ackpacket, len))
   d6398:	695b      	ldr	r3, [r3, #20]
  packet[2] = packetid >> 8;
   d639a:	f8ad a00e 	strh.w	sl, [sp, #14]
    if (!sendPacket(ackpacket, len))
   d639e:	2204      	movs	r2, #4
   d63a0:	a903      	add	r1, sp, #12
   d63a2:	4628      	mov	r0, r5
   d63a4:	4798      	blx	r3
  return subscriptions[i];
   d63a6:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   d63aa:	b005      	add	sp, #20
   d63ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   d63b0:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   d63b4:	f00b 0b06 	and.w	fp, fp, #6
   d63b8:	f1bb 0f02 	cmp.w	fp, #2
   d63bc:	d0b9      	beq.n	d6332 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   d63be:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   d63c0:	4683      	mov	fp, r0
   d63c2:	e7bd      	b.n	d6340 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000d63c4 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   d63c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d63c8:	4604      	mov	r4, r0
   d63ca:	460d      	mov	r5, r1
   d63cc:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   d63d0:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d63d4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   d63d8:	b1e5      	cbz	r5, d6414 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   d63da:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d63dc:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d63e0:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   d63e4:	695b      	ldr	r3, [r3, #20]
   d63e6:	2202      	movs	r2, #2
   d63e8:	4639      	mov	r1, r7
   d63ea:	4620      	mov	r0, r4
   d63ec:	4798      	blx	r3
   d63ee:	4606      	mov	r6, r0
   d63f0:	b168      	cbz	r0, d640e <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d63f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d63f6:	220d      	movs	r2, #13
   d63f8:	4639      	mov	r1, r7
   d63fa:	4620      	mov	r0, r4
   d63fc:	f7ff ff10 	bl	d6220 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d6400:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6404:	2bd0      	cmp	r3, #208	; 0xd0
   d6406:	d102      	bne.n	d640e <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   d6408:	4630      	mov	r0, r6
   d640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d640e:	3d01      	subs	r5, #1
   d6410:	b2ed      	uxtb	r5, r5
   d6412:	e7e1      	b.n	d63d8 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   d6414:	462e      	mov	r6, r5
   d6416:	e7f7      	b.n	d6408 <_ZN13Adafruit_MQTT4pingEh+0x44>

000d6418 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d6418:	b538      	push	{r3, r4, r5, lr}
   d641a:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d641c:	4608      	mov	r0, r1
   d641e:	2310      	movs	r3, #16
   d6420:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d6424:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   d6426:	4929      	ldr	r1, [pc, #164]	; (d64cc <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d6428:	f7ff fe7e 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   d642c:	2304      	movs	r3, #4
   d642e:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   d6430:	2302      	movs	r3, #2
   d6432:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d6434:	69ab      	ldr	r3, [r5, #24]
   d6436:	b18b      	cbz	r3, d645c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   d6438:	781b      	ldrb	r3, [r3, #0]
   d643a:	b17b      	cbz	r3, d645c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   d643c:	2306      	movs	r3, #6
   d643e:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   d6440:	f895 3020 	ldrb.w	r3, [r5, #32]
   d6444:	2b01      	cmp	r3, #1
   d6446:	d139      	bne.n	d64bc <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d6448:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   d644a:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   d644c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d6450:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d6452:	bf02      	ittt	eq
   d6454:	7843      	ldrbeq	r3, [r0, #1]
   d6456:	f043 0320 	orreq.w	r3, r3, #32
   d645a:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   d645c:	692b      	ldr	r3, [r5, #16]
   d645e:	781b      	ldrb	r3, [r3, #0]
   d6460:	b11b      	cbz	r3, d646a <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d6462:	7843      	ldrb	r3, [r0, #1]
   d6464:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6468:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d646a:	696b      	ldr	r3, [r5, #20]
   d646c:	781b      	ldrb	r3, [r3, #0]
   d646e:	b11b      	cbz	r3, d6478 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d6470:	7843      	ldrb	r3, [r0, #1]
   d6472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d6476:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d6478:	2301      	movs	r3, #1
   d647a:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d647c:	232c      	movs	r3, #44	; 0x2c
   d647e:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   d6480:	68e9      	ldr	r1, [r5, #12]
   d6482:	780b      	ldrb	r3, [r1, #0]
   d6484:	b1f3      	cbz	r3, d64c4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   d6486:	3004      	adds	r0, #4
   d6488:	f7ff fe4e 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d648c:	69a9      	ldr	r1, [r5, #24]
   d648e:	b131      	cbz	r1, d649e <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   d6490:	780b      	ldrb	r3, [r1, #0]
   d6492:	b123      	cbz	r3, d649e <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   d6494:	f7ff fe48 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   d6498:	69e9      	ldr	r1, [r5, #28]
   d649a:	f7ff fe45 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   d649e:	6929      	ldr	r1, [r5, #16]
   d64a0:	780b      	ldrb	r3, [r1, #0]
   d64a2:	b10b      	cbz	r3, d64a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   d64a4:	f7ff fe40 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   d64a8:	6969      	ldr	r1, [r5, #20]
   d64aa:	780b      	ldrb	r3, [r1, #0]
   d64ac:	b10b      	cbz	r3, d64b2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   d64ae:	f7ff fe3b 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   d64b2:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d64b4:	b2c0      	uxtb	r0, r0
   d64b6:	1e83      	subs	r3, r0, #2
   d64b8:	7063      	strb	r3, [r4, #1]
}
   d64ba:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   d64bc:	2b02      	cmp	r3, #2
   d64be:	d1c5      	bne.n	d644c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d64c0:	231e      	movs	r3, #30
   d64c2:	e7c2      	b.n	d644a <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   d64c4:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   d64c6:	7143      	strb	r3, [r0, #5]
      p++;
   d64c8:	3006      	adds	r0, #6
   d64ca:	e7df      	b.n	d648c <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   d64cc:	000dd297 	.word	0x000dd297

000d64d0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d64d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d64d4:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   d64d6:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d64d8:	460e      	mov	r6, r1
   d64da:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   d64dc:	9201      	str	r2, [sp, #4]
   d64de:	f004 fb2b 	bl	dab38 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d64e2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d64e6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   d64ea:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   d64ec:	b284      	uxth	r4, r0
  if(qos > 0) { 
   d64ee:	f1b9 0f00 	cmp.w	r9, #0
   d64f2:	d135      	bne.n	d6560 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   d64f4:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d64f6:	ea4f 0349 	mov.w	r3, r9, lsl #1
   d64fa:	4630      	mov	r0, r6
    len += 2; // qos packet id
   d64fc:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d64fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   d6502:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d6504:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   d6508:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   d650a:	4622      	mov	r2, r4
   d650c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   d6510:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   d6512:	bf88      	it	hi
   d6514:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   d6518:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   d651a:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   d651e:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   d6522:	d8f2      	bhi.n	d650a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   d6524:	f7ff fe00 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
   d6528:	4603      	mov	r3, r0
  if(qos > 0) {
   d652a:	f1b9 0f00 	cmp.w	r9, #0
   d652e:	d00c      	beq.n	d654a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d6530:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d6534:	0a12      	lsrs	r2, r2, #8
   d6536:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d6538:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d653c:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   d653e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d6542:	3201      	adds	r2, #1
    p+=2;
   d6544:	3302      	adds	r3, #2
    packet_id_counter++;
   d6546:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   d654a:	463a      	mov	r2, r7
   d654c:	4641      	mov	r1, r8
   d654e:	4618      	mov	r0, r3
   d6550:	f004 fa9a 	bl	daa88 <memmove>
  p+= bLen;
   d6554:	4438      	add	r0, r7
  len = p - packet;
   d6556:	1b80      	subs	r0, r0, r6
}
   d6558:	b280      	uxth	r0, r0
   d655a:	b003      	add	sp, #12
   d655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   d6560:	3404      	adds	r4, #4
   d6562:	e7c8      	b.n	d64f6 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000d6564 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d6564:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6566:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d656a:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d656e:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d6570:	e9cd 3600 	strd	r3, r6, [sp]
   d6574:	4613      	mov	r3, r2
   d6576:	460a      	mov	r2, r1
   d6578:	4629      	mov	r1, r5
   d657a:	f7ff ffa9 	bl	d64d0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d657e:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d6580:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   d6582:	695b      	ldr	r3, [r3, #20]
   d6584:	4629      	mov	r1, r5
   d6586:	4620      	mov	r0, r4
   d6588:	4798      	blx	r3
   d658a:	b910      	cbnz	r0, d6592 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   d658c:	2000      	movs	r0, #0
}
   d658e:	b002      	add	sp, #8
   d6590:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   d6592:	2e00      	cmp	r6, #0
   d6594:	d0fb      	beq.n	d658e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d6596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d659a:	2296      	movs	r2, #150	; 0x96
   d659c:	4629      	mov	r1, r5
   d659e:	4620      	mov	r0, r4
   d65a0:	f7ff fdf2 	bl	d6188 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   d65a4:	2804      	cmp	r0, #4
   d65a6:	d1f1      	bne.n	d658c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d65a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d65ac:	111b      	asrs	r3, r3, #4
   d65ae:	2b04      	cmp	r3, #4
   d65b0:	d1ec      	bne.n	d658c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    uint16_t packnum = buffer[2];
   d65b2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   d65b4:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d65b8:	ba5b      	rev16	r3, r3
    packnum++;
   d65ba:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   d65bc:	b29b      	uxth	r3, r3
   d65be:	1ac3      	subs	r3, r0, r3
   d65c0:	4258      	negs	r0, r3
   d65c2:	4158      	adcs	r0, r3
   d65c4:	e7e3      	b.n	d658e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000d65c6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d65c6:	b530      	push	{r4, r5, lr}
   d65c8:	b085      	sub	sp, #20
   d65ca:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d65cc:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d65ce:	461d      	mov	r5, r3
   d65d0:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d65d2:	9202      	str	r2, [sp, #8]
   d65d4:	f004 fab0 	bl	dab38 <strlen>
   d65d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d65dc:	b283      	uxth	r3, r0
   d65de:	9500      	str	r5, [sp, #0]
   d65e0:	4620      	mov	r0, r4
   d65e2:	f7ff ffbf 	bl	d6564 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d65e6:	b005      	add	sp, #20
   d65e8:	bd30      	pop	{r4, r5, pc}

000d65ea <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   d65ea:	b538      	push	{r3, r4, r5, lr}
   d65ec:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d65ee:	2382      	movs	r3, #130	; 0x82
   d65f0:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d65f2:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d65f6:	0a1b      	lsrs	r3, r3, #8
   d65f8:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   d65fa:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d65fe:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   d6600:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   d6604:	460c      	mov	r4, r1
  packet_id_counter++;
   d6606:	3301      	adds	r3, #1
   d6608:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   d660c:	4611      	mov	r1, r2
   d660e:	1d20      	adds	r0, r4, #4
   d6610:	f7ff fd8a 	bl	d6128 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   d6614:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   d6618:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d661a:	b2c0      	uxtb	r0, r0
   d661c:	1e83      	subs	r3, r0, #2
   d661e:	7063      	strb	r3, [r4, #1]
}
   d6620:	bd38      	pop	{r3, r4, r5, pc}

000d6622 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   d6622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   d6626:	6803      	ldr	r3, [r0, #0]
   d6628:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   d662a:	4604      	mov	r4, r0
  if (!connectServer())
   d662c:	4798      	blx	r3
   d662e:	2800      	cmp	r0, #0
   d6630:	d04b      	beq.n	d66ca <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   d6632:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d6636:	4629      	mov	r1, r5
   d6638:	4620      	mov	r0, r4
   d663a:	f7ff feed 	bl	d6418 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d663e:	6823      	ldr	r3, [r4, #0]
   d6640:	b282      	uxth	r2, r0
   d6642:	695b      	ldr	r3, [r3, #20]
   d6644:	4629      	mov	r1, r5
   d6646:	4620      	mov	r0, r4
   d6648:	4798      	blx	r3
   d664a:	2800      	cmp	r0, #0
   d664c:	d03d      	beq.n	d66ca <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d664e:	f241 7370 	movw	r3, #6000	; 0x1770
   d6652:	2296      	movs	r2, #150	; 0x96
   d6654:	4629      	mov	r1, r5
   d6656:	4620      	mov	r0, r4
   d6658:	f7ff fd96 	bl	d6188 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d665c:	b2c0      	uxtb	r0, r0
   d665e:	2804      	cmp	r0, #4
   d6660:	d133      	bne.n	d66ca <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d6662:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6664:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d6668:	d12f      	bne.n	d66ca <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   d666a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d666e:	b110      	cbz	r0, d6676 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   d6670:	b240      	sxtb	r0, r0
}
   d6672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6676:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   d667a:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   d667e:	f857 3b04 	ldr.w	r3, [r7], #4
   d6682:	b1f3      	cbz	r3, d66c2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   d6684:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d6686:	f857 2c04 	ldr.w	r2, [r7, #-4]
   d668a:	4629      	mov	r1, r5
   d668c:	7913      	ldrb	r3, [r2, #4]
   d668e:	6812      	ldr	r2, [r2, #0]
   d6690:	4620      	mov	r0, r4
   d6692:	f7ff ffaa 	bl	d65ea <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d6696:	6823      	ldr	r3, [r4, #0]
   d6698:	b282      	uxth	r2, r0
   d669a:	695b      	ldr	r3, [r3, #20]
   d669c:	4629      	mov	r1, r5
   d669e:	4620      	mov	r0, r4
   d66a0:	4798      	blx	r3
   d66a2:	b190      	cbz	r0, d66ca <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d66a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d66a8:	2209      	movs	r2, #9
   d66aa:	4629      	mov	r1, r5
   d66ac:	4620      	mov	r0, r4
   d66ae:	f7ff fdb7 	bl	d6220 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d66b2:	b930      	cbnz	r0, d66c2 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d66b4:	3e01      	subs	r6, #1
   d66b6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d66ba:	d1e4      	bne.n	d6686 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   d66bc:	f06f 0001 	mvn.w	r0, #1
   d66c0:	e7d7      	b.n	d6672 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d66c2:	45b8      	cmp	r8, r7
   d66c4:	d1db      	bne.n	d667e <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   d66c6:	2000      	movs	r0, #0
   d66c8:	e7d3      	b.n	d6672 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   d66ca:	f04f 30ff 	mov.w	r0, #4294967295
   d66ce:	e7d0      	b.n	d6672 <_ZN13Adafruit_MQTT7connectEv+0x50>

000d66d0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d66d0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d66d2:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d66d6:	7203      	strb	r3, [r0, #8]
}
   d66d8:	bd10      	pop	{r4, pc}

000d66da <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   d66da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d66dc:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d66de:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   d66e0:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   d66e2:	a901      	add	r1, sp, #4
   d66e4:	f000 fd0a 	bl	d70fc <ltoa>
  return mqtt->publish(topic, payload, qos);
   d66e8:	e9d4 0100 	ldrd	r0, r1, [r4]
   d66ec:	7a23      	ldrb	r3, [r4, #8]
   d66ee:	aa01      	add	r2, sp, #4
   d66f0:	f7ff ff69 	bl	d65c6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d66f4:	b004      	add	sp, #16
   d66f6:	bd10      	pop	{r4, pc}

000d66f8 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d66f8:	b5d0      	push	{r4, r6, r7, lr}
   d66fa:	ec57 6b10 	vmov	r6, r7, d0
   d66fe:	b090      	sub	sp, #64	; 0x40
   d6700:	4604      	mov	r4, r0
   d6702:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   d6704:	2200      	movs	r2, #0
   d6706:	4909      	ldr	r1, [pc, #36]	; (d672c <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   d6708:	4668      	mov	r0, sp
   d670a:	f000 fb37 	bl	d6d7c <sprintf>
  sprintf(sout, fmt, val);
   d670e:	4632      	mov	r2, r6
   d6710:	463b      	mov	r3, r7
   d6712:	4669      	mov	r1, sp
   d6714:	a805      	add	r0, sp, #20
   d6716:	f000 fb31 	bl	d6d7c <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d671a:	e9d4 0100 	ldrd	r0, r1, [r4]
   d671e:	7a23      	ldrb	r3, [r4, #8]
   d6720:	aa05      	add	r2, sp, #20
   d6722:	f7ff ff50 	bl	d65c6 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d6726:	b010      	add	sp, #64	; 0x40
   d6728:	bdd0      	pop	{r4, r6, r7, pc}
   d672a:	bf00      	nop
   d672c:	000dd29c 	.word	0x000dd29c

000d6730 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d6730:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d6732:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d6734:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   d6736:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   d673a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   d673e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d6740:	6002      	str	r2, [r0, #0]
  datalen = 0;
   d6742:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d6744:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   d6746:	6303      	str	r3, [r0, #48]	; 0x30
}
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d674a:	2200      	movs	r2, #0
   d674c:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d6750:	6001      	str	r1, [r0, #0]
    // do nothing
}
   d6752:	4770      	bx	lr

000d6754 <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d6754:	6880      	ldr	r0, [r0, #8]
   d6756:	4770      	bx	lr

000d6758 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d6758:	b510      	push	{r4, lr}
   d675a:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d675c:	f000 f8a2 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d6760:	69a3      	ldr	r3, [r4, #24]
   d6762:	1ac0      	subs	r0, r0, r3
   d6764:	4b07      	ldr	r3, [pc, #28]	; (d6784 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d6766:	4298      	cmp	r0, r3
   d6768:	d90a      	bls.n	d6780 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d676a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d676e:	fb93 f3f2 	sdiv	r3, r3, r2
   d6772:	60e3      	str	r3, [r4, #12]
   d6774:	f000 f896 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d6778:	2300      	movs	r3, #0
        _volSumCount = 0;
   d677a:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   d677e:	61a0      	str	r0, [r4, #24]
    }
}
   d6780:	bd10      	pop	{r4, pc}
   d6782:	bf00      	nop
   d6784:	0007a120 	.word	0x0007a120

000d6788 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   d6788:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d678a:	6883      	ldr	r3, [r0, #8]
   d678c:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   d678e:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   d6790:	8800      	ldrh	r0, [r0, #0]
   d6792:	f001 fdf8 	bl	d8386 <analogRead>
    _voltageSum += _currentVoltage;
   d6796:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   d6798:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   d679a:	4418      	add	r0, r3
    _volSumCount += 1;
   d679c:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   d679e:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d67a0:	3301      	adds	r3, #1
   d67a2:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   d67a4:	4620      	mov	r0, r4
   d67a6:	f7ff ffd7 	bl	d6758 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d67aa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   d67ae:	1a51      	subs	r1, r2, r1
   d67b0:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d67b4:	dc10      	bgt.n	d67d8 <_ZN16AirQualitySensor5slopeEv+0x50>
   d67b6:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d67ba:	dc0d      	bgt.n	d67d8 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   d67bc:	68e3      	ldr	r3, [r4, #12]
   d67be:	1ad3      	subs	r3, r2, r3
   d67c0:	2b96      	cmp	r3, #150	; 0x96
   d67c2:	dc0b      	bgt.n	d67dc <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d67c4:	29c8      	cmp	r1, #200	; 0xc8
   d67c6:	dd02      	ble.n	d67ce <_ZN16AirQualitySensor5slopeEv+0x46>
   d67c8:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d67cc:	d108      	bne.n	d67e0 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   d67ce:	2b32      	cmp	r3, #50	; 0x32
   d67d0:	bfcc      	ite	gt
   d67d2:	2002      	movgt	r0, #2
   d67d4:	2003      	movle	r0, #3
}
   d67d6:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   d67d8:	2000      	movs	r0, #0
   d67da:	e7fc      	b.n	d67d6 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   d67dc:	2001      	movs	r0, #1
   d67de:	e7fa      	b.n	d67d6 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   d67e0:	2002      	movs	r0, #2
   d67e2:	e7f8      	b.n	d67d6 <_ZN16AirQualitySensor5slopeEv+0x4e>

000d67e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <netdb_freeaddrinfo+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	689b      	ldr	r3, [r3, #8]
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	00030268 	.word	0x00030268

000d67f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <netdb_getaddrinfo+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	68db      	ldr	r3, [r3, #12]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	00030268 	.word	0x00030268

000d6804 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <HAL_Validate_Pin_Function+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	685b      	ldr	r3, [r3, #4]
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	0003022c 	.word	0x0003022c

000d6814 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <HAL_Pin_Mode+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	689b      	ldr	r3, [r3, #8]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	0003022c 	.word	0x0003022c

000d6824 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <HAL_Get_Pin_Mode+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	68db      	ldr	r3, [r3, #12]
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	0003022c 	.word	0x0003022c

000d6834 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <HAL_GPIO_Write+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	691b      	ldr	r3, [r3, #16]
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	0003022c 	.word	0x0003022c

000d6844 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <HAL_GPIO_Read+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	695b      	ldr	r3, [r3, #20]
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	0003022c 	.word	0x0003022c

000d6854 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <hal_adc_read+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	0003022c 	.word	0x0003022c

000d6864 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <HAL_Pulse_In+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	0003022c 	.word	0x0003022c

000d6874 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <if_index_to_name+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	695b      	ldr	r3, [r3, #20]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	0003026c 	.word	0x0003026c

000d6884 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <HAL_RNG_GetRandomNumber+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	685b      	ldr	r3, [r3, #4]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	00030218 	.word	0x00030218

000d6894 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <HAL_Delay_Microseconds+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	68db      	ldr	r3, [r3, #12]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	00030218 	.word	0x00030218

000d68a4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	695b      	ldr	r3, [r3, #20]
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	00030218 	.word	0x00030218

000d68b4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <hal_rtc_time_is_valid+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	00030218 	.word	0x00030218

000d68c4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <hal_rtc_get_time+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	00030218 	.word	0x00030218

000d68d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <os_mutex_recursive_create+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	00030248 	.word	0x00030248

000d68e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <os_mutex_recursive_destroy+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	00030248 	.word	0x00030248

000d68f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <inet_inet_ntop+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	695b      	ldr	r3, [r3, #20]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	00030264 	.word	0x00030264

000d6904 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <inet_htonl+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	6a1b      	ldr	r3, [r3, #32]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030264 	.word	0x00030264

000d6914 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <inet_htons+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030264 	.word	0x00030264

000d6924 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <hal_usart_init+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	681b      	ldr	r3, [r3, #0]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	0003023c 	.word	0x0003023c

000d6934 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <hal_usart_write+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	68db      	ldr	r3, [r3, #12]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	0003023c 	.word	0x0003023c

000d6944 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <hal_usart_available+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	691b      	ldr	r3, [r3, #16]
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	0003023c 	.word	0x0003023c

000d6954 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <hal_usart_read+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	695b      	ldr	r3, [r3, #20]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	0003023c 	.word	0x0003023c

000d6964 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <hal_usart_peek+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	699b      	ldr	r3, [r3, #24]
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	0003023c 	.word	0x0003023c

000d6974 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <hal_usart_flush+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	69db      	ldr	r3, [r3, #28]
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	0003023c 	.word	0x0003023c

000d6984 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <hal_usart_is_enabled+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	6a1b      	ldr	r3, [r3, #32]
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	0003023c 	.word	0x0003023c

000d6994 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <hal_usart_available_data_for_write+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	0003023c 	.word	0x0003023c

000d69a4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <hal_i2c_begin+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	68db      	ldr	r3, [r3, #12]
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	00030228 	.word	0x00030228

000d69b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <hal_i2c_begin_transmission+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	699b      	ldr	r3, [r3, #24]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	00030228 	.word	0x00030228

000d69c4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <hal_i2c_end_transmission+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	69db      	ldr	r3, [r3, #28]
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	00030228 	.word	0x00030228

000d69d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b02      	ldr	r3, [pc, #8]	; (d69e0 <hal_i2c_write+0xc>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	6a1b      	ldr	r3, [r3, #32]
   d69dc:	9301      	str	r3, [sp, #4]
   d69de:	bd08      	pop	{r3, pc}
   d69e0:	00030228 	.word	0x00030228

000d69e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <hal_i2c_available+0xc>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	bd08      	pop	{r3, pc}
   d69f0:	00030228 	.word	0x00030228

000d69f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d69f4:	b508      	push	{r3, lr}
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <hal_i2c_read+0xc>)
   d69f8:	681b      	ldr	r3, [r3, #0]
   d69fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	bd08      	pop	{r3, pc}
   d6a00:	00030228 	.word	0x00030228

000d6a04 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <hal_i2c_peek+0xc>)
   d6a08:	681b      	ldr	r3, [r3, #0]
   d6a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	bd08      	pop	{r3, pc}
   d6a10:	00030228 	.word	0x00030228

000d6a14 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <hal_i2c_flush+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	00030228 	.word	0x00030228

000d6a24 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <hal_i2c_is_enabled+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	00030228 	.word	0x00030228

000d6a34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <hal_i2c_init+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	00030228 	.word	0x00030228

000d6a44 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <hal_i2c_request_ex+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	00030228 	.word	0x00030228

000d6a54 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <sock_setsockopt+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	699b      	ldr	r3, [r3, #24]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	00030238 	.word	0x00030238

000d6a64 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <sock_close+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	69db      	ldr	r3, [r3, #28]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	00030238 	.word	0x00030238

000d6a74 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <sock_connect+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	6a1b      	ldr	r3, [r3, #32]
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	00030238 	.word	0x00030238

000d6a84 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6a84:	b508      	push	{r3, lr}
   d6a86:	4b02      	ldr	r3, [pc, #8]	; (d6a90 <sock_recv+0xc>)
   d6a88:	681b      	ldr	r3, [r3, #0]
   d6a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a8c:	9301      	str	r3, [sp, #4]
   d6a8e:	bd08      	pop	{r3, pc}
   d6a90:	00030238 	.word	0x00030238

000d6a94 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6a94:	b508      	push	{r3, lr}
   d6a96:	4b02      	ldr	r3, [pc, #8]	; (d6aa0 <sock_send+0xc>)
   d6a98:	681b      	ldr	r3, [r3, #0]
   d6a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a9c:	9301      	str	r3, [sp, #4]
   d6a9e:	bd08      	pop	{r3, pc}
   d6aa0:	00030238 	.word	0x00030238

000d6aa4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b02      	ldr	r3, [pc, #8]	; (d6ab0 <sock_socket+0xc>)
   d6aa8:	681b      	ldr	r3, [r3, #0]
   d6aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6aac:	9301      	str	r3, [sp, #4]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	00030238 	.word	0x00030238

000d6ab4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6ab4:	b508      	push	{r3, lr}
   d6ab6:	4b02      	ldr	r3, [pc, #8]	; (d6ac0 <hal_spi_begin+0xc>)
   d6ab8:	681b      	ldr	r3, [r3, #0]
   d6aba:	681b      	ldr	r3, [r3, #0]
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	bd08      	pop	{r3, pc}
   d6ac0:	00030230 	.word	0x00030230

000d6ac4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <hal_spi_set_bit_order+0xc>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	689b      	ldr	r3, [r3, #8]
   d6acc:	9301      	str	r3, [sp, #4]
   d6ace:	bd08      	pop	{r3, pc}
   d6ad0:	00030230 	.word	0x00030230

000d6ad4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d6ad4:	b508      	push	{r3, lr}
   d6ad6:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <hal_spi_set_data_mode+0xc>)
   d6ad8:	681b      	ldr	r3, [r3, #0]
   d6ada:	68db      	ldr	r3, [r3, #12]
   d6adc:	9301      	str	r3, [sp, #4]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	00030230 	.word	0x00030230

000d6ae4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4b02      	ldr	r3, [pc, #8]	; (d6af0 <hal_spi_set_clock_divider+0xc>)
   d6ae8:	681b      	ldr	r3, [r3, #0]
   d6aea:	691b      	ldr	r3, [r3, #16]
   d6aec:	9301      	str	r3, [sp, #4]
   d6aee:	bd08      	pop	{r3, pc}
   d6af0:	00030230 	.word	0x00030230

000d6af4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6af4:	b508      	push	{r3, lr}
   d6af6:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <hal_spi_transfer+0xc>)
   d6af8:	681b      	ldr	r3, [r3, #0]
   d6afa:	695b      	ldr	r3, [r3, #20]
   d6afc:	9301      	str	r3, [sp, #4]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	00030230 	.word	0x00030230

000d6b04 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6b04:	b508      	push	{r3, lr}
   d6b06:	4b02      	ldr	r3, [pc, #8]	; (d6b10 <hal_spi_init+0xc>)
   d6b08:	681b      	ldr	r3, [r3, #0]
   d6b0a:	69db      	ldr	r3, [r3, #28]
   d6b0c:	9301      	str	r3, [sp, #4]
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	00030230 	.word	0x00030230

000d6b14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6b14:	b508      	push	{r3, lr}
   d6b16:	4b02      	ldr	r3, [pc, #8]	; (d6b20 <hal_spi_is_enabled+0xc>)
   d6b18:	681b      	ldr	r3, [r3, #0]
   d6b1a:	6a1b      	ldr	r3, [r3, #32]
   d6b1c:	9301      	str	r3, [sp, #4]
   d6b1e:	bd08      	pop	{r3, pc}
   d6b20:	00030230 	.word	0x00030230

000d6b24 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6b24:	b508      	push	{r3, lr}
   d6b26:	4b02      	ldr	r3, [pc, #8]	; (d6b30 <hal_spi_info+0xc>)
   d6b28:	681b      	ldr	r3, [r3, #0]
   d6b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b2c:	9301      	str	r3, [sp, #4]
   d6b2e:	bd08      	pop	{r3, pc}
   d6b30:	00030230 	.word	0x00030230

000d6b34 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6b34:	b508      	push	{r3, lr}
   d6b36:	4b02      	ldr	r3, [pc, #8]	; (d6b40 <hal_spi_set_settings+0xc>)
   d6b38:	681b      	ldr	r3, [r3, #0]
   d6b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6b3c:	9301      	str	r3, [sp, #4]
   d6b3e:	bd08      	pop	{r3, pc}
   d6b40:	00030230 	.word	0x00030230

000d6b44 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6b44:	b508      	push	{r3, lr}
   d6b46:	4b02      	ldr	r3, [pc, #8]	; (d6b50 <hal_spi_acquire+0xc>)
   d6b48:	681b      	ldr	r3, [r3, #0]
   d6b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b4c:	9301      	str	r3, [sp, #4]
   d6b4e:	bd08      	pop	{r3, pc}
   d6b50:	00030230 	.word	0x00030230

000d6b54 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6b54:	b508      	push	{r3, lr}
   d6b56:	4b02      	ldr	r3, [pc, #8]	; (d6b60 <hal_spi_release+0xc>)
   d6b58:	681b      	ldr	r3, [r3, #0]
   d6b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b5c:	9301      	str	r3, [sp, #4]
   d6b5e:	bd08      	pop	{r3, pc}
   d6b60:	00030230 	.word	0x00030230

000d6b64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b64:	b508      	push	{r3, lr}
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <HAL_USB_USART_Init+0xc>)
   d6b68:	681b      	ldr	r3, [r3, #0]
   d6b6a:	681b      	ldr	r3, [r3, #0]
   d6b6c:	9301      	str	r3, [sp, #4]
   d6b6e:	bd08      	pop	{r3, pc}
   d6b70:	0003024c 	.word	0x0003024c

000d6b74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b74:	b508      	push	{r3, lr}
   d6b76:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <HAL_USB_USART_Begin+0xc>)
   d6b78:	681b      	ldr	r3, [r3, #0]
   d6b7a:	685b      	ldr	r3, [r3, #4]
   d6b7c:	9301      	str	r3, [sp, #4]
   d6b7e:	bd08      	pop	{r3, pc}
   d6b80:	0003024c 	.word	0x0003024c

000d6b84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b84:	b508      	push	{r3, lr}
   d6b86:	4b02      	ldr	r3, [pc, #8]	; (d6b90 <HAL_USB_USART_Available_Data+0xc>)
   d6b88:	681b      	ldr	r3, [r3, #0]
   d6b8a:	691b      	ldr	r3, [r3, #16]
   d6b8c:	9301      	str	r3, [sp, #4]
   d6b8e:	bd08      	pop	{r3, pc}
   d6b90:	0003024c 	.word	0x0003024c

000d6b94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6b94:	b508      	push	{r3, lr}
   d6b96:	4b02      	ldr	r3, [pc, #8]	; (d6ba0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6b98:	681b      	ldr	r3, [r3, #0]
   d6b9a:	695b      	ldr	r3, [r3, #20]
   d6b9c:	9301      	str	r3, [sp, #4]
   d6b9e:	bd08      	pop	{r3, pc}
   d6ba0:	0003024c 	.word	0x0003024c

000d6ba4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6ba4:	b508      	push	{r3, lr}
   d6ba6:	4b02      	ldr	r3, [pc, #8]	; (d6bb0 <HAL_USB_USART_Receive_Data+0xc>)
   d6ba8:	681b      	ldr	r3, [r3, #0]
   d6baa:	699b      	ldr	r3, [r3, #24]
   d6bac:	9301      	str	r3, [sp, #4]
   d6bae:	bd08      	pop	{r3, pc}
   d6bb0:	0003024c 	.word	0x0003024c

000d6bb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bb4:	b508      	push	{r3, lr}
   d6bb6:	4b02      	ldr	r3, [pc, #8]	; (d6bc0 <HAL_USB_USART_Send_Data+0xc>)
   d6bb8:	681b      	ldr	r3, [r3, #0]
   d6bba:	69db      	ldr	r3, [r3, #28]
   d6bbc:	9301      	str	r3, [sp, #4]
   d6bbe:	bd08      	pop	{r3, pc}
   d6bc0:	0003024c 	.word	0x0003024c

000d6bc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6bc4:	b508      	push	{r3, lr}
   d6bc6:	4b02      	ldr	r3, [pc, #8]	; (d6bd0 <HAL_USB_USART_Flush_Data+0xc>)
   d6bc8:	681b      	ldr	r3, [r3, #0]
   d6bca:	6a1b      	ldr	r3, [r3, #32]
   d6bcc:	9301      	str	r3, [sp, #4]
   d6bce:	bd08      	pop	{r3, pc}
   d6bd0:	0003024c 	.word	0x0003024c

000d6bd4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6bd4:	b508      	push	{r3, lr}
   d6bd6:	4b02      	ldr	r3, [pc, #8]	; (d6be0 <panic_+0xc>)
   d6bd8:	681b      	ldr	r3, [r3, #0]
   d6bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bdc:	9301      	str	r3, [sp, #4]
   d6bde:	bd08      	pop	{r3, pc}
   d6be0:	00030260 	.word	0x00030260

000d6be4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6be4:	b508      	push	{r3, lr}
   d6be6:	4b02      	ldr	r3, [pc, #8]	; (d6bf0 <log_message+0xc>)
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6bec:	9301      	str	r3, [sp, #4]
   d6bee:	bd08      	pop	{r3, pc}
   d6bf0:	00030260 	.word	0x00030260

000d6bf4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <system_mode+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	681b      	ldr	r3, [r3, #0]
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	00030220 	.word	0x00030220

000d6c04 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <set_system_mode+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	685b      	ldr	r3, [r3, #4]
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	00030220 	.word	0x00030220

000d6c14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <system_delay_ms+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	695b      	ldr	r3, [r3, #20]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	00030220 	.word	0x00030220

000d6c24 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <system_thread_get_state+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	00030220 	.word	0x00030220

000d6c34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b03      	ldr	r3, [pc, #12]	; (d6c44 <system_ctrl_set_app_request_handler+0x10>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c3e:	9301      	str	r3, [sp, #4]
   d6c40:	bd08      	pop	{r3, pc}
   d6c42:	0000      	.short	0x0000
   d6c44:	00030220 	.word	0x00030220

000d6c48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b03      	ldr	r3, [pc, #12]	; (d6c58 <system_ctrl_set_result+0x10>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6c52:	9301      	str	r3, [sp, #4]
   d6c54:	bd08      	pop	{r3, pc}
   d6c56:	0000      	.short	0x0000
   d6c58:	00030220 	.word	0x00030220

000d6c5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <network_connect+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	685b      	ldr	r3, [r3, #4]
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	00030240 	.word	0x00030240

000d6c6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <network_connecting+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	689b      	ldr	r3, [r3, #8]
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	00030240 	.word	0x00030240

000d6c7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <network_disconnect+0xc>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	68db      	ldr	r3, [r3, #12]
   d6c84:	9301      	str	r3, [sp, #4]
   d6c86:	bd08      	pop	{r3, pc}
   d6c88:	00030240 	.word	0x00030240

000d6c8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6c8c:	b508      	push	{r3, lr}
   d6c8e:	4b02      	ldr	r3, [pc, #8]	; (d6c98 <network_ready+0xc>)
   d6c90:	681b      	ldr	r3, [r3, #0]
   d6c92:	691b      	ldr	r3, [r3, #16]
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	bd08      	pop	{r3, pc}
   d6c98:	00030240 	.word	0x00030240

000d6c9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c9c:	b508      	push	{r3, lr}
   d6c9e:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <network_on+0xc>)
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	695b      	ldr	r3, [r3, #20]
   d6ca4:	9301      	str	r3, [sp, #4]
   d6ca6:	bd08      	pop	{r3, pc}
   d6ca8:	00030240 	.word	0x00030240

000d6cac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <network_off+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	699b      	ldr	r3, [r3, #24]
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	00030240 	.word	0x00030240

000d6cbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <network_listen+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	69db      	ldr	r3, [r3, #28]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030240 	.word	0x00030240

000d6ccc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <network_listening+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	6a1b      	ldr	r3, [r3, #32]
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030240 	.word	0x00030240

000d6cdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <network_set_listen_timeout+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030240 	.word	0x00030240

000d6cec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <network_get_listen_timeout+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030240 	.word	0x00030240

000d6cfc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <spark_process+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	689b      	ldr	r3, [r3, #8]
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	00030244 	.word	0x00030244

000d6d0c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <spark_cloud_flag_connected+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	695b      	ldr	r3, [r3, #20]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	00030244 	.word	0x00030244

000d6d1c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <spark_sync_time+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	00030244 	.word	0x00030244

000d6d2c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <spark_sync_time_pending+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030244 	.word	0x00030244

000d6d3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030244 	.word	0x00030244

000d6d4c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <malloc+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	681b      	ldr	r3, [r3, #0]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	0003021c 	.word	0x0003021c

000d6d5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <free+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	685b      	ldr	r3, [r3, #4]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	0003021c 	.word	0x0003021c

000d6d6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <realloc+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	689b      	ldr	r3, [r3, #8]
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	0003021c 	.word	0x0003021c

000d6d7c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <sprintf+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	68db      	ldr	r3, [r3, #12]
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	0003021c 	.word	0x0003021c

000d6d8c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <siprintf+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	691b      	ldr	r3, [r3, #16]
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	0003021c 	.word	0x0003021c

000d6d9c <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <vsnprintf+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	0003021c 	.word	0x0003021c

000d6dac <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <_malloc_r+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	0003021c 	.word	0x0003021c

000d6dbc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <__errno+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	0003021c 	.word	0x0003021c

000d6dcc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <newlib_impure_ptr_callback+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	0003021c 	.word	0x0003021c

000d6ddc <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <localtime_r+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	0003021c 	.word	0x0003021c

000d6dec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dec:	2200      	movs	r2, #0
   d6dee:	6840      	ldr	r0, [r0, #4]
   d6df0:	4611      	mov	r1, r2
   d6df2:	f7ff bf6b 	b.w	d6ccc <network_listening>

000d6df6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6df6:	2200      	movs	r2, #0
   d6df8:	6840      	ldr	r0, [r0, #4]
   d6dfa:	4611      	mov	r1, r2
   d6dfc:	f7ff bf76 	b.w	d6cec <network_get_listen_timeout>

000d6e00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6e00:	6840      	ldr	r0, [r0, #4]
   d6e02:	2200      	movs	r2, #0
   d6e04:	f7ff bf6a 	b.w	d6cdc <network_set_listen_timeout>

000d6e08 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e08:	6840      	ldr	r0, [r0, #4]
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	f081 0101 	eor.w	r1, r1, #1
   d6e10:	f7ff bf54 	b.w	d6cbc <network_listen>

000d6e14 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6e14:	2300      	movs	r3, #0
   d6e16:	6840      	ldr	r0, [r0, #4]
   d6e18:	461a      	mov	r2, r3
   d6e1a:	4619      	mov	r1, r3
   d6e1c:	f7ff bf46 	b.w	d6cac <network_off>

000d6e20 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6e20:	2300      	movs	r3, #0
   d6e22:	6840      	ldr	r0, [r0, #4]
   d6e24:	461a      	mov	r2, r3
   d6e26:	4619      	mov	r1, r3
   d6e28:	f7ff bf38 	b.w	d6c9c <network_on>

000d6e2c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e2c:	2200      	movs	r2, #0
   d6e2e:	6840      	ldr	r0, [r0, #4]
   d6e30:	4611      	mov	r1, r2
   d6e32:	f7ff bf2b 	b.w	d6c8c <network_ready>

000d6e36 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6e36:	2200      	movs	r2, #0
   d6e38:	6840      	ldr	r0, [r0, #4]
   d6e3a:	4611      	mov	r1, r2
   d6e3c:	f7ff bf16 	b.w	d6c6c <network_connecting>

000d6e40 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e40:	6840      	ldr	r0, [r0, #4]
   d6e42:	2200      	movs	r2, #0
   d6e44:	2102      	movs	r1, #2
   d6e46:	f7ff bf19 	b.w	d6c7c <network_disconnect>

000d6e4a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6e4a:	2300      	movs	r3, #0
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	461a      	mov	r2, r3
   d6e50:	f7ff bf04 	b.w	d6c5c <network_connect>

000d6e54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6e54:	4b02      	ldr	r3, [pc, #8]	; (d6e60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6e56:	2203      	movs	r2, #3
   d6e58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6e5a:	4a02      	ldr	r2, [pc, #8]	; (d6e64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6e5c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6e5e:	4770      	bx	lr
   d6e60:	2003e644 	.word	0x2003e644
   d6e64:	000dd4b4 	.word	0x000dd4b4

000d6e68 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6e68:	2100      	movs	r1, #0
   d6e6a:	f7ff be6b 	b.w	d6b44 <hal_spi_acquire>

000d6e6e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6e6e:	2100      	movs	r1, #0
   d6e70:	f7ff be70 	b.w	d6b54 <hal_spi_release>

000d6e74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
   d6e78:	4608      	mov	r0, r1
{
    _spi = spi;
   d6e7a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6e7c:	f7ff fe42 	bl	d6b04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6e80:	2300      	movs	r3, #0
   d6e82:	6063      	str	r3, [r4, #4]
}
   d6e84:	4620      	mov	r0, r4
   d6e86:	bd10      	pop	{r4, pc}

000d6e88 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6e88:	b510      	push	{r4, lr}
   d6e8a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6e8c:	7800      	ldrb	r0, [r0, #0]
   d6e8e:	f7ff ffeb 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6e92:	b948      	cbnz	r0, d6ea8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6e94:	7820      	ldrb	r0, [r4, #0]
   d6e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6e9a:	f7ff fe0b 	bl	d6ab4 <hal_spi_begin>
        unlock();
   d6e9e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6ea4:	f7ff bfe3 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.0>
}
   d6ea8:	bd10      	pop	{r4, pc}

000d6eaa <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6eaa:	b513      	push	{r0, r1, r4, lr}
   d6eac:	4604      	mov	r4, r0
    if (!lock())
   d6eae:	7800      	ldrb	r0, [r0, #0]
{
   d6eb0:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6eb2:	f7ff ffd9 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6eb6:	9901      	ldr	r1, [sp, #4]
   d6eb8:	b940      	cbnz	r0, d6ecc <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d6eba:	7820      	ldrb	r0, [r4, #0]
   d6ebc:	f7ff fe02 	bl	d6ac4 <hal_spi_set_bit_order>
        unlock();
   d6ec0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6ec2:	b002      	add	sp, #8
   d6ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6ec8:	f7ff bfd1 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.0>
}
   d6ecc:	b002      	add	sp, #8
   d6ece:	bd10      	pop	{r4, pc}

000d6ed0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d6ed0:	b513      	push	{r0, r1, r4, lr}
   d6ed2:	4604      	mov	r4, r0
    if (!lock())
   d6ed4:	7800      	ldrb	r0, [r0, #0]
{
   d6ed6:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6ed8:	f7ff ffc6 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6edc:	9901      	ldr	r1, [sp, #4]
   d6ede:	b940      	cbnz	r0, d6ef2 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d6ee0:	7820      	ldrb	r0, [r4, #0]
   d6ee2:	f7ff fdf7 	bl	d6ad4 <hal_spi_set_data_mode>
        unlock();
   d6ee6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6ee8:	b002      	add	sp, #8
   d6eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6eee:	f7ff bfbe 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.0>
}
   d6ef2:	b002      	add	sp, #8
   d6ef4:	bd10      	pop	{r4, pc}

000d6ef6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6ef6:	7800      	ldrb	r0, [r0, #0]
   d6ef8:	f7ff bfb9 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.0>

000d6efc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6efc:	0840      	lsrs	r0, r0, #1
{
   d6efe:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6f00:	6018      	str	r0, [r3, #0]
   d6f02:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6f04:	6818      	ldr	r0, [r3, #0]
   d6f06:	4288      	cmp	r0, r1
   d6f08:	b2e5      	uxtb	r5, r4
   d6f0a:	d906      	bls.n	d6f1a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6f0c:	3401      	adds	r4, #1
   d6f0e:	2c08      	cmp	r4, #8
   d6f10:	d002      	beq.n	d6f18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6f12:	0840      	lsrs	r0, r0, #1
   d6f14:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6f16:	e7f5      	b.n	d6f04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6f18:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6f1c:	5d5b      	ldrb	r3, [r3, r5]
   d6f1e:	7013      	strb	r3, [r2, #0]
}
   d6f20:	bd30      	pop	{r4, r5, pc}
   d6f22:	bf00      	nop
   d6f24:	000dd4e0 	.word	0x000dd4e0

000d6f28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f2c:	4606      	mov	r6, r0
   d6f2e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6f30:	7800      	ldrb	r0, [r0, #0]
{
   d6f32:	460d      	mov	r5, r1
    CHECK(lock());
   d6f34:	f7ff ff98 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d6f38:	2800      	cmp	r0, #0
   d6f3a:	db1b      	blt.n	d6f74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6f3c:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6f3e:	2214      	movs	r2, #20
   d6f40:	2100      	movs	r1, #0
   d6f42:	a809      	add	r0, sp, #36	; 0x24
   d6f44:	f003 fdba 	bl	daabc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6f48:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6f4a:	2200      	movs	r2, #0
   d6f4c:	a909      	add	r1, sp, #36	; 0x24
   d6f4e:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d6f50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6f54:	f7ff fde6 	bl	d6b24 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6f58:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6f5c:	b113      	cbz	r3, d6f64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6f5e:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d6f62:	b154      	cbz	r4, d6f7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6f64:	2700      	movs	r7, #0
   d6f66:	46b9      	mov	r9, r7
   d6f68:	46b8      	mov	r8, r7
   d6f6a:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d6f6c:	792b      	ldrb	r3, [r5, #4]
   d6f6e:	b15c      	cbz	r4, d6f88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6f70:	b1c3      	cbz	r3, d6fa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6f72:	2000      	movs	r0, #0
}
   d6f74:	b00f      	add	sp, #60	; 0x3c
   d6f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6f7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6f7e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6f82:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6f86:	e7f1      	b.n	d6f6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6f88:	2b00      	cmp	r3, #0
   d6f8a:	d135      	bne.n	d6ff8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6f8c:	68ab      	ldr	r3, [r5, #8]
   d6f8e:	4543      	cmp	r3, r8
   d6f90:	d108      	bne.n	d6fa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d6f92:	f88d 9020 	strb.w	r9, [sp, #32]
   d6f96:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6f9a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6f9e:	89ab      	ldrh	r3, [r5, #12]
   d6fa0:	429a      	cmp	r2, r3
   d6fa2:	d0e6      	beq.n	d6f72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6fa4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6fa6:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d6fa8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6fac:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6fae:	ab04      	add	r3, sp, #16
   d6fb0:	f10d 020f 	add.w	r2, sp, #15
   d6fb4:	f7ff ffa2 	bl	d6efc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6fb8:	7929      	ldrb	r1, [r5, #4]
   d6fba:	b984      	cbnz	r4, d6fde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6fbc:	b989      	cbnz	r1, d6fe2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6fbe:	68ab      	ldr	r3, [r5, #8]
   d6fc0:	4543      	cmp	r3, r8
   d6fc2:	d30e      	bcc.n	d6fe2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6fc4:	f88d 9020 	strb.w	r9, [sp, #32]
   d6fc8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6fcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6fd0:	89ab      	ldrh	r3, [r5, #12]
   d6fd2:	429a      	cmp	r2, r3
   d6fd4:	d105      	bne.n	d6fe2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6fd6:	9b04      	ldr	r3, [sp, #16]
   d6fd8:	4543      	cmp	r3, r8
   d6fda:	d102      	bne.n	d6fe2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6fdc:	e7c9      	b.n	d6f72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6fde:	2900      	cmp	r1, #0
   d6fe0:	d1f9      	bne.n	d6fd6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6fe2:	2300      	movs	r3, #0
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	7b6b      	ldrb	r3, [r5, #13]
   d6fe8:	9300      	str	r3, [sp, #0]
   d6fea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6fee:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6ff0:	7830      	ldrb	r0, [r6, #0]
   d6ff2:	f7ff fd9f 	bl	d6b34 <hal_spi_set_settings>
   d6ff6:	e7bc      	b.n	d6f72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6ff8:	e9cd 4400 	strd	r4, r4, [sp]
   d6ffc:	4623      	mov	r3, r4
   d6ffe:	4622      	mov	r2, r4
   d7000:	2101      	movs	r1, #1
   d7002:	e7f5      	b.n	d6ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7004 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7008:	b088      	sub	sp, #32
    unsigned clock = 0;
   d700a:	2300      	movs	r3, #0
{
   d700c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d700e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d7010:	9302      	str	r3, [sp, #8]
{
   d7012:	460e      	mov	r6, r1
   d7014:	4617      	mov	r7, r2
    if (!lock())
   d7016:	f7ff ff27 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d701a:	4605      	mov	r5, r0
   d701c:	bb00      	cbnz	r0, d7060 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d701e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7022:	4601      	mov	r1, r0
   d7024:	2214      	movs	r2, #20
   d7026:	a803      	add	r0, sp, #12
   d7028:	f003 fd48 	bl	daabc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d702c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d702e:	462a      	mov	r2, r5
   d7030:	a903      	add	r1, sp, #12
   d7032:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d7034:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d7038:	f7ff fd74 	bl	d6b24 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d703c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d703e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7042:	ab02      	add	r3, sp, #8
   d7044:	f10d 0207 	add.w	r2, sp, #7
   d7048:	fb07 f106 	mul.w	r1, r7, r6
   d704c:	f7ff ff56 	bl	d6efc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d7050:	7820      	ldrb	r0, [r4, #0]
   d7052:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7056:	f7ff fd45 	bl	d6ae4 <hal_spi_set_clock_divider>
        unlock();
   d705a:	7820      	ldrb	r0, [r4, #0]
   d705c:	f7ff ff07 	bl	d6e6e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d7060:	9802      	ldr	r0, [sp, #8]
   d7062:	b008      	add	sp, #32
   d7064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7068 <_ZN8SPIClass15setClockDividerEh>:
{
   d7068:	b538      	push	{r3, r4, r5, lr}
   d706a:	4604      	mov	r4, r0
    if (!lock())
   d706c:	7800      	ldrb	r0, [r0, #0]
{
   d706e:	460d      	mov	r5, r1
    if (!lock())
   d7070:	f7ff fefa 	bl	d6e68 <_ZN8SPIClass4lockEv.isra.0>
   d7074:	4603      	mov	r3, r0
   d7076:	b9d0      	cbnz	r0, d70ae <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d7078:	6861      	ldr	r1, [r4, #4]
   d707a:	b199      	cbz	r1, d70a4 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d707c:	4a0c      	ldr	r2, [pc, #48]	; (d70b0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d707e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d7082:	4285      	cmp	r5, r0
   d7084:	d002      	beq.n	d708c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d7086:	3301      	adds	r3, #1
   d7088:	2b08      	cmp	r3, #8
   d708a:	d1f8      	bne.n	d707e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d708c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d708e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d7090:	2201      	movs	r2, #1
   d7092:	40d9      	lsrs	r1, r3
   d7094:	4620      	mov	r0, r4
   d7096:	f7ff ffb5 	bl	d7004 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d709a:	7820      	ldrb	r0, [r4, #0]
}
   d709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d70a0:	f7ff bee5 	b.w	d6e6e <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d70a4:	7820      	ldrb	r0, [r4, #0]
   d70a6:	4629      	mov	r1, r5
   d70a8:	f7ff fd1c 	bl	d6ae4 <hal_spi_set_clock_divider>
   d70ac:	e7f5      	b.n	d709a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d70ae:	bd38      	pop	{r3, r4, r5, pc}
   d70b0:	000dd4e0 	.word	0x000dd4e0

000d70b4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d70b4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d70b6:	7800      	ldrb	r0, [r0, #0]
   d70b8:	f7ff fd1c 	bl	d6af4 <hal_spi_transfer>
}
   d70bc:	b2c0      	uxtb	r0, r0
   d70be:	bd08      	pop	{r3, pc}

000d70c0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d70c0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d70c2:	4b09      	ldr	r3, [pc, #36]	; (d70e8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d70c4:	4c09      	ldr	r4, [pc, #36]	; (d70ec <_GLOBAL__sub_I_System+0x2c>)
   d70c6:	2202      	movs	r2, #2
   d70c8:	2000      	movs	r0, #0
   d70ca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d70cc:	4b08      	ldr	r3, [pc, #32]	; (d70f0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d70ce:	6020      	str	r0, [r4, #0]
   d70d0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d70d2:	71a0      	strb	r0, [r4, #6]
   d70d4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d70d6:	f7ff fd95 	bl	d6c04 <set_system_mode>
SystemClass System;
   d70da:	4620      	mov	r0, r4
   d70dc:	4a05      	ldr	r2, [pc, #20]	; (d70f4 <_GLOBAL__sub_I_System+0x34>)
   d70de:	4906      	ldr	r1, [pc, #24]	; (d70f8 <_GLOBAL__sub_I_System+0x38>)
   d70e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d70e4:	f001 b9cc 	b.w	d8480 <__aeabi_atexit>
   d70e8:	2003e658 	.word	0x2003e658
   d70ec:	2003e64c 	.word	0x2003e64c
   d70f0:	ffff0000 	.word	0xffff0000
   d70f4:	2003e3a8 	.word	0x2003e3a8
   d70f8:	000d4101 	.word	0x000d4101

000d70fc <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d70fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d7100:	1e93      	subs	r3, r2, #2
{
   d7102:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d7104:	2b22      	cmp	r3, #34	; 0x22
   d7106:	f04f 0300 	mov.w	r3, #0
{
   d710a:	460d      	mov	r5, r1
   d710c:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d710e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d7112:	d927      	bls.n	d7164 <ltoa+0x68>

      if (10 == base && N < 0L)
   d7114:	2800      	cmp	r0, #0
   d7116:	da2a      	bge.n	d716e <ltoa+0x72>
      {
            *head++ = '-';
   d7118:	462e      	mov	r6, r5
   d711a:	232d      	movs	r3, #45	; 0x2d
   d711c:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d7120:	4240      	negs	r0, r0
   d7122:	240a      	movs	r4, #10
      *tail-- = '\0';
   d7124:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d7128:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d712c:	4622      	mov	r2, r4
   d712e:	4601      	mov	r1, r0
   d7130:	a801      	add	r0, sp, #4
   d7132:	f003 fc87 	bl	daa44 <ldiv>
   d7136:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d7138:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d713a:	2b09      	cmp	r3, #9
   d713c:	bfcc      	ite	gt
   d713e:	2237      	movgt	r2, #55	; 0x37
   d7140:	2230      	movle	r2, #48	; 0x30
   d7142:	fa52 f383 	uxtab	r3, r2, r3
   d7146:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d714a:	f108 0801 	add.w	r8, r8, #1
   d714e:	2800      	cmp	r0, #0
   d7150:	d1ec      	bne.n	d712c <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d7152:	4642      	mov	r2, r8
   d7154:	1c79      	adds	r1, r7, #1
   d7156:	4630      	mov	r0, r6
   d7158:	f003 fc88 	bl	daa6c <memcpy>
      return str;
}
   d715c:	4628      	mov	r0, r5
   d715e:	b00c      	add	sp, #48	; 0x30
   d7160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d7164:	2a0a      	cmp	r2, #10
   d7166:	d0d5      	beq.n	d7114 <ltoa+0x18>
      if (uarg)
   d7168:	b118      	cbz	r0, d7172 <ltoa+0x76>
   d716a:	462e      	mov	r6, r5
   d716c:	e7da      	b.n	d7124 <ltoa+0x28>
   d716e:	240a      	movs	r4, #10
   d7170:	e7fa      	b.n	d7168 <ltoa+0x6c>
      else  *tail-- = '0';
   d7172:	2330      	movs	r3, #48	; 0x30
   d7174:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d7178:	462e      	mov	r6, r5
   d717a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d717e:	f04f 0802 	mov.w	r8, #2
   d7182:	e7e6      	b.n	d7152 <ltoa+0x56>

000d7184 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7184:	b510      	push	{r4, lr}
   d7186:	4604      	mov	r4, r0
{
	free(buffer);
   d7188:	6800      	ldr	r0, [r0, #0]
   d718a:	f7ff fde7 	bl	d6d5c <free>
}
   d718e:	4620      	mov	r0, r4
   d7190:	bd10      	pop	{r4, pc}

000d7192 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7192:	b510      	push	{r4, lr}
   d7194:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7196:	6800      	ldr	r0, [r0, #0]
   d7198:	b108      	cbz	r0, d719e <_ZN6String10invalidateEv+0xc>
   d719a:	f7ff fddf 	bl	d6d5c <free>
	buffer = NULL;
   d719e:	2300      	movs	r3, #0
	capacity = len = 0;
   d71a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d71a4:	6023      	str	r3, [r4, #0]
}
   d71a6:	bd10      	pop	{r4, pc}

000d71a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71a8:	b538      	push	{r3, r4, r5, lr}
   d71aa:	4604      	mov	r4, r0
   d71ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71ae:	6800      	ldr	r0, [r0, #0]
   d71b0:	3101      	adds	r1, #1
   d71b2:	f7ff fddb 	bl	d6d6c <realloc>
	if (newbuffer) {
   d71b6:	b110      	cbz	r0, d71be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d71bc:	2001      	movs	r0, #1
	}
	return 0;
}
   d71be:	bd38      	pop	{r3, r4, r5, pc}

000d71c0 <_ZN6String7reserveEj>:
{
   d71c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d71c2:	6803      	ldr	r3, [r0, #0]
{
   d71c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d71c6:	b123      	cbz	r3, d71d2 <_ZN6String7reserveEj+0x12>
   d71c8:	6843      	ldr	r3, [r0, #4]
   d71ca:	428b      	cmp	r3, r1
   d71cc:	d301      	bcc.n	d71d2 <_ZN6String7reserveEj+0x12>
   d71ce:	2001      	movs	r0, #1
}
   d71d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d71d2:	4620      	mov	r0, r4
   d71d4:	f7ff ffe8 	bl	d71a8 <_ZN6String12changeBufferEj>
   d71d8:	2800      	cmp	r0, #0
   d71da:	d0f9      	beq.n	d71d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d71dc:	68a3      	ldr	r3, [r4, #8]
   d71de:	2b00      	cmp	r3, #0
   d71e0:	d1f5      	bne.n	d71ce <_ZN6String7reserveEj+0xe>
   d71e2:	6822      	ldr	r2, [r4, #0]
   d71e4:	7013      	strb	r3, [r2, #0]
   d71e6:	e7f2      	b.n	d71ce <_ZN6String7reserveEj+0xe>

000d71e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d71e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d71ec:	4611      	mov	r1, r2
   d71ee:	9201      	str	r2, [sp, #4]
{
   d71f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d71f2:	f7ff ffe5 	bl	d71c0 <_ZN6String7reserveEj>
   d71f6:	9a01      	ldr	r2, [sp, #4]
   d71f8:	b928      	cbnz	r0, d7206 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d71fa:	4620      	mov	r0, r4
   d71fc:	f7ff ffc9 	bl	d7192 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7200:	4620      	mov	r0, r4
   d7202:	b003      	add	sp, #12
   d7204:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7206:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7208:	4629      	mov	r1, r5
   d720a:	6820      	ldr	r0, [r4, #0]
   d720c:	f003 fc2e 	bl	daa6c <memcpy>
	buffer[len] = 0;
   d7210:	6822      	ldr	r2, [r4, #0]
   d7212:	68a3      	ldr	r3, [r4, #8]
   d7214:	2100      	movs	r1, #0
   d7216:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7218:	e7f2      	b.n	d7200 <_ZN6String4copyEPKcj+0x18>

000d721a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d721a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d721c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d721e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7222:	4604      	mov	r4, r0
	len = 0;
   d7224:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7226:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7228:	b141      	cbz	r1, d723c <_ZN6StringC1EPKc+0x22>
   d722a:	4608      	mov	r0, r1
   d722c:	9101      	str	r1, [sp, #4]
   d722e:	f003 fc83 	bl	dab38 <strlen>
   d7232:	9901      	ldr	r1, [sp, #4]
   d7234:	4602      	mov	r2, r0
   d7236:	4620      	mov	r0, r4
   d7238:	f7ff ffd6 	bl	d71e8 <_ZN6String4copyEPKcj>
}
   d723c:	4620      	mov	r0, r4
   d723e:	b002      	add	sp, #8
   d7240:	bd10      	pop	{r4, pc}

000d7242 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7242:	b538      	push	{r3, r4, r5, lr}
   d7244:	4605      	mov	r5, r0
	if (buffer) {
   d7246:	6800      	ldr	r0, [r0, #0]
{
   d7248:	460c      	mov	r4, r1
	if (buffer) {
   d724a:	b168      	cbz	r0, d7268 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d724c:	686a      	ldr	r2, [r5, #4]
   d724e:	688b      	ldr	r3, [r1, #8]
   d7250:	429a      	cmp	r2, r3
   d7252:	d307      	bcc.n	d7264 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d7254:	6809      	ldr	r1, [r1, #0]
   d7256:	f003 fc67 	bl	dab28 <strcpy>
			len = rhs.len;
   d725a:	68a3      	ldr	r3, [r4, #8]
   d725c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d725e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d7260:	60a3      	str	r3, [r4, #8]
}
   d7262:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d7264:	f7ff fd7a 	bl	d6d5c <free>
	buffer = rhs.buffer;
   d7268:	6823      	ldr	r3, [r4, #0]
   d726a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d726c:	6863      	ldr	r3, [r4, #4]
   d726e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7270:	68a3      	ldr	r3, [r4, #8]
   d7272:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7274:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d7276:	e9c4 3300 	strd	r3, r3, [r4]
   d727a:	e7f1      	b.n	d7260 <_ZN6String4moveERS_+0x1e>

000d727c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d727c:	4288      	cmp	r0, r1
{
   d727e:	b510      	push	{r4, lr}
   d7280:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7282:	d001      	beq.n	d7288 <_ZN6StringaSEOS_+0xc>
   d7284:	f7ff ffdd 	bl	d7242 <_ZN6String4moveERS_>
	return *this;
}
   d7288:	4620      	mov	r0, r4
   d728a:	bd10      	pop	{r4, pc}

000d728c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d728c:	b513      	push	{r0, r1, r4, lr}
   d728e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7290:	b159      	cbz	r1, d72aa <_ZN6StringaSEPKc+0x1e>
   d7292:	4608      	mov	r0, r1
   d7294:	9101      	str	r1, [sp, #4]
   d7296:	f003 fc4f 	bl	dab38 <strlen>
   d729a:	9901      	ldr	r1, [sp, #4]
   d729c:	4602      	mov	r2, r0
   d729e:	4620      	mov	r0, r4
   d72a0:	f7ff ffa2 	bl	d71e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d72a4:	4620      	mov	r0, r4
   d72a6:	b002      	add	sp, #8
   d72a8:	bd10      	pop	{r4, pc}
	else invalidate();
   d72aa:	f7ff ff72 	bl	d7192 <_ZN6String10invalidateEv>
   d72ae:	e7f9      	b.n	d72a4 <_ZN6StringaSEPKc+0x18>

000d72b0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d72b0:	b558      	push	{r3, r4, r6, lr}
   d72b2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d72b4:	b12a      	cbz	r2, d72c2 <_ZNK6String8getBytesEPhjj+0x12>
   d72b6:	b121      	cbz	r1, d72c2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d72b8:	6884      	ldr	r4, [r0, #8]
   d72ba:	429c      	cmp	r4, r3
   d72bc:	d802      	bhi.n	d72c4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d72be:	2300      	movs	r3, #0
   d72c0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d72c2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d72c4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d72c6:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d72c8:	6801      	ldr	r1, [r0, #0]
   d72ca:	4294      	cmp	r4, r2
   d72cc:	bf28      	it	cs
   d72ce:	4614      	movcs	r4, r2
   d72d0:	4419      	add	r1, r3
   d72d2:	4622      	mov	r2, r4
   d72d4:	4630      	mov	r0, r6
   d72d6:	f003 fc6b 	bl	dabb0 <strncpy>
	buf[n] = 0;
   d72da:	2300      	movs	r3, #0
   d72dc:	5533      	strb	r3, [r6, r4]
   d72de:	e7f0      	b.n	d72c2 <_ZNK6String8getBytesEPhjj+0x12>

000d72e0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d72e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d72e2:	429a      	cmp	r2, r3
{
   d72e4:	460f      	mov	r7, r1
   d72e6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d72e8:	490c      	ldr	r1, [pc, #48]	; (d731c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d72ea:	bf88      	it	hi
   d72ec:	4613      	movhi	r3, r2
{
   d72ee:	4614      	mov	r4, r2
   d72f0:	4606      	mov	r6, r0
	if (left > right) {
   d72f2:	bf84      	itt	hi
   d72f4:	462c      	movhi	r4, r5
   d72f6:	461d      	movhi	r5, r3
	String out;
   d72f8:	f7ff ff8f 	bl	d721a <_ZN6StringC1EPKc>
	if (left > len) return out;
   d72fc:	68ba      	ldr	r2, [r7, #8]
   d72fe:	42a2      	cmp	r2, r4
   d7300:	d30a      	bcc.n	d7318 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d7302:	6839      	ldr	r1, [r7, #0]
   d7304:	42aa      	cmp	r2, r5
   d7306:	bf94      	ite	ls
   d7308:	ebc4 0202 	rsbls	r2, r4, r2
   d730c:	ebc4 0205 	rsbhi	r2, r4, r5
   d7310:	4421      	add	r1, r4
   d7312:	4630      	mov	r0, r6
   d7314:	f7ff ff68 	bl	d71e8 <_ZN6String4copyEPKcj>
	return out;
}
   d7318:	4630      	mov	r0, r6
   d731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d731c:	000dc981 	.word	0x000dc981

000d7320 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7320:	b510      	push	{r4, lr}
   d7322:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7324:	6800      	ldr	r0, [r0, #0]
   d7326:	b108      	cbz	r0, d732c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7328:	f7ff fadc 	bl	d68e4 <os_mutex_recursive_destroy>
    }
   d732c:	4620      	mov	r0, r4
   d732e:	bd10      	pop	{r4, pc}

000d7330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7330:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7332:	4c06      	ldr	r4, [pc, #24]	; (d734c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7334:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7336:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7338:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d733a:	f7ff facb 	bl	d68d4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d733e:	4620      	mov	r0, r4
   d7340:	4a03      	ldr	r2, [pc, #12]	; (d7350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7342:	4904      	ldr	r1, [pc, #16]	; (d7354 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7348:	f001 b89a 	b.w	d8480 <__aeabi_atexit>
   d734c:	2003e65c 	.word	0x2003e65c
   d7350:	2003e3a8 	.word	0x2003e3a8
   d7354:	000d7321 	.word	0x000d7321

000d7358 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d735a:	4606      	mov	r6, r0
   d735c:	460d      	mov	r5, r1
  size_t n = 0;
   d735e:	188f      	adds	r7, r1, r2
   d7360:	2400      	movs	r4, #0
  while (size--) {
   d7362:	42bd      	cmp	r5, r7
   d7364:	d00c      	beq.n	d7380 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7366:	6833      	ldr	r3, [r6, #0]
   d7368:	f815 1b01 	ldrb.w	r1, [r5], #1
   d736c:	689b      	ldr	r3, [r3, #8]
   d736e:	4630      	mov	r0, r6
   d7370:	4798      	blx	r3
     if (chunk>=0)
   d7372:	1e03      	subs	r3, r0, #0
   d7374:	db01      	blt.n	d737a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7376:	441c      	add	r4, r3
  while (size--) {
   d7378:	e7f3      	b.n	d7362 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d737a:	2c00      	cmp	r4, #0
   d737c:	bf08      	it	eq
   d737e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7380:	4620      	mov	r0, r4
   d7382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7384 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7384:	b513      	push	{r0, r1, r4, lr}
   d7386:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7388:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d738a:	b159      	cbz	r1, d73a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d738c:	9101      	str	r1, [sp, #4]
   d738e:	f003 fbd3 	bl	dab38 <strlen>
   d7392:	6823      	ldr	r3, [r4, #0]
   d7394:	9901      	ldr	r1, [sp, #4]
   d7396:	68db      	ldr	r3, [r3, #12]
   d7398:	4602      	mov	r2, r0
   d739a:	4620      	mov	r0, r4
    }
   d739c:	b002      	add	sp, #8
   d739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d73a2:	4718      	bx	r3
    }
   d73a4:	b002      	add	sp, #8
   d73a6:	bd10      	pop	{r4, pc}

000d73a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d73a8:	b508      	push	{r3, lr}
  return write(str);
   d73aa:	f7ff ffeb 	bl	d7384 <_ZN5Print5writeEPKc>
}
   d73ae:	bd08      	pop	{r3, pc}

000d73b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d73b0:	6803      	ldr	r3, [r0, #0]
   d73b2:	689b      	ldr	r3, [r3, #8]
   d73b4:	4718      	bx	r3

000d73b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d73b8:	210d      	movs	r1, #13
{
   d73ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d73bc:	f7ff fff8 	bl	d73b0 <_ZN5Print5printEc>
  n += print('\n');
   d73c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d73c2:	4604      	mov	r4, r0
  n += print('\n');
   d73c4:	4628      	mov	r0, r5
   d73c6:	f7ff fff3 	bl	d73b0 <_ZN5Print5printEc>
  return n;
}
   d73ca:	4420      	add	r0, r4
   d73cc:	bd38      	pop	{r3, r4, r5, pc}

000d73ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d73ce:	b538      	push	{r3, r4, r5, lr}
   d73d0:	4605      	mov	r5, r0
  return write(str);
   d73d2:	f7ff ffd7 	bl	d7384 <_ZN5Print5writeEPKc>
   d73d6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d73d8:	4628      	mov	r0, r5
   d73da:	f7ff ffec 	bl	d73b6 <_ZN5Print7printlnEv>
  return n;
}
   d73de:	4420      	add	r0, r4
   d73e0:	bd38      	pop	{r3, r4, r5, pc}

000d73e2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d73e2:	f7ff bff4 	b.w	d73ce <_ZN5Print7printlnEPKc>

000d73e6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d73e6:	b530      	push	{r4, r5, lr}
   d73e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d73ea:	2300      	movs	r3, #0
   d73ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d73f0:	2a01      	cmp	r2, #1
   d73f2:	bf98      	it	ls
   d73f4:	220a      	movls	r2, #10
   d73f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d73f8:	460d      	mov	r5, r1
   d73fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d73fe:	fb01 5312 	mls	r3, r1, r2, r5
   d7402:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7406:	2b09      	cmp	r3, #9
   d7408:	bf94      	ite	ls
   d740a:	3330      	addls	r3, #48	; 0x30
   d740c:	3337      	addhi	r3, #55	; 0x37
   d740e:	b2db      	uxtb	r3, r3
  } while(n);
   d7410:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7412:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7416:	d9ef      	bls.n	d73f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7418:	4621      	mov	r1, r4
   d741a:	f7ff ffb3 	bl	d7384 <_ZN5Print5writeEPKc>
}
   d741e:	b00b      	add	sp, #44	; 0x2c
   d7420:	bd30      	pop	{r4, r5, pc}

000d7422 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7426:	b086      	sub	sp, #24
   d7428:	af00      	add	r7, sp, #0
   d742a:	4605      	mov	r5, r0
   d742c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d742e:	1d38      	adds	r0, r7, #4
   d7430:	2114      	movs	r1, #20
{
   d7432:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7434:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7436:	f7ff fcb1 	bl	d6d9c <vsnprintf>

    if (n<bufsize)
   d743a:	2813      	cmp	r0, #19
   d743c:	d80e      	bhi.n	d745c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d743e:	1d39      	adds	r1, r7, #4
   d7440:	4628      	mov	r0, r5
   d7442:	f7ff ff9f 	bl	d7384 <_ZN5Print5writeEPKc>
   d7446:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7448:	b11e      	cbz	r6, d7452 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d744a:	4628      	mov	r0, r5
   d744c:	f7ff ffb3 	bl	d73b6 <_ZN5Print7printlnEv>
   d7450:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7452:	4620      	mov	r0, r4
   d7454:	3718      	adds	r7, #24
   d7456:	46bd      	mov	sp, r7
   d7458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d745c:	f100 0308 	add.w	r3, r0, #8
   d7460:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7464:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7466:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d746a:	4622      	mov	r2, r4
   d746c:	1c41      	adds	r1, r0, #1
   d746e:	683b      	ldr	r3, [r7, #0]
   d7470:	4668      	mov	r0, sp
   d7472:	f7ff fc93 	bl	d6d9c <vsnprintf>
  return write(str);
   d7476:	4669      	mov	r1, sp
   d7478:	4628      	mov	r0, r5
   d747a:	f7ff ff83 	bl	d7384 <_ZN5Print5writeEPKc>
   d747e:	4604      	mov	r4, r0
   d7480:	46c5      	mov	sp, r8
   d7482:	e7e1      	b.n	d7448 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7484 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7484:	4b01      	ldr	r3, [pc, #4]	; (d748c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7486:	4a02      	ldr	r2, [pc, #8]	; (d7490 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7488:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d748a:	4770      	bx	lr
   d748c:	2003e660 	.word	0x2003e660
   d7490:	000dd4f0 	.word	0x000dd4f0

000d7494 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7494:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7496:	2000      	movs	r0, #0
   d7498:	f7ff fc48 	bl	d6d2c <spark_sync_time_pending>
   d749c:	b128      	cbz	r0, d74aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d749e:	f7ff fc35 	bl	d6d0c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d74a2:	f080 0001 	eor.w	r0, r0, #1
   d74a6:	b2c0      	uxtb	r0, r0
    }
   d74a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d74aa:	2001      	movs	r0, #1
   d74ac:	e7fc      	b.n	d74a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d74b0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d74b0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d74b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d74b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d74bc:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d74be:	d411      	bmi.n	d74e4 <_ZN9TimeClass4zoneEf+0x34>
   d74c0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d74c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d74c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d74cc:	dc0a      	bgt.n	d74e4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d74ce:	eddf 7a06 	vldr	s15, [pc, #24]	; d74e8 <_ZN9TimeClass4zoneEf+0x38>
   d74d2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d74d6:	ee17 0a90 	vmov	r0, s15
   d74da:	f003 f8c5 	bl	da668 <__aeabi_f2lz>
   d74de:	4b03      	ldr	r3, [pc, #12]	; (d74ec <_ZN9TimeClass4zoneEf+0x3c>)
   d74e0:	e9c3 0100 	strd	r0, r1, [r3]
}
   d74e4:	bd08      	pop	{r3, pc}
   d74e6:	bf00      	nop
   d74e8:	45610000 	.word	0x45610000
   d74ec:	2003e670 	.word	0x2003e670

000d74f0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d74f0:	b530      	push	{r4, r5, lr}
   d74f2:	4604      	mov	r4, r0
    t += time_zone_cache;
   d74f4:	4818      	ldr	r0, [pc, #96]	; (d7558 <_ZN9TimeClass7timeStrEx+0x68>)
   d74f6:	e9d0 1000 	ldrd	r1, r0, [r0]
   d74fa:	1852      	adds	r2, r2, r1
   d74fc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7500:	4816      	ldr	r0, [pc, #88]	; (d755c <_ZN9TimeClass7timeStrEx+0x6c>)
   d7502:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7506:	1852      	adds	r2, r2, r1
{
   d7508:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d750a:	eb40 0303 	adc.w	r3, r0, r3
   d750e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7512:	2224      	movs	r2, #36	; 0x24
   d7514:	eb0d 0002 	add.w	r0, sp, r2
   d7518:	2100      	movs	r1, #0
   d751a:	f003 facf 	bl	daabc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d751e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7520:	a909      	add	r1, sp, #36	; 0x24
   d7522:	4668      	mov	r0, sp
   d7524:	f7ff fc5a 	bl	d6ddc <localtime_r>
    char ascstr[26] = {};
   d7528:	2216      	movs	r2, #22
   d752a:	4629      	mov	r1, r5
   d752c:	a803      	add	r0, sp, #12
   d752e:	9502      	str	r5, [sp, #8]
   d7530:	f003 fac4 	bl	daabc <memset>
    asctime_r(&calendar_time, ascstr);
   d7534:	a902      	add	r1, sp, #8
   d7536:	a809      	add	r0, sp, #36	; 0x24
   d7538:	f003 fa4c 	bl	da9d4 <asctime_r>
    int len = strlen(ascstr);
   d753c:	a802      	add	r0, sp, #8
   d753e:	f003 fafb 	bl	dab38 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7542:	ab12      	add	r3, sp, #72	; 0x48
   d7544:	4418      	add	r0, r3
    return String(ascstr);
   d7546:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7548:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d754c:	4620      	mov	r0, r4
   d754e:	f7ff fe64 	bl	d721a <_ZN6StringC1EPKc>
}
   d7552:	4620      	mov	r0, r4
   d7554:	b013      	add	sp, #76	; 0x4c
   d7556:	bd30      	pop	{r4, r5, pc}
   d7558:	2003e670 	.word	0x2003e670
   d755c:	2003e668 	.word	0x2003e668

000d7560 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7560:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7562:	2000      	movs	r0, #0
   d7564:	f7ff f9a6 	bl	d68b4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7568:	4604      	mov	r4, r0
   d756a:	b9a0      	cbnz	r0, d7596 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d756c:	f7ff fb42 	bl	d6bf4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7570:	2801      	cmp	r0, #1
   d7572:	d110      	bne.n	d7596 <_ZN9TimeClass7isValidEv+0x36>
   d7574:	4620      	mov	r0, r4
   d7576:	f7ff fb55 	bl	d6c24 <system_thread_get_state>
   d757a:	b960      	cbnz	r0, d7596 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d757c:	f7ff ff8a 	bl	d7494 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7580:	b910      	cbnz	r0, d7588 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7582:	f7ff fbbb 	bl	d6cfc <spark_process>
        while (_while() && !_condition()) {
   d7586:	e7f9      	b.n	d757c <_ZN9TimeClass7isValidEv+0x1c>
   d7588:	f7ff ff84 	bl	d7494 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d758c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7590:	2000      	movs	r0, #0
   d7592:	f7ff b98f 	b.w	d68b4 <hal_rtc_time_is_valid>
}
   d7596:	4620      	mov	r0, r4
   d7598:	bd10      	pop	{r4, pc}

000d759a <_ZN9TimeClass3nowEv>:
{
   d759a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d759c:	f7ff ffe0 	bl	d7560 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d75a0:	2210      	movs	r2, #16
   d75a2:	2100      	movs	r1, #0
   d75a4:	4668      	mov	r0, sp
   d75a6:	f003 fa89 	bl	daabc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d75aa:	2100      	movs	r1, #0
   d75ac:	4668      	mov	r0, sp
   d75ae:	f7ff f989 	bl	d68c4 <hal_rtc_get_time>
}
   d75b2:	9800      	ldr	r0, [sp, #0]
   d75b4:	b005      	add	sp, #20
   d75b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d75bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d75bc:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d75be:	681a      	ldr	r2, [r3, #0]
   d75c0:	4b02      	ldr	r3, [pc, #8]	; (d75cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d75c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d75c4:	4770      	bx	lr
   d75c6:	bf00      	nop
   d75c8:	2003e1c8 	.word	0x2003e1c8
   d75cc:	2003e664 	.word	0x2003e664

000d75d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d75d0:	2100      	movs	r1, #0
   d75d2:	f7ff bb1f 	b.w	d6c14 <system_delay_ms>

000d75d6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d75d6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d75d8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d75da:	4604      	mov	r4, r0
      if (_M_manager)
   d75dc:	b113      	cbz	r3, d75e4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d75de:	2203      	movs	r2, #3
   d75e0:	4601      	mov	r1, r0
   d75e2:	4798      	blx	r3
    }
   d75e4:	4620      	mov	r0, r4
   d75e6:	bd10      	pop	{r4, pc}

000d75e8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d75e8:	b510      	push	{r4, lr}
   d75ea:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75ec:	f7ff fff3 	bl	d75d6 <_ZNSt14_Function_baseD1Ev>
   d75f0:	4620      	mov	r0, r4
   d75f2:	bd10      	pop	{r4, pc}

000d75f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d75f4:	4803      	ldr	r0, [pc, #12]	; (d7604 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d75f6:	4a04      	ldr	r2, [pc, #16]	; (d7608 <_GLOBAL__sub_I_RGB+0x14>)
   d75f8:	4904      	ldr	r1, [pc, #16]	; (d760c <_GLOBAL__sub_I_RGB+0x18>)
   d75fa:	2300      	movs	r3, #0
   d75fc:	6083      	str	r3, [r0, #8]
   d75fe:	f000 bf3f 	b.w	d8480 <__aeabi_atexit>
   d7602:	bf00      	nop
   d7604:	2003e678 	.word	0x2003e678
   d7608:	2003e3a8 	.word	0x2003e3a8
   d760c:	000d75e9 	.word	0x000d75e9

000d7610 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7610:	4b01      	ldr	r3, [pc, #4]	; (d7618 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7612:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7614:	4770      	bx	lr
   d7616:	bf00      	nop
   d7618:	2003e1d0 	.word	0x2003e1d0

000d761c <serialEventRun>:
{
   d761c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d761e:	4b0b      	ldr	r3, [pc, #44]	; (d764c <serialEventRun+0x30>)
   d7620:	b143      	cbz	r3, d7634 <serialEventRun+0x18>
   d7622:	f000 f96b 	bl	d78fc <_Z16_fetch_usbserialv>
   d7626:	6803      	ldr	r3, [r0, #0]
   d7628:	691b      	ldr	r3, [r3, #16]
   d762a:	4798      	blx	r3
   d762c:	2800      	cmp	r0, #0
   d762e:	dd01      	ble.n	d7634 <serialEventRun+0x18>
        serialEvent();
   d7630:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7634:	4b06      	ldr	r3, [pc, #24]	; (d7650 <serialEventRun+0x34>)
   d7636:	b143      	cbz	r3, d764a <serialEventRun+0x2e>
   d7638:	f000 f9de 	bl	d79f8 <_Z22__fetch_global_Serial1v>
   d763c:	6803      	ldr	r3, [r0, #0]
   d763e:	691b      	ldr	r3, [r3, #16]
   d7640:	4798      	blx	r3
   d7642:	2800      	cmp	r0, #0
   d7644:	dd01      	ble.n	d764a <serialEventRun+0x2e>
        serialEvent1();
   d7646:	f3af 8000 	nop.w
}
   d764a:	bd08      	pop	{r3, pc}
	...

000d7654 <_post_loop>:
{
   d7654:	b508      	push	{r3, lr}
	serialEventRun();
   d7656:	f7ff ffe1 	bl	d761c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d765a:	f7ff f923 	bl	d68a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d765e:	4b01      	ldr	r3, [pc, #4]	; (d7664 <_post_loop+0x10>)
   d7660:	6018      	str	r0, [r3, #0]
}
   d7662:	bd08      	pop	{r3, pc}
   d7664:	2003e7d8 	.word	0x2003e7d8

000d7668 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7668:	4802      	ldr	r0, [pc, #8]	; (d7674 <_Z33system_initialize_user_backup_ramv+0xc>)
   d766a:	4a03      	ldr	r2, [pc, #12]	; (d7678 <_Z33system_initialize_user_backup_ramv+0x10>)
   d766c:	4903      	ldr	r1, [pc, #12]	; (d767c <_Z33system_initialize_user_backup_ramv+0x14>)
   d766e:	1a12      	subs	r2, r2, r0
   d7670:	f003 b9fc 	b.w	daa6c <memcpy>
   d7674:	2003f400 	.word	0x2003f400
   d7678:	2003f404 	.word	0x2003f404
   d767c:	000ddaa8 	.word	0x000ddaa8

000d7680 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7680:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7682:	2300      	movs	r3, #0
   d7684:	9300      	str	r3, [sp, #0]
   d7686:	461a      	mov	r2, r3
   d7688:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d768c:	f7ff fadc 	bl	d6c48 <system_ctrl_set_result>
}
   d7690:	b003      	add	sp, #12
   d7692:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7698 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7698:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d769a:	8843      	ldrh	r3, [r0, #2]
   d769c:	2b0a      	cmp	r3, #10
   d769e:	d008      	beq.n	d76b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d76a0:	2b50      	cmp	r3, #80	; 0x50
   d76a2:	d10b      	bne.n	d76bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d76a4:	4b09      	ldr	r3, [pc, #36]	; (d76cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d76a6:	681b      	ldr	r3, [r3, #0]
   d76a8:	b14b      	cbz	r3, d76be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d76aa:	b003      	add	sp, #12
   d76ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d76b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d76b2:	f7ff ffe5 	bl	d7680 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d76b6:	b003      	add	sp, #12
   d76b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76bc:	2300      	movs	r3, #0
   d76be:	9300      	str	r3, [sp, #0]
   d76c0:	461a      	mov	r2, r3
   d76c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d76c6:	f7ff fabf 	bl	d6c48 <system_ctrl_set_result>
}
   d76ca:	e7f4      	b.n	d76b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d76cc:	2003e68c 	.word	0x2003e68c

000d76d0 <module_user_init_hook>:
{
   d76d0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76d2:	4c12      	ldr	r4, [pc, #72]	; (d771c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d76d4:	4812      	ldr	r0, [pc, #72]	; (d7720 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76d6:	4d13      	ldr	r5, [pc, #76]	; (d7724 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d76d8:	2100      	movs	r1, #0
   d76da:	f7ff fb77 	bl	d6dcc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d76de:	6823      	ldr	r3, [r4, #0]
   d76e0:	42ab      	cmp	r3, r5
   d76e2:	4b11      	ldr	r3, [pc, #68]	; (d7728 <module_user_init_hook+0x58>)
   d76e4:	bf0c      	ite	eq
   d76e6:	2201      	moveq	r2, #1
   d76e8:	2200      	movne	r2, #0
   d76ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d76ec:	d002      	beq.n	d76f4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d76ee:	f7ff ffbb 	bl	d7668 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d76f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d76f4:	f7ff f8c6 	bl	d6884 <HAL_RNG_GetRandomNumber>
   d76f8:	4604      	mov	r4, r0
    srand(seed);
   d76fa:	f003 f9e7 	bl	daacc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d76fe:	4b0b      	ldr	r3, [pc, #44]	; (d772c <module_user_init_hook+0x5c>)
   d7700:	b113      	cbz	r3, d7708 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7702:	4620      	mov	r0, r4
   d7704:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7708:	2100      	movs	r1, #0
   d770a:	4808      	ldr	r0, [pc, #32]	; (d772c <module_user_init_hook+0x5c>)
   d770c:	f7ff fb16 	bl	d6d3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7714:	4806      	ldr	r0, [pc, #24]	; (d7730 <module_user_init_hook+0x60>)
   d7716:	2100      	movs	r1, #0
   d7718:	f7ff ba8c 	b.w	d6c34 <system_ctrl_set_app_request_handler>
   d771c:	2003f400 	.word	0x2003f400
   d7720:	000d7611 	.word	0x000d7611
   d7724:	9a271c1e 	.word	0x9a271c1e
   d7728:	2003e688 	.word	0x2003e688
   d772c:	00000000 	.word	0x00000000
   d7730:	000d7699 	.word	0x000d7699

000d7734 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7734:	4770      	bx	lr

000d7736 <_ZN9IPAddressD0Ev>:
   d7736:	b510      	push	{r4, lr}
   d7738:	2118      	movs	r1, #24
   d773a:	4604      	mov	r4, r0
   d773c:	f000 fea5 	bl	d848a <_ZdlPvj>
   d7740:	4620      	mov	r0, r4
   d7742:	bd10      	pop	{r4, pc}

000d7744 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7744:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7746:	7d03      	ldrb	r3, [r0, #20]
   d7748:	2b06      	cmp	r3, #6
{
   d774a:	b08d      	sub	sp, #52	; 0x34
   d774c:	460e      	mov	r6, r1
   d774e:	f100 0704 	add.w	r7, r0, #4
   d7752:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7756:	d012      	beq.n	d777e <_ZNK9IPAddress7printToER5Print+0x3a>
   d7758:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d775c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7760:	220a      	movs	r2, #10
   d7762:	4630      	mov	r0, r6
   d7764:	f7ff fe3f 	bl	d73e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7768:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d776a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d776c:	d019      	beq.n	d77a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d776e:	2c00      	cmp	r4, #0
   d7770:	d0f4      	beq.n	d775c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7772:	212e      	movs	r1, #46	; 0x2e
   d7774:	4630      	mov	r0, r6
   d7776:	f7ff fe1b 	bl	d73b0 <_ZN5Print5printEc>
   d777a:	4404      	add	r4, r0
   d777c:	e7ee      	b.n	d775c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d777e:	232f      	movs	r3, #47	; 0x2f
   d7780:	466a      	mov	r2, sp
   d7782:	4639      	mov	r1, r7
   d7784:	200a      	movs	r0, #10
		buf[0] = 0;
   d7786:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d778a:	f7ff f8b3 	bl	d68f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d778e:	4668      	mov	r0, sp
   d7790:	f003 f9d2 	bl	dab38 <strlen>
   d7794:	6833      	ldr	r3, [r6, #0]
   d7796:	4602      	mov	r2, r0
   d7798:	68db      	ldr	r3, [r3, #12]
   d779a:	4669      	mov	r1, sp
   d779c:	4630      	mov	r0, r6
   d779e:	4798      	blx	r3
   d77a0:	4604      	mov	r4, r0
    }
    return n;
}
   d77a2:	4620      	mov	r0, r4
   d77a4:	b00d      	add	sp, #52	; 0x34
   d77a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d77a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d77a8:	b510      	push	{r4, lr}
   d77aa:	4b05      	ldr	r3, [pc, #20]	; (d77c0 <_ZN9IPAddressC1Ev+0x18>)
   d77ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77ae:	2211      	movs	r2, #17
   d77b0:	f840 3b04 	str.w	r3, [r0], #4
   d77b4:	2100      	movs	r1, #0
   d77b6:	f003 f981 	bl	daabc <memset>
}
   d77ba:	4620      	mov	r0, r4
   d77bc:	bd10      	pop	{r4, pc}
   d77be:	bf00      	nop
   d77c0:	000dd518 	.word	0x000dd518

000d77c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d77c4:	4603      	mov	r3, r0
   d77c6:	4a07      	ldr	r2, [pc, #28]	; (d77e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d77c8:	b510      	push	{r4, lr}
   d77ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d77ce:	f101 0210 	add.w	r2, r1, #16
   d77d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d77d6:	f843 4b04 	str.w	r4, [r3], #4
   d77da:	4291      	cmp	r1, r2
   d77dc:	d1f9      	bne.n	d77d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d77de:	780a      	ldrb	r2, [r1, #0]
   d77e0:	701a      	strb	r2, [r3, #0]
}
   d77e2:	bd10      	pop	{r4, pc}
   d77e4:	000dd518 	.word	0x000dd518

000d77e8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d77e8:	7d03      	ldrb	r3, [r0, #20]
   d77ea:	2b04      	cmp	r3, #4
   d77ec:	d104      	bne.n	d77f8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d77ee:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d77f0:	3800      	subs	r0, #0
   d77f2:	bf18      	it	ne
   d77f4:	2001      	movne	r0, #1
   d77f6:	4770      	bx	lr
    } else if (version() == 6) {
   d77f8:	2b06      	cmp	r3, #6
   d77fa:	d107      	bne.n	d780c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d77fc:	6843      	ldr	r3, [r0, #4]
   d77fe:	b93b      	cbnz	r3, d7810 <_ZNK9IPAddresscvbEv+0x28>
   d7800:	6883      	ldr	r3, [r0, #8]
   d7802:	b92b      	cbnz	r3, d7810 <_ZNK9IPAddresscvbEv+0x28>
   d7804:	68c3      	ldr	r3, [r0, #12]
   d7806:	b91b      	cbnz	r3, d7810 <_ZNK9IPAddresscvbEv+0x28>
   d7808:	6900      	ldr	r0, [r0, #16]
   d780a:	e7f1      	b.n	d77f0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d780c:	2000      	movs	r0, #0
   d780e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7810:	2001      	movs	r0, #1
}
   d7812:	4770      	bx	lr

000d7814 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7814:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7816:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d781a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d781e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7822:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7826:	2304      	movs	r3, #4
   d7828:	6041      	str	r1, [r0, #4]
   d782a:	7503      	strb	r3, [r0, #20]
}
   d782c:	bd10      	pop	{r4, pc}

000d782e <_ZN9IPAddressaSEPKh>:
{
   d782e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7830:	78cb      	ldrb	r3, [r1, #3]
   d7832:	9300      	str	r3, [sp, #0]
   d7834:	788b      	ldrb	r3, [r1, #2]
   d7836:	784a      	ldrb	r2, [r1, #1]
   d7838:	7809      	ldrb	r1, [r1, #0]
   d783a:	f7ff ffeb 	bl	d7814 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d783e:	b002      	add	sp, #8
   d7840:	bd10      	pop	{r4, pc}

000d7842 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7842:	7441      	strb	r1, [r0, #17]
}
   d7844:	4770      	bx	lr

000d7846 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7846:	4770      	bx	lr

000d7848 <_ZN9USBSerial4readEv>:
{
   d7848:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d784a:	2100      	movs	r1, #0
   d784c:	7c00      	ldrb	r0, [r0, #16]
   d784e:	f7ff f9a9 	bl	d6ba4 <HAL_USB_USART_Receive_Data>
}
   d7852:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7856:	bd08      	pop	{r3, pc}

000d7858 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7858:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d785a:	2101      	movs	r1, #1
   d785c:	7c00      	ldrb	r0, [r0, #16]
   d785e:	f7ff f9a1 	bl	d6ba4 <HAL_USB_USART_Receive_Data>
}
   d7862:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7866:	bd08      	pop	{r3, pc}

000d7868 <_ZN9USBSerial17availableForWriteEv>:
{
   d7868:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d786a:	7c00      	ldrb	r0, [r0, #16]
   d786c:	f7ff f992 	bl	d6b94 <HAL_USB_USART_Available_Data_For_Write>
}
   d7870:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7874:	bd08      	pop	{r3, pc}

000d7876 <_ZN9USBSerial9availableEv>:
{
   d7876:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7878:	7c00      	ldrb	r0, [r0, #16]
   d787a:	f7ff f983 	bl	d6b84 <HAL_USB_USART_Available_Data>
}
   d787e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7882:	bd08      	pop	{r3, pc}

000d7884 <_ZN9USBSerial5writeEh>:
{
   d7884:	b513      	push	{r0, r1, r4, lr}
   d7886:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7888:	7c00      	ldrb	r0, [r0, #16]
{
   d788a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d788c:	f7ff f982 	bl	d6b94 <HAL_USB_USART_Available_Data_For_Write>
   d7890:	2800      	cmp	r0, #0
   d7892:	9901      	ldr	r1, [sp, #4]
   d7894:	dc01      	bgt.n	d789a <_ZN9USBSerial5writeEh+0x16>
   d7896:	7c60      	ldrb	r0, [r4, #17]
   d7898:	b120      	cbz	r0, d78a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d789a:	7c20      	ldrb	r0, [r4, #16]
   d789c:	f7ff f98a 	bl	d6bb4 <HAL_USB_USART_Send_Data>
   d78a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d78a4:	b002      	add	sp, #8
   d78a6:	bd10      	pop	{r4, pc}

000d78a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d78a8:	7c00      	ldrb	r0, [r0, #16]
   d78aa:	f7ff b98b 	b.w	d6bc4 <HAL_USB_USART_Flush_Data>

000d78ae <_ZN9USBSerialD0Ev>:
   d78ae:	b510      	push	{r4, lr}
   d78b0:	2114      	movs	r1, #20
   d78b2:	4604      	mov	r4, r0
   d78b4:	f000 fde9 	bl	d848a <_ZdlPvj>
   d78b8:	4620      	mov	r0, r4
   d78ba:	bd10      	pop	{r4, pc}

000d78bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d78bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d78be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78c2:	4604      	mov	r4, r0
   d78c4:	4608      	mov	r0, r1
   d78c6:	2100      	movs	r1, #0
   d78c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78cc:	4b04      	ldr	r3, [pc, #16]	; (d78e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d78ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d78d0:	2301      	movs	r3, #1
  _serial = serial;
   d78d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d78d6:	4611      	mov	r1, r2
   d78d8:	f7ff f944 	bl	d6b64 <HAL_USB_USART_Init>
}
   d78dc:	4620      	mov	r0, r4
   d78de:	bd10      	pop	{r4, pc}
   d78e0:	000dd52c 	.word	0x000dd52c

000d78e4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d78e4:	7c00      	ldrb	r0, [r0, #16]
   d78e6:	2200      	movs	r2, #0
   d78e8:	f7ff b944 	b.w	d6b74 <HAL_USB_USART_Begin>

000d78ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d78ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d78ee:	2214      	movs	r2, #20
{
   d78f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d78f2:	2100      	movs	r1, #0
   d78f4:	f003 f8e2 	bl	daabc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d78f8:	4620      	mov	r0, r4
   d78fa:	bd10      	pop	{r4, pc}

000d78fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d78fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d78fe:	4c10      	ldr	r4, [pc, #64]	; (d7940 <_Z16_fetch_usbserialv+0x44>)
{
   d7900:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7902:	a803      	add	r0, sp, #12
   d7904:	f7ff fff2 	bl	d78ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7908:	7821      	ldrb	r1, [r4, #0]
   d790a:	f3bf 8f5b 	dmb	ish
   d790e:	f011 0101 	ands.w	r1, r1, #1
   d7912:	d111      	bne.n	d7938 <_Z16_fetch_usbserialv+0x3c>
   d7914:	4620      	mov	r0, r4
   d7916:	9101      	str	r1, [sp, #4]
   d7918:	f7fc fbce 	bl	d40b8 <__cxa_guard_acquire>
   d791c:	9901      	ldr	r1, [sp, #4]
   d791e:	b158      	cbz	r0, d7938 <_Z16_fetch_usbserialv+0x3c>
   d7920:	aa03      	add	r2, sp, #12
   d7922:	4808      	ldr	r0, [pc, #32]	; (d7944 <_Z16_fetch_usbserialv+0x48>)
   d7924:	f7ff ffca 	bl	d78bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7928:	4620      	mov	r0, r4
   d792a:	f7fc fbca 	bl	d40c2 <__cxa_guard_release>
   d792e:	4a06      	ldr	r2, [pc, #24]	; (d7948 <_Z16_fetch_usbserialv+0x4c>)
   d7930:	4906      	ldr	r1, [pc, #24]	; (d794c <_Z16_fetch_usbserialv+0x50>)
   d7932:	4804      	ldr	r0, [pc, #16]	; (d7944 <_Z16_fetch_usbserialv+0x48>)
   d7934:	f000 fda4 	bl	d8480 <__aeabi_atexit>
	return _usbserial;
}
   d7938:	4802      	ldr	r0, [pc, #8]	; (d7944 <_Z16_fetch_usbserialv+0x48>)
   d793a:	b008      	add	sp, #32
   d793c:	bd10      	pop	{r4, pc}
   d793e:	bf00      	nop
   d7940:	2003e690 	.word	0x2003e690
   d7944:	2003e694 	.word	0x2003e694
   d7948:	2003e3a8 	.word	0x2003e3a8
   d794c:	000d7847 	.word	0x000d7847

000d7950 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7950:	4770      	bx	lr

000d7952 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7952:	7441      	strb	r1, [r0, #17]
}
   d7954:	4770      	bx	lr

000d7956 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7956:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7958:	7c00      	ldrb	r0, [r0, #16]
   d795a:	f7ff f81b 	bl	d6994 <hal_usart_available_data_for_write>
}
   d795e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7962:	bd08      	pop	{r3, pc}

000d7964 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7964:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7966:	7c00      	ldrb	r0, [r0, #16]
   d7968:	f7fe ffec 	bl	d6944 <hal_usart_available>
}
   d796c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7970:	bd08      	pop	{r3, pc}

000d7972 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7972:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7974:	7c00      	ldrb	r0, [r0, #16]
   d7976:	f7fe fff5 	bl	d6964 <hal_usart_peek>
}
   d797a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d797e:	bd08      	pop	{r3, pc}

000d7980 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7980:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7982:	7c00      	ldrb	r0, [r0, #16]
   d7984:	f7fe ffe6 	bl	d6954 <hal_usart_read>
}
   d7988:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d798c:	bd08      	pop	{r3, pc}

000d798e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d798e:	7c00      	ldrb	r0, [r0, #16]
   d7990:	f7fe bff0 	b.w	d6974 <hal_usart_flush>

000d7994 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7994:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7996:	7c45      	ldrb	r5, [r0, #17]
{
   d7998:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d799a:	b12d      	cbz	r5, d79a8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d799c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d799e:	b003      	add	sp, #12
   d79a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d79a4:	f7fe bfc6 	b.w	d6934 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79a8:	7c00      	ldrb	r0, [r0, #16]
   d79aa:	9101      	str	r1, [sp, #4]
   d79ac:	f7fe fff2 	bl	d6994 <hal_usart_available_data_for_write>
   d79b0:	2800      	cmp	r0, #0
   d79b2:	9901      	ldr	r1, [sp, #4]
   d79b4:	dcf2      	bgt.n	d799c <_ZN11USARTSerial5writeEh+0x8>
}
   d79b6:	4628      	mov	r0, r5
   d79b8:	b003      	add	sp, #12
   d79ba:	bd30      	pop	{r4, r5, pc}

000d79bc <_ZN11USARTSerialD0Ev>:
   d79bc:	b510      	push	{r4, lr}
   d79be:	2114      	movs	r1, #20
   d79c0:	4604      	mov	r4, r0
   d79c2:	f000 fd62 	bl	d848a <_ZdlPvj>
   d79c6:	4620      	mov	r0, r4
   d79c8:	bd10      	pop	{r4, pc}
	...

000d79cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d79cc:	b510      	push	{r4, lr}
   d79ce:	f04f 0c00 	mov.w	ip, #0
   d79d2:	4604      	mov	r4, r0
   d79d4:	4608      	mov	r0, r1
   d79d6:	4611      	mov	r1, r2
   d79d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d79dc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d79e0:	4a04      	ldr	r2, [pc, #16]	; (d79f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d79e2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d79e4:	2201      	movs	r2, #1
  _serial = serial;
   d79e6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d79e8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d79ea:	461a      	mov	r2, r3
   d79ec:	f7fe ff9a 	bl	d6924 <hal_usart_init>
}
   d79f0:	4620      	mov	r0, r4
   d79f2:	bd10      	pop	{r4, pc}
   d79f4:	000dd55c 	.word	0x000dd55c

000d79f8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d79f8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d79fa:	4c0e      	ldr	r4, [pc, #56]	; (d7a34 <_Z22__fetch_global_Serial1v+0x3c>)
   d79fc:	7821      	ldrb	r1, [r4, #0]
   d79fe:	f3bf 8f5b 	dmb	ish
   d7a02:	f011 0101 	ands.w	r1, r1, #1
   d7a06:	d112      	bne.n	d7a2e <_Z22__fetch_global_Serial1v+0x36>
   d7a08:	4620      	mov	r0, r4
   d7a0a:	9101      	str	r1, [sp, #4]
   d7a0c:	f7fc fb54 	bl	d40b8 <__cxa_guard_acquire>
   d7a10:	9901      	ldr	r1, [sp, #4]
   d7a12:	b160      	cbz	r0, d7a2e <_Z22__fetch_global_Serial1v+0x36>
   d7a14:	4a08      	ldr	r2, [pc, #32]	; (d7a38 <_Z22__fetch_global_Serial1v+0x40>)
   d7a16:	4b09      	ldr	r3, [pc, #36]	; (d7a3c <_Z22__fetch_global_Serial1v+0x44>)
   d7a18:	4809      	ldr	r0, [pc, #36]	; (d7a40 <_Z22__fetch_global_Serial1v+0x48>)
   d7a1a:	f7ff ffd7 	bl	d79cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7a1e:	4620      	mov	r0, r4
   d7a20:	f7fc fb4f 	bl	d40c2 <__cxa_guard_release>
   d7a24:	4a07      	ldr	r2, [pc, #28]	; (d7a44 <_Z22__fetch_global_Serial1v+0x4c>)
   d7a26:	4908      	ldr	r1, [pc, #32]	; (d7a48 <_Z22__fetch_global_Serial1v+0x50>)
   d7a28:	4805      	ldr	r0, [pc, #20]	; (d7a40 <_Z22__fetch_global_Serial1v+0x48>)
   d7a2a:	f000 fd29 	bl	d8480 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7a2e:	4804      	ldr	r0, [pc, #16]	; (d7a40 <_Z22__fetch_global_Serial1v+0x48>)
   d7a30:	b002      	add	sp, #8
   d7a32:	bd10      	pop	{r4, pc}
   d7a34:	2003e6a8 	.word	0x2003e6a8
   d7a38:	2003e6ac 	.word	0x2003e6ac
   d7a3c:	2003e730 	.word	0x2003e730
   d7a40:	2003e7b4 	.word	0x2003e7b4
   d7a44:	2003e3a8 	.word	0x2003e3a8
   d7a48:	000d7951 	.word	0x000d7951

000d7a4c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7a4c:	4770      	bx	lr

000d7a4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a50:	4606      	mov	r6, r0
   d7a52:	4615      	mov	r5, r2
   d7a54:	460c      	mov	r4, r1
   d7a56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a58:	42bc      	cmp	r4, r7
   d7a5a:	d006      	beq.n	d7a6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a5c:	6833      	ldr	r3, [r6, #0]
   d7a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a62:	689b      	ldr	r3, [r3, #8]
   d7a64:	4630      	mov	r0, r6
   d7a66:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7a68:	e7f6      	b.n	d7a58 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7a6a:	4628      	mov	r0, r5
   d7a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a6e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7a6e:	7c00      	ldrb	r0, [r0, #16]
   d7a70:	2200      	movs	r2, #0
   d7a72:	f7fe bfaf 	b.w	d69d4 <hal_i2c_write>

000d7a76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7a76:	7c00      	ldrb	r0, [r0, #16]
   d7a78:	2100      	movs	r1, #0
   d7a7a:	f7fe bfb3 	b.w	d69e4 <hal_i2c_available>

000d7a7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7a7e:	7c00      	ldrb	r0, [r0, #16]
   d7a80:	2100      	movs	r1, #0
   d7a82:	f7fe bfb7 	b.w	d69f4 <hal_i2c_read>

000d7a86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7a86:	7c00      	ldrb	r0, [r0, #16]
   d7a88:	2100      	movs	r1, #0
   d7a8a:	f7fe bfbb 	b.w	d6a04 <hal_i2c_peek>

000d7a8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7a8e:	7c00      	ldrb	r0, [r0, #16]
   d7a90:	2100      	movs	r1, #0
   d7a92:	f7fe bfbf 	b.w	d6a14 <hal_i2c_flush>

000d7a96 <_ZN7TwoWireD0Ev>:
   d7a96:	b510      	push	{r4, lr}
   d7a98:	2114      	movs	r1, #20
   d7a9a:	4604      	mov	r4, r0
   d7a9c:	f000 fcf5 	bl	d848a <_ZdlPvj>
   d7aa0:	4620      	mov	r0, r4
   d7aa2:	bd10      	pop	{r4, pc}

000d7aa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7aa4:	b510      	push	{r4, lr}
   d7aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7aaa:	4604      	mov	r4, r0
   d7aac:	4608      	mov	r0, r1
   d7aae:	2100      	movs	r1, #0
   d7ab0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7ab4:	4b03      	ldr	r3, [pc, #12]	; (d7ac4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7ab6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7ab8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7aba:	4611      	mov	r1, r2
   d7abc:	f7fe ffba 	bl	d6a34 <hal_i2c_init>
}
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	bd10      	pop	{r4, pc}
   d7ac4:	000dd58c 	.word	0x000dd58c

000d7ac8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7ac8:	2300      	movs	r3, #0
   d7aca:	7c00      	ldrb	r0, [r0, #16]
   d7acc:	461a      	mov	r2, r3
   d7ace:	4619      	mov	r1, r3
   d7ad0:	f7fe bf68 	b.w	d69a4 <hal_i2c_begin>

000d7ad4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7ad6:	2200      	movs	r2, #0
   d7ad8:	2314      	movs	r3, #20
   d7ada:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7ade:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7ae2:	780b      	ldrb	r3, [r1, #0]
   d7ae4:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ae8:	684b      	ldr	r3, [r1, #4]
   d7aea:	9303      	str	r3, [sp, #12]
   d7aec:	68cb      	ldr	r3, [r1, #12]
   d7aee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7af0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7af2:	7a0b      	ldrb	r3, [r1, #8]
   d7af4:	9305      	str	r3, [sp, #20]
   d7af6:	a901      	add	r1, sp, #4
   d7af8:	f7fe ffa4 	bl	d6a44 <hal_i2c_request_ex>
}
   d7afc:	b007      	add	sp, #28
   d7afe:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b02 <_ZN7TwoWire11requestFromEhjh>:
{
   d7b02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7b04:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7b06:	f88d 1000 	strb.w	r1, [sp]
   d7b0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7b0e:	9103      	str	r1, [sp, #12]
   d7b10:	bf18      	it	ne
   d7b12:	2301      	movne	r3, #1
   d7b14:	4669      	mov	r1, sp
    size_ = size;
   d7b16:	9201      	str	r2, [sp, #4]
   d7b18:	f88d 3008 	strb.w	r3, [sp, #8]
   d7b1c:	f7ff ffda 	bl	d7ad4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7b20:	b005      	add	sp, #20
   d7b22:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b26 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7b26:	2301      	movs	r3, #1
   d7b28:	f7ff bfeb 	b.w	d7b02 <_ZN7TwoWire11requestFromEhjh>

000d7b2c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7b2c:	7c00      	ldrb	r0, [r0, #16]
   d7b2e:	2200      	movs	r2, #0
   d7b30:	f7fe bf40 	b.w	d69b4 <hal_i2c_begin_transmission>

000d7b34 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7b34:	b2c9      	uxtb	r1, r1
   d7b36:	f7ff bff9 	b.w	d7b2c <_ZN7TwoWire17beginTransmissionEh>

000d7b3a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7b3a:	7c00      	ldrb	r0, [r0, #16]
   d7b3c:	2200      	movs	r2, #0
   d7b3e:	f7fe bf41 	b.w	d69c4 <hal_i2c_end_transmission>

000d7b42 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7b42:	2101      	movs	r1, #1
   d7b44:	f7ff bff9 	b.w	d7b3a <_ZN7TwoWire15endTransmissionEh>

000d7b48 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7b48:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7b4a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7b4c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7b50:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7b52:	2201      	movs	r2, #1
   d7b54:	f04f 33ff 	mov.w	r3, #4294967295
   d7b58:	f10d 0107 	add.w	r1, sp, #7
   d7b5c:	47a0      	blx	r4
}
   d7b5e:	b002      	add	sp, #8
   d7b60:	bd10      	pop	{r4, pc}

000d7b62 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7b62:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7b64:	6803      	ldr	r3, [r0, #0]
   d7b66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7b68:	f04f 33ff 	mov.w	r3, #4294967295
   d7b6c:	46a4      	mov	ip, r4
}
   d7b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7b72:	4760      	bx	ip

000d7b74 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7b74:	b513      	push	{r0, r1, r4, lr}
   d7b76:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7b78:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7b7a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7b7e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7b80:	f10d 0107 	add.w	r1, sp, #7
   d7b84:	2201      	movs	r2, #1
   d7b86:	47a0      	blx	r4
}
   d7b88:	b002      	add	sp, #8
   d7b8a:	bd10      	pop	{r4, pc}

000d7b8c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7b8c:	4770      	bx	lr

000d7b8e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7b8e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7b90:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7b96:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7b98:	da10      	bge.n	d7bbc <_ZN9TCPClient9connectedEv+0x2e>
   d7b9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ba2:	429a      	cmp	r2, r3
   d7ba4:	d10a      	bne.n	d7bbc <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7ba6:	6803      	ldr	r3, [r0, #0]
   d7ba8:	691b      	ldr	r3, [r3, #16]
   d7baa:	4798      	blx	r3
        if (!rv) {
   d7bac:	4604      	mov	r4, r0
   d7bae:	b928      	cbnz	r0, d7bbc <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7bb0:	682b      	ldr	r3, [r5, #0]
   d7bb2:	4628      	mov	r0, r5
   d7bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7bb6:	4798      	blx	r3
        rv = available();
   d7bb8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7bba:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7bbc:	2001      	movs	r0, #1
   d7bbe:	e7fc      	b.n	d7bba <_ZN9TCPClient9connectedEv+0x2c>

000d7bc0 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7bc0:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7bc2:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7bc4:	43c0      	mvns	r0, r0
   d7bc6:	0fc0      	lsrs	r0, r0, #31
   d7bc8:	4770      	bx	lr

000d7bca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7bca:	4770      	bx	lr

000d7bcc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7bcc:	4b06      	ldr	r3, [pc, #24]	; (d7be8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7bce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7bd0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7bd2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7bd6:	d005      	beq.n	d7be4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7bd8:	4608      	mov	r0, r1
   d7bda:	f000 fc5b 	bl	d8494 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7bde:	2800      	cmp	r0, #0
	return nullptr;
   d7be0:	bf08      	it	eq
   d7be2:	2400      	moveq	r4, #0
      }
   d7be4:	4620      	mov	r0, r4
   d7be6:	bd10      	pop	{r4, pc}
   d7be8:	000dd4e8 	.word	0x000dd4e8

000d7bec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7bec:	b510      	push	{r4, lr}
   d7bee:	21ac      	movs	r1, #172	; 0xac
   d7bf0:	4604      	mov	r4, r0
   d7bf2:	f000 fc4a 	bl	d848a <_ZdlPvj>
   d7bf6:	4620      	mov	r0, r4
   d7bf8:	bd10      	pop	{r4, pc}

000d7bfa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7bfa:	f7fc ba50 	b.w	d409e <_ZdlPv>

000d7bfe <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7c02:	f04f 0800 	mov.w	r8, #0
   d7c06:	b086      	sub	sp, #24
   d7c08:	461d      	mov	r5, r3
   d7c0a:	f8c0 8004 	str.w	r8, [r0, #4]
   d7c0e:	4604      	mov	r4, r0
   d7c10:	460e      	mov	r6, r1
   d7c12:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7c14:	4641      	mov	r1, r8
   d7c16:	2210      	movs	r2, #16
   d7c18:	a802      	add	r0, sp, #8
   d7c1a:	f002 ff4f 	bl	daabc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c1e:	1c6b      	adds	r3, r5, #1
   d7c20:	d009      	beq.n	d7c36 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7c26:	fbb5 f3f0 	udiv	r3, r5, r0
   d7c2a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7c2e:	fb00 5313 	mls	r3, r0, r3, r5
   d7c32:	4358      	muls	r0, r3
   d7c34:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7c36:	6960      	ldr	r0, [r4, #20]
   d7c38:	2310      	movs	r3, #16
   d7c3a:	9300      	str	r3, [sp, #0]
   d7c3c:	6800      	ldr	r0, [r0, #0]
   d7c3e:	ab02      	add	r3, sp, #8
   d7c40:	f241 0205 	movw	r2, #4101	; 0x1005
   d7c44:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c48:	f7fe ff04 	bl	d6a54 <sock_setsockopt>
    if (ret < 0) {
   d7c4c:	2800      	cmp	r0, #0
   d7c4e:	da07      	bge.n	d7c60 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7c50:	f7ff f8b4 	bl	d6dbc <__errno>
   d7c54:	6803      	ldr	r3, [r0, #0]
   d7c56:	6063      	str	r3, [r4, #4]
        return 0;
   d7c58:	2000      	movs	r0, #0
}
   d7c5a:	b006      	add	sp, #24
   d7c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7c60:	6960      	ldr	r0, [r4, #20]
   d7c62:	2300      	movs	r3, #0
   d7c64:	6800      	ldr	r0, [r0, #0]
   d7c66:	463a      	mov	r2, r7
   d7c68:	4631      	mov	r1, r6
   d7c6a:	f7fe ff13 	bl	d6a94 <sock_send>
    if (ret < 0) {
   d7c6e:	1e03      	subs	r3, r0, #0
   d7c70:	dbee      	blt.n	d7c50 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7c72:	4618      	mov	r0, r3
   d7c74:	e7f1      	b.n	d7c5a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7c78 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7c78:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7c7a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7c7c:	4b05      	ldr	r3, [pc, #20]	; (d7c94 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7c7e:	4604      	mov	r4, r0
   d7c80:	358c      	adds	r5, #140	; 0x8c
   d7c82:	f844 3b04 	str.w	r3, [r4], #4
   d7c86:	4606      	mov	r6, r0
   d7c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c8c:	682b      	ldr	r3, [r5, #0]
   d7c8e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7c90:	4630      	mov	r0, r6
   d7c92:	bd70      	pop	{r4, r5, r6, pc}
   d7c94:	000dd518 	.word	0x000dd518

000d7c98 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7c98:	b510      	push	{r4, lr}
   d7c9a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7c9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ca0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ca4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7ca6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7ca8:	d005      	beq.n	d7cb6 <_ZN9TCPClient4peekEv+0x1e>
   d7caa:	6963      	ldr	r3, [r4, #20]
   d7cac:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7cb0:	4413      	add	r3, r2
   d7cb2:	7918      	ldrb	r0, [r3, #4]
}
   d7cb4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7cb6:	6803      	ldr	r3, [r0, #0]
   d7cb8:	691b      	ldr	r3, [r3, #16]
   d7cba:	4798      	blx	r3
   d7cbc:	2800      	cmp	r0, #0
   d7cbe:	d1f4      	bne.n	d7caa <_ZN9TCPClient4peekEv+0x12>
   d7cc0:	f04f 30ff 	mov.w	r0, #4294967295
   d7cc4:	e7f6      	b.n	d7cb4 <_ZN9TCPClient4peekEv+0x1c>

000d7cc6 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7cc6:	b510      	push	{r4, lr}
   d7cc8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7cce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7cd2:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7cd4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cd6:	d008      	beq.n	d7cea <_ZN9TCPClient4readEv+0x24>
   d7cd8:	6963      	ldr	r3, [r4, #20]
   d7cda:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7cde:	1c51      	adds	r1, r2, #1
   d7ce0:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7ce4:	4413      	add	r3, r2
   d7ce6:	7918      	ldrb	r0, [r3, #4]
}
   d7ce8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7cea:	6803      	ldr	r3, [r0, #0]
   d7cec:	691b      	ldr	r3, [r3, #16]
   d7cee:	4798      	blx	r3
   d7cf0:	2800      	cmp	r0, #0
   d7cf2:	d1f1      	bne.n	d7cd8 <_ZN9TCPClient4readEv+0x12>
   d7cf4:	f04f 30ff 	mov.w	r0, #4294967295
   d7cf8:	e7f6      	b.n	d7ce8 <_ZN9TCPClient4readEv+0x22>

000d7cfa <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cfc:	6943      	ldr	r3, [r0, #20]
   d7cfe:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7d00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d08:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7d0a:	4605      	mov	r5, r0
   d7d0c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7d0e:	d016      	beq.n	d7d3e <_ZN9TCPClient4readEPhj+0x44>
   d7d10:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7d12:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7d16:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7d1a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7d1c:	42bc      	cmp	r4, r7
   d7d1e:	bf28      	it	cs
   d7d20:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7d22:	3304      	adds	r3, #4
   d7d24:	4622      	mov	r2, r4
   d7d26:	4419      	add	r1, r3
   d7d28:	4630      	mov	r0, r6
   d7d2a:	f002 fe9f 	bl	daa6c <memcpy>
   d7d2e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7d30:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7d34:	4423      	add	r3, r4
   d7d36:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7d3e:	6803      	ldr	r3, [r0, #0]
   d7d40:	691b      	ldr	r3, [r3, #16]
   d7d42:	4798      	blx	r3
   d7d44:	2800      	cmp	r0, #0
   d7d46:	d1e3      	bne.n	d7d10 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7d48:	f04f 34ff 	mov.w	r4, #4294967295
   d7d4c:	e7f5      	b.n	d7d3a <_ZN9TCPClient4readEPhj+0x40>
	...

000d7d50 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d54:	4698      	mov	r8, r3
    stop();
   d7d56:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7d58:	b093      	sub	sp, #76	; 0x4c
   d7d5a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7d5c:	2400      	movs	r4, #0
    stop();
   d7d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7d60:	4606      	mov	r6, r0
   d7d62:	4617      	mov	r7, r2
    stop();
   d7d64:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7d66:	4628      	mov	r0, r5
   d7d68:	466b      	mov	r3, sp
   d7d6a:	4622      	mov	r2, r4
   d7d6c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7d6e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7d70:	f7fe fd40 	bl	d67f4 <netdb_getaddrinfo>
   d7d74:	4605      	mov	r5, r0
   d7d76:	2800      	cmp	r0, #0
   d7d78:	d163      	bne.n	d7e42 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7d7a:	9b00      	ldr	r3, [sp, #0]
   d7d7c:	2b00      	cmp	r3, #0
   d7d7e:	d04b      	beq.n	d7e18 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7d80:	695b      	ldr	r3, [r3, #20]
   d7d82:	2b00      	cmp	r3, #0
   d7d84:	d048      	beq.n	d7e18 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7d86:	a806      	add	r0, sp, #24
   d7d88:	f7ff fd0e 	bl	d77a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7d8c:	9b00      	ldr	r3, [sp, #0]
   d7d8e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7d90:	7863      	ldrb	r3, [r4, #1]
   d7d92:	2b02      	cmp	r3, #2
   d7d94:	d104      	bne.n	d7da0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7d96:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7d98:	a806      	add	r0, sp, #24
   d7d9a:	f7ff fd48 	bl	d782e <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d7d9e:	e026      	b.n	d7dee <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7da0:	2b0a      	cmp	r3, #10
   d7da2:	d124      	bne.n	d7dee <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7da4:	2211      	movs	r2, #17
   d7da6:	4629      	mov	r1, r5
   d7da8:	a801      	add	r0, sp, #4
   d7daa:	f002 fe87 	bl	daabc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7dae:	68a3      	ldr	r3, [r4, #8]
   d7db0:	2b00      	cmp	r3, #0
   d7db2:	d038      	beq.n	d7e26 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7db4:	f104 0308 	add.w	r3, r4, #8
   d7db8:	f10d 0c04 	add.w	ip, sp, #4
   d7dbc:	3418      	adds	r4, #24
   d7dbe:	6818      	ldr	r0, [r3, #0]
   d7dc0:	6859      	ldr	r1, [r3, #4]
   d7dc2:	4662      	mov	r2, ip
   d7dc4:	c203      	stmia	r2!, {r0, r1}
   d7dc6:	3308      	adds	r3, #8
   d7dc8:	42a3      	cmp	r3, r4
   d7dca:	4694      	mov	ip, r2
   d7dcc:	d1f7      	bne.n	d7dbe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7dce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7dd0:	a901      	add	r1, sp, #4
   d7dd2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7dd4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7dd8:	f7ff fcf4 	bl	d77c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ddc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7de0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7de4:	ac07      	add	r4, sp, #28
   d7de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7de8:	f8dc 3000 	ldr.w	r3, [ip]
   d7dec:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7dee:	a806      	add	r0, sp, #24
   d7df0:	f7ff fcfa 	bl	d77e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7df4:	b180      	cbz	r0, d7e18 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7df6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7df8:	ad07      	add	r5, sp, #28
   d7dfa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7dfe:	4b12      	ldr	r3, [pc, #72]	; (d7e48 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7e00:	930c      	str	r3, [sp, #48]	; 0x30
   d7e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e04:	ac0d      	add	r4, sp, #52	; 0x34
   d7e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e08:	682b      	ldr	r3, [r5, #0]
   d7e0a:	7023      	strb	r3, [r4, #0]
   d7e0c:	463a      	mov	r2, r7
   d7e0e:	4643      	mov	r3, r8
   d7e10:	a90c      	add	r1, sp, #48	; 0x30
   d7e12:	4630      	mov	r0, r6
   d7e14:	47c8      	blx	r9
   d7e16:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7e18:	9800      	ldr	r0, [sp, #0]
   d7e1a:	f7fe fce3 	bl	d67e4 <netdb_freeaddrinfo>
}
   d7e1e:	4628      	mov	r0, r5
   d7e20:	b013      	add	sp, #76	; 0x4c
   d7e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7e26:	68e3      	ldr	r3, [r4, #12]
   d7e28:	2b00      	cmp	r3, #0
   d7e2a:	d1c3      	bne.n	d7db4 <_ZN9TCPClient7connectEPKctm+0x64>
   d7e2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7e30:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7e34:	f7fe fd66 	bl	d6904 <inet_htonl>
   d7e38:	4581      	cmp	r9, r0
   d7e3a:	d1bb      	bne.n	d7db4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7e3c:	f104 0114 	add.w	r1, r4, #20
   d7e40:	e7aa      	b.n	d7d98 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7e42:	4625      	mov	r5, r4
   d7e44:	e7e8      	b.n	d7e18 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7e46:	bf00      	nop
   d7e48:	000dd518 	.word	0x000dd518

000d7e4c <_ZN9TCPClient12flush_bufferEv>:
   d7e4c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7e4e:	2300      	movs	r3, #0
   d7e50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7e54:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7e56:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7e5a:	4770      	bx	lr

000d7e5c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e60:	461f      	mov	r7, r3
    stop();
   d7e62:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e64:	460c      	mov	r4, r1
    stop();
   d7e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e68:	b08a      	sub	sp, #40	; 0x28
   d7e6a:	4605      	mov	r5, r0
   d7e6c:	4616      	mov	r6, r2
    stop();
   d7e6e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7e70:	7d23      	ldrb	r3, [r4, #20]
   d7e72:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7e76:	2b04      	cmp	r3, #4
   d7e78:	bf0c      	ite	eq
   d7e7a:	2002      	moveq	r0, #2
   d7e7c:	200a      	movne	r0, #10
   d7e7e:	2206      	movs	r2, #6
   d7e80:	2101      	movs	r1, #1
   d7e82:	f7fe fe0f 	bl	d6aa4 <sock_socket>
   d7e86:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7e8a:	696b      	ldr	r3, [r5, #20]
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	2b00      	cmp	r3, #0
   d7e90:	da08      	bge.n	d7ea4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7e92:	682b      	ldr	r3, [r5, #0]
   d7e94:	4628      	mov	r0, r5
   d7e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7e98:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7e9a:	4798      	blx	r3
}
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	b00a      	add	sp, #40	; 0x28
   d7ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7ea4:	4628      	mov	r0, r5
   d7ea6:	f7ff ffd1 	bl	d7e4c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7eaa:	b1b7      	cbz	r7, d7eda <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7eac:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7eae:	a903      	add	r1, sp, #12
   d7eb0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7eb2:	9303      	str	r3, [sp, #12]
   d7eb4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7eb8:	f7fe fcdc 	bl	d6874 <if_index_to_name>
   d7ebc:	2800      	cmp	r0, #0
   d7ebe:	d1e8      	bne.n	d7e92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7ec0:	6968      	ldr	r0, [r5, #20]
   d7ec2:	2306      	movs	r3, #6
   d7ec4:	9300      	str	r3, [sp, #0]
   d7ec6:	6800      	ldr	r0, [r0, #0]
   d7ec8:	ab03      	add	r3, sp, #12
   d7eca:	f241 020b 	movw	r2, #4107	; 0x100b
   d7ece:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7ed2:	f7fe fdbf 	bl	d6a54 <sock_setsockopt>
   d7ed6:	2800      	cmp	r0, #0
   d7ed8:	d1db      	bne.n	d7e92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7eda:	221c      	movs	r2, #28
   d7edc:	2100      	movs	r1, #0
   d7ede:	a803      	add	r0, sp, #12
   d7ee0:	f002 fdec 	bl	daabc <memset>
    if (ip.version() == 4) {
   d7ee4:	7d23      	ldrb	r3, [r4, #20]
   d7ee6:	2b04      	cmp	r3, #4
   d7ee8:	d11d      	bne.n	d7f26 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7eea:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7eee:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7ef0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7ef4:	f7fe fd0e 	bl	d6914 <inet_htons>
   d7ef8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7efc:	6860      	ldr	r0, [r4, #4]
   d7efe:	f7fe fd01 	bl	d6904 <inet_htonl>
   d7f02:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7f04:	696b      	ldr	r3, [r5, #20]
   d7f06:	221c      	movs	r2, #28
   d7f08:	6818      	ldr	r0, [r3, #0]
   d7f0a:	a903      	add	r1, sp, #12
   d7f0c:	f7fe fdb2 	bl	d6a74 <sock_connect>
   d7f10:	2800      	cmp	r0, #0
   d7f12:	d1be      	bne.n	d7e92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7f14:	3404      	adds	r4, #4
   d7f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f18:	696d      	ldr	r5, [r5, #20]
   d7f1a:	358c      	adds	r5, #140	; 0x8c
   d7f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f1e:	6823      	ldr	r3, [r4, #0]
   d7f20:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7f22:	2401      	movs	r4, #1
   d7f24:	e7ba      	b.n	d7e9c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7f26:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7f2a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7f2c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7f30:	f7fe fcf0 	bl	d6914 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f34:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7f36:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f3a:	1d23      	adds	r3, r4, #4
   d7f3c:	f104 0714 	add.w	r7, r4, #20
   d7f40:	6818      	ldr	r0, [r3, #0]
   d7f42:	6859      	ldr	r1, [r3, #4]
   d7f44:	4632      	mov	r2, r6
   d7f46:	c203      	stmia	r2!, {r0, r1}
   d7f48:	3308      	adds	r3, #8
   d7f4a:	42bb      	cmp	r3, r7
   d7f4c:	4616      	mov	r6, r2
   d7f4e:	d1f7      	bne.n	d7f40 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7f50:	e7d8      	b.n	d7f04 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d7f54 <_ZN9TCPClient9availableEv>:
{
   d7f54:	b530      	push	{r4, r5, lr}
   d7f56:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7f58:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7f5c:	b08b      	sub	sp, #44	; 0x2c
   d7f5e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7f60:	b12b      	cbz	r3, d7f6e <_ZN9TCPClient9availableEv+0x1a>
   d7f62:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7f66:	429a      	cmp	r2, r3
   d7f68:	d101      	bne.n	d7f6e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7f6a:	f7ff ff6f 	bl	d7e4c <_ZN9TCPClient12flush_bufferEv>
   d7f6e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7f70:	6808      	ldr	r0, [r1, #0]
   d7f72:	2800      	cmp	r0, #0
   d7f74:	db18      	blt.n	d7fa8 <_ZN9TCPClient9availableEv+0x54>
   d7f76:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7f7a:	2d7f      	cmp	r5, #127	; 0x7f
   d7f7c:	d814      	bhi.n	d7fa8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7f7e:	3104      	adds	r1, #4
   d7f80:	2308      	movs	r3, #8
   d7f82:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7f86:	4429      	add	r1, r5
   d7f88:	f7fe fd7c 	bl	d6a84 <sock_recv>
            if (ret > 0) {
   d7f8c:	2800      	cmp	r0, #0
   d7f8e:	dd13      	ble.n	d7fb8 <_ZN9TCPClient9availableEv+0x64>
   d7f90:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7f92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7f96:	b90a      	cbnz	r2, d7f9c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7f98:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7f9c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7f9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7fa2:	4410      	add	r0, r2
   d7fa4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7fa8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7faa:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7fae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7fb2:	1ac0      	subs	r0, r0, r3
   d7fb4:	b00b      	add	sp, #44	; 0x2c
   d7fb6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7fb8:	f7fe ff00 	bl	d6dbc <__errno>
   d7fbc:	6803      	ldr	r3, [r0, #0]
   d7fbe:	2b0b      	cmp	r3, #11
   d7fc0:	d0f2      	beq.n	d7fa8 <_ZN9TCPClient9availableEv+0x54>
   d7fc2:	f7fe fefb 	bl	d6dbc <__errno>
   d7fc6:	6803      	ldr	r3, [r0, #0]
   d7fc8:	2b0b      	cmp	r3, #11
   d7fca:	d0ed      	beq.n	d7fa8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7fcc:	2320      	movs	r3, #32
   d7fce:	2500      	movs	r5, #0
   d7fd0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7fd4:	f7fe fef2 	bl	d6dbc <__errno>
   d7fd8:	6803      	ldr	r3, [r0, #0]
   d7fda:	9301      	str	r3, [sp, #4]
   d7fdc:	4b08      	ldr	r3, [pc, #32]	; (d8000 <_ZN9TCPClient9availableEv+0xac>)
   d7fde:	4909      	ldr	r1, [pc, #36]	; (d8004 <_ZN9TCPClient9availableEv+0xb0>)
   d7fe0:	9300      	str	r3, [sp, #0]
   d7fe2:	aa02      	add	r2, sp, #8
   d7fe4:	462b      	mov	r3, r5
   d7fe6:	2032      	movs	r0, #50	; 0x32
   d7fe8:	f7fe fdfc 	bl	d6be4 <log_message>
                    sock_close(d_->sock);
   d7fec:	6963      	ldr	r3, [r4, #20]
   d7fee:	6818      	ldr	r0, [r3, #0]
   d7ff0:	f7fe fd38 	bl	d6a64 <sock_close>
   d7ff4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7ff6:	f04f 32ff 	mov.w	r2, #4294967295
   d7ffa:	601a      	str	r2, [r3, #0]
   d7ffc:	e7d4      	b.n	d7fa8 <_ZN9TCPClient9availableEv+0x54>
   d7ffe:	bf00      	nop
   d8000:	000dd5b3 	.word	0x000dd5b3
   d8004:	000dd5ac 	.word	0x000dd5ac

000d8008 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8008:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d800a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d800c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d800e:	6818      	ldr	r0, [r3, #0]
   d8010:	2800      	cmp	r0, #0
   d8012:	db01      	blt.n	d8018 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8014:	f7fe fd26 	bl	d6a64 <sock_close>
   d8018:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d801a:	f04f 32ff 	mov.w	r2, #4294967295
   d801e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8020:	6960      	ldr	r0, [r4, #20]
   d8022:	2211      	movs	r2, #17
   d8024:	2100      	movs	r1, #0
   d8026:	308c      	adds	r0, #140	; 0x8c
   d8028:	f002 fd48 	bl	daabc <memset>
    flush_buffer();
   d802c:	4620      	mov	r0, r4
}
   d802e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8032:	f7ff bf0b 	b.w	d7e4c <_ZN9TCPClient12flush_bufferEv>

000d8036 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8036:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8038:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d803a:	4604      	mov	r4, r0
          total(0) {
   d803c:	6001      	str	r1, [r0, #0]
   d803e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8042:	3088      	adds	r0, #136	; 0x88
   d8044:	f7ff fbb0 	bl	d77a8 <_ZN9IPAddressC1Ev>
}
   d8048:	4620      	mov	r0, r4
   d804a:	bd10      	pop	{r4, pc}

000d804c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d804c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d804e:	2300      	movs	r3, #0
   d8050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8054:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8058:	4a0e      	ldr	r2, [pc, #56]	; (d8094 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d805a:	6103      	str	r3, [r0, #16]
   d805c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d805e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8060:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8062:	20ac      	movs	r0, #172	; 0xac
   d8064:	9101      	str	r1, [sp, #4]
   d8066:	f7fc f816 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d806a:	1e05      	subs	r5, r0, #0
   d806c:	f105 060c 	add.w	r6, r5, #12
   d8070:	d008      	beq.n	d8084 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8072:	2301      	movs	r3, #1
   d8074:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8078:	4b07      	ldr	r3, [pc, #28]	; (d8098 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d807a:	9901      	ldr	r1, [sp, #4]
   d807c:	602b      	str	r3, [r5, #0]
   d807e:	4630      	mov	r0, r6
   d8080:	f7ff ffd9 	bl	d8036 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8084:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8086:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d808a:	f7ff fedf 	bl	d7e4c <_ZN9TCPClient12flush_bufferEv>
}
   d808e:	b002      	add	sp, #8
   d8090:	bd70      	pop	{r4, r5, r6, pc}
   d8092:	bf00      	nop
   d8094:	000dd5e8 	.word	0x000dd5e8
   d8098:	000dd5cc 	.word	0x000dd5cc

000d809c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d809c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d809e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d80a2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d80a4:	f7ff ffd2 	bl	d804c <_ZN9TCPClientC1Ei>
}
   d80a8:	4620      	mov	r0, r4
   d80aa:	bd10      	pop	{r4, pc}

000d80ac <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d80ac:	b510      	push	{r4, lr}
   d80ae:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d80b0:	6800      	ldr	r0, [r0, #0]
   d80b2:	2800      	cmp	r0, #0
   d80b4:	db01      	blt.n	d80ba <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d80b6:	f7fe fcd5 	bl	d6a64 <sock_close>
    }
}
   d80ba:	4620      	mov	r0, r4
   d80bc:	bd10      	pop	{r4, pc}

000d80be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d80be:	300c      	adds	r0, #12
   d80c0:	f7ff bff4 	b.w	d80ac <_ZN9TCPClient4DataD1Ev>

000d80c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d80c4:	2200      	movs	r2, #0
   d80c6:	6840      	ldr	r0, [r0, #4]
   d80c8:	4611      	mov	r1, r2
   d80ca:	f7fe bddf 	b.w	d6c8c <network_ready>

000d80ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d80ce:	2200      	movs	r2, #0
   d80d0:	6840      	ldr	r0, [r0, #4]
   d80d2:	4611      	mov	r1, r2
   d80d4:	f7fe bdfa 	b.w	d6ccc <network_listening>

000d80d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d80d8:	2200      	movs	r2, #0
   d80da:	6840      	ldr	r0, [r0, #4]
   d80dc:	4611      	mov	r1, r2
   d80de:	f7fe be05 	b.w	d6cec <network_get_listen_timeout>

000d80e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d80e2:	6840      	ldr	r0, [r0, #4]
   d80e4:	2200      	movs	r2, #0
   d80e6:	f7fe bdf9 	b.w	d6cdc <network_set_listen_timeout>

000d80ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d80ea:	6840      	ldr	r0, [r0, #4]
   d80ec:	2200      	movs	r2, #0
   d80ee:	f081 0101 	eor.w	r1, r1, #1
   d80f2:	f7fe bde3 	b.w	d6cbc <network_listen>

000d80f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d80f6:	2300      	movs	r3, #0
   d80f8:	6840      	ldr	r0, [r0, #4]
   d80fa:	461a      	mov	r2, r3
   d80fc:	4619      	mov	r1, r3
   d80fe:	f7fe bdd5 	b.w	d6cac <network_off>

000d8102 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8102:	2300      	movs	r3, #0
   d8104:	6840      	ldr	r0, [r0, #4]
   d8106:	461a      	mov	r2, r3
   d8108:	4619      	mov	r1, r3
   d810a:	f7fe bdc7 	b.w	d6c9c <network_on>

000d810e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d810e:	2200      	movs	r2, #0
   d8110:	6840      	ldr	r0, [r0, #4]
   d8112:	4611      	mov	r1, r2
   d8114:	f7fe bdaa 	b.w	d6c6c <network_connecting>

000d8118 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8118:	6840      	ldr	r0, [r0, #4]
   d811a:	2200      	movs	r2, #0
   d811c:	2102      	movs	r1, #2
   d811e:	f7fe bdad 	b.w	d6c7c <network_disconnect>

000d8122 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8122:	2300      	movs	r3, #0
   d8124:	6840      	ldr	r0, [r0, #4]
   d8126:	461a      	mov	r2, r3
   d8128:	f7fe bd98 	b.w	d6c5c <network_connect>

000d812c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d812c:	4b02      	ldr	r3, [pc, #8]	; (d8138 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d812e:	2204      	movs	r2, #4
   d8130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8132:	4a02      	ldr	r2, [pc, #8]	; (d813c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8134:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8136:	4770      	bx	lr
   d8138:	2003e7c8 	.word	0x2003e7c8
   d813c:	000dd634 	.word	0x000dd634

000d8140 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8140:	2300      	movs	r3, #0
   d8142:	6840      	ldr	r0, [r0, #4]
   d8144:	461a      	mov	r2, r3
   d8146:	f7fe bd89 	b.w	d6c5c <network_connect>

000d814a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d814a:	6840      	ldr	r0, [r0, #4]
   d814c:	2200      	movs	r2, #0
   d814e:	2102      	movs	r1, #2
   d8150:	f7fe bd94 	b.w	d6c7c <network_disconnect>

000d8154 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8154:	2200      	movs	r2, #0
   d8156:	6840      	ldr	r0, [r0, #4]
   d8158:	4611      	mov	r1, r2
   d815a:	f7fe bd87 	b.w	d6c6c <network_connecting>

000d815e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d815e:	2200      	movs	r2, #0
   d8160:	6840      	ldr	r0, [r0, #4]
   d8162:	4611      	mov	r1, r2
   d8164:	f7fe bd92 	b.w	d6c8c <network_ready>

000d8168 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8168:	2300      	movs	r3, #0
   d816a:	6840      	ldr	r0, [r0, #4]
   d816c:	461a      	mov	r2, r3
   d816e:	4619      	mov	r1, r3
   d8170:	f7fe bd94 	b.w	d6c9c <network_on>

000d8174 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8174:	2300      	movs	r3, #0
   d8176:	6840      	ldr	r0, [r0, #4]
   d8178:	461a      	mov	r2, r3
   d817a:	4619      	mov	r1, r3
   d817c:	f7fe bd96 	b.w	d6cac <network_off>

000d8180 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8180:	6840      	ldr	r0, [r0, #4]
   d8182:	2200      	movs	r2, #0
   d8184:	f081 0101 	eor.w	r1, r1, #1
   d8188:	f7fe bd98 	b.w	d6cbc <network_listen>

000d818c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d818c:	6840      	ldr	r0, [r0, #4]
   d818e:	2200      	movs	r2, #0
   d8190:	f7fe bda4 	b.w	d6cdc <network_set_listen_timeout>

000d8194 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8194:	2200      	movs	r2, #0
   d8196:	6840      	ldr	r0, [r0, #4]
   d8198:	4611      	mov	r1, r2
   d819a:	f7fe bda7 	b.w	d6cec <network_get_listen_timeout>

000d819e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d819e:	2200      	movs	r2, #0
   d81a0:	6840      	ldr	r0, [r0, #4]
   d81a2:	4611      	mov	r1, r2
   d81a4:	f7fe bd92 	b.w	d6ccc <network_listening>

000d81a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d81a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d81ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d81ae:	b095      	sub	sp, #84	; 0x54
   d81b0:	4616      	mov	r6, r2
   d81b2:	460d      	mov	r5, r1
   d81b4:	4607      	mov	r7, r0
    IPAddress addr;
   d81b6:	f7ff faf7 	bl	d77a8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d81ba:	4621      	mov	r1, r4
   d81bc:	2218      	movs	r2, #24
   d81be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d81c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d81c2:	f002 fc7b 	bl	daabc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d81c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d81c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d81cc:	4621      	mov	r1, r4
   d81ce:	466b      	mov	r3, sp
   d81d0:	aa0c      	add	r2, sp, #48	; 0x30
   d81d2:	4630      	mov	r0, r6
   d81d4:	f7fe fb0e 	bl	d67f4 <netdb_getaddrinfo>
    if (!r) {
   d81d8:	4604      	mov	r4, r0
   d81da:	2800      	cmp	r0, #0
   d81dc:	d146      	bne.n	d826c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d81de:	4602      	mov	r2, r0
   d81e0:	2101      	movs	r1, #1
   d81e2:	6868      	ldr	r0, [r5, #4]
   d81e4:	f7fe fd52 	bl	d6c8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d81ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81ec:	4622      	mov	r2, r4
   d81ee:	6868      	ldr	r0, [r5, #4]
   d81f0:	f7fe fd4c 	bl	d6c8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d81f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d81f6:	4681      	mov	r9, r0
        bool ok = false;
   d81f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d81fa:	2e00      	cmp	r6, #0
   d81fc:	d036      	beq.n	d826c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d81fe:	2900      	cmp	r1, #0
   d8200:	d134      	bne.n	d826c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8202:	6873      	ldr	r3, [r6, #4]
   d8204:	2b02      	cmp	r3, #2
   d8206:	d003      	beq.n	d8210 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8208:	2b0a      	cmp	r3, #10
   d820a:	d00b      	beq.n	d8224 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d820c:	69f6      	ldr	r6, [r6, #28]
   d820e:	e7f4      	b.n	d81fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8210:	f1b8 0f00 	cmp.w	r8, #0
   d8214:	d004      	beq.n	d8220 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8216:	6971      	ldr	r1, [r6, #20]
   d8218:	4638      	mov	r0, r7
   d821a:	3104      	adds	r1, #4
   d821c:	f7ff fb07 	bl	d782e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8220:	4641      	mov	r1, r8
   d8222:	e7f3      	b.n	d820c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8224:	f1b9 0f00 	cmp.w	r9, #0
   d8228:	d101      	bne.n	d822e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d822a:	4649      	mov	r1, r9
   d822c:	e7ee      	b.n	d820c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d822e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8230:	2210      	movs	r2, #16
   d8232:	a801      	add	r0, sp, #4
   d8234:	f002 fc42 	bl	daabc <memset>
                    a.v = 6;
   d8238:	2306      	movs	r3, #6
   d823a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d823e:	ad01      	add	r5, sp, #4
   d8240:	f104 0308 	add.w	r3, r4, #8
   d8244:	3418      	adds	r4, #24
   d8246:	6818      	ldr	r0, [r3, #0]
   d8248:	6859      	ldr	r1, [r3, #4]
   d824a:	462a      	mov	r2, r5
   d824c:	c203      	stmia	r2!, {r0, r1}
   d824e:	3308      	adds	r3, #8
   d8250:	42a3      	cmp	r3, r4
   d8252:	4615      	mov	r5, r2
   d8254:	d1f7      	bne.n	d8246 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8256:	a901      	add	r1, sp, #4
   d8258:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d825a:	ad07      	add	r5, sp, #28
   d825c:	f7ff fab2 	bl	d77c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8262:	1d3c      	adds	r4, r7, #4
   d8264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8266:	682b      	ldr	r3, [r5, #0]
   d8268:	7023      	strb	r3, [r4, #0]
   d826a:	e7de      	b.n	d822a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d826c:	9800      	ldr	r0, [sp, #0]
   d826e:	f7fe fab9 	bl	d67e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8272:	4638      	mov	r0, r7
   d8274:	b015      	add	sp, #84	; 0x54
   d8276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d827c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d827c:	4b02      	ldr	r3, [pc, #8]	; (d8288 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d827e:	4a03      	ldr	r2, [pc, #12]	; (d828c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8280:	601a      	str	r2, [r3, #0]
   d8282:	2200      	movs	r2, #0
   d8284:	605a      	str	r2, [r3, #4]

} // spark
   d8286:	4770      	bx	lr
   d8288:	2003e7d0 	.word	0x2003e7d0
   d828c:	000dd668 	.word	0x000dd668

000d8290 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8290:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8292:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8294:	d902      	bls.n	d829c <pinAvailable+0xc>
    return false;
   d8296:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8298:	b002      	add	sp, #8
   d829a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d829c:	f1a0 030b 	sub.w	r3, r0, #11
   d82a0:	2b02      	cmp	r3, #2
   d82a2:	d81a      	bhi.n	d82da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d82a4:	4c17      	ldr	r4, [pc, #92]	; (d8304 <pinAvailable+0x74>)
   d82a6:	7821      	ldrb	r1, [r4, #0]
   d82a8:	f3bf 8f5b 	dmb	ish
   d82ac:	f011 0101 	ands.w	r1, r1, #1
   d82b0:	d10b      	bne.n	d82ca <pinAvailable+0x3a>
   d82b2:	4620      	mov	r0, r4
   d82b4:	9101      	str	r1, [sp, #4]
   d82b6:	f7fb feff 	bl	d40b8 <__cxa_guard_acquire>
   d82ba:	9901      	ldr	r1, [sp, #4]
   d82bc:	b128      	cbz	r0, d82ca <pinAvailable+0x3a>
   d82be:	4812      	ldr	r0, [pc, #72]	; (d8308 <pinAvailable+0x78>)
   d82c0:	f7fe fdd8 	bl	d6e74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d82c4:	4620      	mov	r0, r4
   d82c6:	f7fb fefc 	bl	d40c2 <__cxa_guard_release>
   d82ca:	4b0f      	ldr	r3, [pc, #60]	; (d8308 <pinAvailable+0x78>)
   d82cc:	7818      	ldrb	r0, [r3, #0]
   d82ce:	f7fe fc21 	bl	d6b14 <hal_spi_is_enabled>
   d82d2:	2800      	cmp	r0, #0
   d82d4:	d1df      	bne.n	d8296 <pinAvailable+0x6>
  return true; // 'pin' is available
   d82d6:	2001      	movs	r0, #1
   d82d8:	e7de      	b.n	d8298 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d82da:	2801      	cmp	r0, #1
   d82dc:	d809      	bhi.n	d82f2 <pinAvailable+0x62>
   d82de:	f000 f8a7 	bl	d8430 <_Z19__fetch_global_Wirev>
   d82e2:	2100      	movs	r1, #0
   d82e4:	7c00      	ldrb	r0, [r0, #16]
   d82e6:	f7fe fb9d 	bl	d6a24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d82ea:	f080 0001 	eor.w	r0, r0, #1
   d82ee:	b2c0      	uxtb	r0, r0
   d82f0:	e7d2      	b.n	d8298 <pinAvailable+0x8>
   d82f2:	3809      	subs	r0, #9
   d82f4:	2801      	cmp	r0, #1
   d82f6:	d8ee      	bhi.n	d82d6 <pinAvailable+0x46>
   d82f8:	f7ff fb7e 	bl	d79f8 <_Z22__fetch_global_Serial1v>
   d82fc:	7c00      	ldrb	r0, [r0, #16]
   d82fe:	f7fe fb41 	bl	d6984 <hal_usart_is_enabled>
   d8302:	e7f2      	b.n	d82ea <pinAvailable+0x5a>
   d8304:	2003e638 	.word	0x2003e638
   d8308:	2003e63c 	.word	0x2003e63c

000d830c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d830c:	2823      	cmp	r0, #35	; 0x23
{
   d830e:	b538      	push	{r3, r4, r5, lr}
   d8310:	4604      	mov	r4, r0
   d8312:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8314:	d80a      	bhi.n	d832c <pinMode+0x20>
   d8316:	29ff      	cmp	r1, #255	; 0xff
   d8318:	d008      	beq.n	d832c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d831a:	f7ff ffb9 	bl	d8290 <pinAvailable>
   d831e:	b128      	cbz	r0, d832c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8320:	4629      	mov	r1, r5
   d8322:	4620      	mov	r0, r4
}
   d8324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8328:	f7fe ba74 	b.w	d6814 <HAL_Pin_Mode>
}
   d832c:	bd38      	pop	{r3, r4, r5, pc}

000d832e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d832e:	b538      	push	{r3, r4, r5, lr}
   d8330:	4604      	mov	r4, r0
   d8332:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8334:	f7fe fa76 	bl	d6824 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8338:	28ff      	cmp	r0, #255	; 0xff
   d833a:	d010      	beq.n	d835e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d833c:	2806      	cmp	r0, #6
   d833e:	d804      	bhi.n	d834a <digitalWrite+0x1c>
   d8340:	234d      	movs	r3, #77	; 0x4d
   d8342:	fa23 f000 	lsr.w	r0, r3, r0
   d8346:	07c3      	lsls	r3, r0, #31
   d8348:	d409      	bmi.n	d835e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d834a:	4620      	mov	r0, r4
   d834c:	f7ff ffa0 	bl	d8290 <pinAvailable>
   d8350:	b128      	cbz	r0, d835e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8352:	4629      	mov	r1, r5
   d8354:	4620      	mov	r0, r4
}
   d8356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d835a:	f7fe ba6b 	b.w	d6834 <HAL_GPIO_Write>
}
   d835e:	bd38      	pop	{r3, r4, r5, pc}

000d8360 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8360:	b510      	push	{r4, lr}
   d8362:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8364:	f7fe fa5e 	bl	d6824 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8368:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d836a:	b2db      	uxtb	r3, r3
   d836c:	2b01      	cmp	r3, #1
   d836e:	d908      	bls.n	d8382 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8370:	4620      	mov	r0, r4
   d8372:	f7ff ff8d 	bl	d8290 <pinAvailable>
   d8376:	b120      	cbz	r0, d8382 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8378:	4620      	mov	r0, r4
}
   d837a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d837e:	f7fe ba61 	b.w	d6844 <HAL_GPIO_Read>
}
   d8382:	2000      	movs	r0, #0
   d8384:	bd10      	pop	{r4, pc}

000d8386 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8386:	280d      	cmp	r0, #13
{
   d8388:	b510      	push	{r4, lr}
   d838a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d838c:	bf9c      	itt	ls
   d838e:	340e      	addls	r4, #14
   d8390:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8392:	4620      	mov	r0, r4
   d8394:	f7ff ff7c 	bl	d8290 <pinAvailable>
   d8398:	b150      	cbz	r0, d83b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d839a:	2103      	movs	r1, #3
   d839c:	4620      	mov	r0, r4
   d839e:	f7fe fa31 	bl	d6804 <HAL_Validate_Pin_Function>
   d83a2:	2803      	cmp	r0, #3
   d83a4:	d104      	bne.n	d83b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d83a6:	4620      	mov	r0, r4
}
   d83a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d83ac:	f7fe ba52 	b.w	d6854 <hal_adc_read>
}
   d83b0:	2000      	movs	r0, #0
   d83b2:	bd10      	pop	{r4, pc}

000d83b4 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d83b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83b8:	4690      	mov	r8, r2
   d83ba:	461f      	mov	r7, r3
   d83bc:	2400      	movs	r4, #0
   d83be:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d83c0:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d83c2:	f1b8 0f00 	cmp.w	r8, #0
   d83c6:	d113      	bne.n	d83f0 <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d83c8:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d83cc:	f001 0101 	and.w	r1, r1, #1
   d83d0:	4630      	mov	r0, r6
   d83d2:	f7ff ffac 	bl	d832e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d83d6:	2101      	movs	r1, #1
   d83d8:	4628      	mov	r0, r5
   d83da:	f7ff ffa8 	bl	d832e <digitalWrite>
    digitalWrite(clockPin, LOW);
   d83de:	3401      	adds	r4, #1
   d83e0:	2100      	movs	r1, #0
   d83e2:	4628      	mov	r0, r5
   d83e4:	f7ff ffa3 	bl	d832e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d83e8:	2c08      	cmp	r4, #8
   d83ea:	d1ea      	bne.n	d83c2 <shiftOut+0xe>
  }
}
   d83ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d83f0:	f1c4 0107 	rsb	r1, r4, #7
   d83f4:	fa47 f101 	asr.w	r1, r7, r1
   d83f8:	e7e8      	b.n	d83cc <shiftOut+0x18>

000d83fa <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d83fa:	f7fe ba33 	b.w	d6864 <HAL_Pulse_In>
	...

000d8400 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8400:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8402:	2300      	movs	r3, #0
   d8404:	2520      	movs	r5, #32
   d8406:	8043      	strh	r3, [r0, #2]
   d8408:	2314      	movs	r3, #20
{
   d840a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d840c:	8003      	strh	r3, [r0, #0]
   d840e:	6085      	str	r5, [r0, #8]
   d8410:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8412:	4906      	ldr	r1, [pc, #24]	; (d842c <_Z17acquireWireBufferv+0x2c>)
   d8414:	4628      	mov	r0, r5
   d8416:	f000 f83a 	bl	d848e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d841a:	4904      	ldr	r1, [pc, #16]	; (d842c <_Z17acquireWireBufferv+0x2c>)
	};
   d841c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d841e:	4628      	mov	r0, r5
   d8420:	f000 f835 	bl	d848e <_ZnajRKSt9nothrow_t>
	};
   d8424:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8426:	4620      	mov	r0, r4
   d8428:	bd38      	pop	{r3, r4, r5, pc}
   d842a:	bf00      	nop
   d842c:	000dd694 	.word	0x000dd694

000d8430 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8430:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8432:	4d0f      	ldr	r5, [pc, #60]	; (d8470 <_Z19__fetch_global_Wirev+0x40>)
   d8434:	7829      	ldrb	r1, [r5, #0]
   d8436:	f3bf 8f5b 	dmb	ish
   d843a:	f011 0401 	ands.w	r4, r1, #1
{
   d843e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8440:	d113      	bne.n	d846a <_Z19__fetch_global_Wirev+0x3a>
   d8442:	4628      	mov	r0, r5
   d8444:	f7fb fe38 	bl	d40b8 <__cxa_guard_acquire>
   d8448:	b178      	cbz	r0, d846a <_Z19__fetch_global_Wirev+0x3a>
   d844a:	a801      	add	r0, sp, #4
   d844c:	f7ff ffd8 	bl	d8400 <_Z17acquireWireBufferv>
   d8450:	aa01      	add	r2, sp, #4
   d8452:	4621      	mov	r1, r4
   d8454:	4807      	ldr	r0, [pc, #28]	; (d8474 <_Z19__fetch_global_Wirev+0x44>)
   d8456:	f7ff fb25 	bl	d7aa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d845a:	4628      	mov	r0, r5
   d845c:	f7fb fe31 	bl	d40c2 <__cxa_guard_release>
   d8460:	4a05      	ldr	r2, [pc, #20]	; (d8478 <_Z19__fetch_global_Wirev+0x48>)
   d8462:	4906      	ldr	r1, [pc, #24]	; (d847c <_Z19__fetch_global_Wirev+0x4c>)
   d8464:	4803      	ldr	r0, [pc, #12]	; (d8474 <_Z19__fetch_global_Wirev+0x44>)
   d8466:	f000 f80b 	bl	d8480 <__aeabi_atexit>
	return wire;
}
   d846a:	4802      	ldr	r0, [pc, #8]	; (d8474 <_Z19__fetch_global_Wirev+0x44>)
   d846c:	b007      	add	sp, #28
   d846e:	bd30      	pop	{r4, r5, pc}
   d8470:	2003e7dc 	.word	0x2003e7dc
   d8474:	2003e7e0 	.word	0x2003e7e0
   d8478:	2003e3a8 	.word	0x2003e3a8
   d847c:	000d7a4d 	.word	0x000d7a4d

000d8480 <__aeabi_atexit>:
   d8480:	460b      	mov	r3, r1
   d8482:	4601      	mov	r1, r0
   d8484:	4618      	mov	r0, r3
   d8486:	f002 bacf 	b.w	daa28 <__cxa_atexit>

000d848a <_ZdlPvj>:
   d848a:	f7fb be08 	b.w	d409e <_ZdlPv>

000d848e <_ZnajRKSt9nothrow_t>:
   d848e:	f7fb be04 	b.w	d409a <_Znaj>
	...

000d8494 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8494:	4901      	ldr	r1, [pc, #4]	; (d849c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8496:	f000 b8f9 	b.w	d868c <_ZNKSt9type_infoeqERKS_>
   d849a:	bf00      	nop
   d849c:	000dd6b0 	.word	0x000dd6b0

000d84a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d84a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d84a2:	2400      	movs	r4, #0
   d84a4:	2310      	movs	r3, #16
   d84a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d84aa:	6803      	ldr	r3, [r0, #0]
   d84ac:	9400      	str	r4, [sp, #0]
   d84ae:	699e      	ldr	r6, [r3, #24]
   d84b0:	f88d 4004 	strb.w	r4, [sp, #4]
   d84b4:	4615      	mov	r5, r2
   d84b6:	466b      	mov	r3, sp
   d84b8:	6812      	ldr	r2, [r2, #0]
   d84ba:	47b0      	blx	r6
   d84bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d84c0:	f003 0306 	and.w	r3, r3, #6
   d84c4:	2b06      	cmp	r3, #6
   d84c6:	bf03      	ittte	eq
   d84c8:	9b00      	ldreq	r3, [sp, #0]
   d84ca:	602b      	streq	r3, [r5, #0]
   d84cc:	2001      	moveq	r0, #1
   d84ce:	4620      	movne	r0, r4
   d84d0:	b004      	add	sp, #16
   d84d2:	bd70      	pop	{r4, r5, r6, pc}

000d84d4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d84d4:	9800      	ldr	r0, [sp, #0]
   d84d6:	4290      	cmp	r0, r2
   d84d8:	bf14      	ite	ne
   d84da:	2001      	movne	r0, #1
   d84dc:	2006      	moveq	r0, #6
   d84de:	4770      	bx	lr

000d84e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d84e0:	b510      	push	{r4, lr}
   d84e2:	4b03      	ldr	r3, [pc, #12]	; (d84f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d84e4:	6003      	str	r3, [r0, #0]
   d84e6:	4604      	mov	r4, r0
   d84e8:	f000 f8cd 	bl	d8686 <_ZNSt9type_infoD1Ev>
   d84ec:	4620      	mov	r0, r4
   d84ee:	bd10      	pop	{r4, pc}
   d84f0:	000dd6f0 	.word	0x000dd6f0

000d84f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d84f4:	b510      	push	{r4, lr}
   d84f6:	4604      	mov	r4, r0
   d84f8:	f7ff fff2 	bl	d84e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d84fc:	4620      	mov	r0, r4
   d84fe:	2108      	movs	r1, #8
   d8500:	f7ff ffc3 	bl	d848a <_ZdlPvj>
   d8504:	4620      	mov	r0, r4
   d8506:	bd10      	pop	{r4, pc}

000d8508 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d850c:	461f      	mov	r7, r3
   d850e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8512:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8516:	4598      	cmp	r8, r3
   d8518:	4606      	mov	r6, r0
   d851a:	4615      	mov	r5, r2
   d851c:	d107      	bne.n	d852e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d851e:	9907      	ldr	r1, [sp, #28]
   d8520:	f000 f8b4 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d8524:	b118      	cbz	r0, d852e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8526:	7165      	strb	r5, [r4, #5]
   d8528:	2000      	movs	r0, #0
   d852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d852e:	4639      	mov	r1, r7
   d8530:	4630      	mov	r0, r6
   d8532:	f000 f8ab 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d8536:	2800      	cmp	r0, #0
   d8538:	d0f6      	beq.n	d8528 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d853a:	2301      	movs	r3, #1
   d853c:	f8c4 8000 	str.w	r8, [r4]
   d8540:	7125      	strb	r5, [r4, #4]
   d8542:	71a3      	strb	r3, [r4, #6]
   d8544:	e7f0      	b.n	d8528 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8546 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8546:	b538      	push	{r3, r4, r5, lr}
   d8548:	4615      	mov	r5, r2
   d854a:	461c      	mov	r4, r3
   d854c:	f000 f89e 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d8550:	b120      	cbz	r0, d855c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8552:	2308      	movs	r3, #8
   d8554:	60e3      	str	r3, [r4, #12]
   d8556:	2306      	movs	r3, #6
   d8558:	6025      	str	r5, [r4, #0]
   d855a:	7123      	strb	r3, [r4, #4]
   d855c:	bd38      	pop	{r3, r4, r5, pc}

000d855e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d855e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8560:	4605      	mov	r5, r0
   d8562:	460c      	mov	r4, r1
   d8564:	9201      	str	r2, [sp, #4]
   d8566:	461e      	mov	r6, r3
   d8568:	f000 f890 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d856c:	b950      	cbnz	r0, d8584 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d856e:	2e03      	cmp	r6, #3
   d8570:	d808      	bhi.n	d8584 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8572:	6823      	ldr	r3, [r4, #0]
   d8574:	9a01      	ldr	r2, [sp, #4]
   d8576:	695b      	ldr	r3, [r3, #20]
   d8578:	4629      	mov	r1, r5
   d857a:	4620      	mov	r0, r4
   d857c:	b002      	add	sp, #8
   d857e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8582:	4718      	bx	r3
   d8584:	b002      	add	sp, #8
   d8586:	bd70      	pop	{r4, r5, r6, pc}

000d8588 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8588:	b510      	push	{r4, lr}
   d858a:	4b03      	ldr	r3, [pc, #12]	; (d8598 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d858c:	6003      	str	r3, [r0, #0]
   d858e:	4604      	mov	r4, r0
   d8590:	f7ff ffa6 	bl	d84e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8594:	4620      	mov	r0, r4
   d8596:	bd10      	pop	{r4, pc}
   d8598:	000dd750 	.word	0x000dd750

000d859c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d859c:	b510      	push	{r4, lr}
   d859e:	4604      	mov	r4, r0
   d85a0:	f7ff fff2 	bl	d8588 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d85a4:	4620      	mov	r0, r4
   d85a6:	210c      	movs	r1, #12
   d85a8:	f7ff ff6f 	bl	d848a <_ZdlPvj>
   d85ac:	4620      	mov	r0, r4
   d85ae:	bd10      	pop	{r4, pc}

000d85b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d85b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d85b2:	9f08      	ldr	r7, [sp, #32]
   d85b4:	4297      	cmp	r7, r2
   d85b6:	4605      	mov	r5, r0
   d85b8:	460e      	mov	r6, r1
   d85ba:	4614      	mov	r4, r2
   d85bc:	d00a      	beq.n	d85d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d85be:	68a8      	ldr	r0, [r5, #8]
   d85c0:	6802      	ldr	r2, [r0, #0]
   d85c2:	9708      	str	r7, [sp, #32]
   d85c4:	6a15      	ldr	r5, [r2, #32]
   d85c6:	4631      	mov	r1, r6
   d85c8:	4622      	mov	r2, r4
   d85ca:	46ac      	mov	ip, r5
   d85cc:	b003      	add	sp, #12
   d85ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d85d2:	4760      	bx	ip
   d85d4:	4619      	mov	r1, r3
   d85d6:	9301      	str	r3, [sp, #4]
   d85d8:	f000 f858 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d85dc:	9b01      	ldr	r3, [sp, #4]
   d85de:	2800      	cmp	r0, #0
   d85e0:	d0ed      	beq.n	d85be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d85e2:	2006      	movs	r0, #6
   d85e4:	b003      	add	sp, #12
   d85e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d85e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d85e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85ec:	460d      	mov	r5, r1
   d85ee:	4619      	mov	r1, r3
   d85f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d85f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d85f8:	4681      	mov	r9, r0
   d85fa:	4617      	mov	r7, r2
   d85fc:	4698      	mov	r8, r3
   d85fe:	f000 f845 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d8602:	b190      	cbz	r0, d862a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8604:	2d00      	cmp	r5, #0
   d8606:	6034      	str	r4, [r6, #0]
   d8608:	7137      	strb	r7, [r6, #4]
   d860a:	db09      	blt.n	d8620 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d860c:	1961      	adds	r1, r4, r5
   d860e:	458a      	cmp	sl, r1
   d8610:	bf0c      	ite	eq
   d8612:	2106      	moveq	r1, #6
   d8614:	2101      	movne	r1, #1
   d8616:	71b1      	strb	r1, [r6, #6]
   d8618:	2000      	movs	r0, #0
   d861a:	b001      	add	sp, #4
   d861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8620:	3502      	adds	r5, #2
   d8622:	d1f9      	bne.n	d8618 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8624:	2301      	movs	r3, #1
   d8626:	71b3      	strb	r3, [r6, #6]
   d8628:	e7f6      	b.n	d8618 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d862a:	4554      	cmp	r4, sl
   d862c:	d106      	bne.n	d863c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d862e:	4659      	mov	r1, fp
   d8630:	4648      	mov	r0, r9
   d8632:	f000 f82b 	bl	d868c <_ZNKSt9type_infoeqERKS_>
   d8636:	b108      	cbz	r0, d863c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8638:	7177      	strb	r7, [r6, #5]
   d863a:	e7ed      	b.n	d8618 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d863c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8640:	6803      	ldr	r3, [r0, #0]
   d8642:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8646:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d864a:	69dc      	ldr	r4, [r3, #28]
   d864c:	463a      	mov	r2, r7
   d864e:	4643      	mov	r3, r8
   d8650:	4629      	mov	r1, r5
   d8652:	46a4      	mov	ip, r4
   d8654:	b001      	add	sp, #4
   d8656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d865a:	4760      	bx	ip

000d865c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8660:	4607      	mov	r7, r0
   d8662:	460c      	mov	r4, r1
   d8664:	4615      	mov	r5, r2
   d8666:	461e      	mov	r6, r3
   d8668:	f7ff ff6d 	bl	d8546 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d866c:	b948      	cbnz	r0, d8682 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d866e:	68b8      	ldr	r0, [r7, #8]
   d8670:	6803      	ldr	r3, [r0, #0]
   d8672:	699f      	ldr	r7, [r3, #24]
   d8674:	462a      	mov	r2, r5
   d8676:	4633      	mov	r3, r6
   d8678:	4621      	mov	r1, r4
   d867a:	46bc      	mov	ip, r7
   d867c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8680:	4760      	bx	ip
   d8682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8686 <_ZNSt9type_infoD1Ev>:
   d8686:	4770      	bx	lr

000d8688 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8688:	2000      	movs	r0, #0
   d868a:	4770      	bx	lr

000d868c <_ZNKSt9type_infoeqERKS_>:
   d868c:	4281      	cmp	r1, r0
   d868e:	b508      	push	{r3, lr}
   d8690:	d00e      	beq.n	d86b0 <_ZNKSt9type_infoeqERKS_+0x24>
   d8692:	6840      	ldr	r0, [r0, #4]
   d8694:	7803      	ldrb	r3, [r0, #0]
   d8696:	2b2a      	cmp	r3, #42	; 0x2a
   d8698:	d00c      	beq.n	d86b4 <_ZNKSt9type_infoeqERKS_+0x28>
   d869a:	6849      	ldr	r1, [r1, #4]
   d869c:	780b      	ldrb	r3, [r1, #0]
   d869e:	2b2a      	cmp	r3, #42	; 0x2a
   d86a0:	bf08      	it	eq
   d86a2:	3101      	addeq	r1, #1
   d86a4:	f002 fa36 	bl	dab14 <strcmp>
   d86a8:	fab0 f080 	clz	r0, r0
   d86ac:	0940      	lsrs	r0, r0, #5
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	2001      	movs	r0, #1
   d86b2:	e7fc      	b.n	d86ae <_ZNKSt9type_infoeqERKS_+0x22>
   d86b4:	2000      	movs	r0, #0
   d86b6:	e7fa      	b.n	d86ae <_ZNKSt9type_infoeqERKS_+0x22>

000d86b8 <pow>:
   d86b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86bc:	ed2d 8b02 	vpush	{d8}
   d86c0:	b08d      	sub	sp, #52	; 0x34
   d86c2:	ec57 6b10 	vmov	r6, r7, d0
   d86c6:	ec55 4b11 	vmov	r4, r5, d1
   d86ca:	f000 f9ad 	bl	d8a28 <__ieee754_pow>
   d86ce:	4bae      	ldr	r3, [pc, #696]	; (d8988 <pow+0x2d0>)
   d86d0:	eeb0 8a40 	vmov.f32	s16, s0
   d86d4:	eef0 8a60 	vmov.f32	s17, s1
   d86d8:	f993 9000 	ldrsb.w	r9, [r3]
   d86dc:	f1b9 3fff 	cmp.w	r9, #4294967295
   d86e0:	d037      	beq.n	d8752 <pow+0x9a>
   d86e2:	4622      	mov	r2, r4
   d86e4:	462b      	mov	r3, r5
   d86e6:	4620      	mov	r0, r4
   d86e8:	4629      	mov	r1, r5
   d86ea:	f001 fdd9 	bl	da2a0 <__aeabi_dcmpun>
   d86ee:	4683      	mov	fp, r0
   d86f0:	bb78      	cbnz	r0, d8752 <pow+0x9a>
   d86f2:	4632      	mov	r2, r6
   d86f4:	463b      	mov	r3, r7
   d86f6:	4630      	mov	r0, r6
   d86f8:	4639      	mov	r1, r7
   d86fa:	f001 fdd1 	bl	da2a0 <__aeabi_dcmpun>
   d86fe:	4680      	mov	r8, r0
   d8700:	2800      	cmp	r0, #0
   d8702:	f040 8093 	bne.w	d882c <pow+0x174>
   d8706:	f04f 0a00 	mov.w	sl, #0
   d870a:	f04f 0b00 	mov.w	fp, #0
   d870e:	4630      	mov	r0, r6
   d8710:	4639      	mov	r1, r7
   d8712:	4652      	mov	r2, sl
   d8714:	465b      	mov	r3, fp
   d8716:	f001 fd91 	bl	da23c <__aeabi_dcmpeq>
   d871a:	b318      	cbz	r0, d8764 <pow+0xac>
   d871c:	4652      	mov	r2, sl
   d871e:	465b      	mov	r3, fp
   d8720:	4620      	mov	r0, r4
   d8722:	4629      	mov	r1, r5
   d8724:	f001 fd8a 	bl	da23c <__aeabi_dcmpeq>
   d8728:	9000      	str	r0, [sp, #0]
   d872a:	2800      	cmp	r0, #0
   d872c:	d057      	beq.n	d87de <pow+0x126>
   d872e:	4b97      	ldr	r3, [pc, #604]	; (d898c <pow+0x2d4>)
   d8730:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d8734:	2201      	movs	r2, #1
   d8736:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d873a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d873e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8742:	9202      	str	r2, [sp, #8]
   d8744:	9303      	str	r3, [sp, #12]
   d8746:	f1b9 0f00 	cmp.w	r9, #0
   d874a:	f000 8089 	beq.w	d8860 <pow+0x1a8>
   d874e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d8978 <pow+0x2c0>
   d8752:	eeb0 0a48 	vmov.f32	s0, s16
   d8756:	eef0 0a68 	vmov.f32	s1, s17
   d875a:	b00d      	add	sp, #52	; 0x34
   d875c:	ecbd 8b02 	vpop	{d8}
   d8760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8764:	eeb0 0a48 	vmov.f32	s0, s16
   d8768:	eef0 0a68 	vmov.f32	s1, s17
   d876c:	f001 f804 	bl	d9778 <finite>
   d8770:	4680      	mov	r8, r0
   d8772:	2800      	cmp	r0, #0
   d8774:	f000 8082 	beq.w	d887c <pow+0x1c4>
   d8778:	f04f 0800 	mov.w	r8, #0
   d877c:	f04f 0900 	mov.w	r9, #0
   d8780:	ec51 0b18 	vmov	r0, r1, d8
   d8784:	4642      	mov	r2, r8
   d8786:	464b      	mov	r3, r9
   d8788:	f001 fd58 	bl	da23c <__aeabi_dcmpeq>
   d878c:	2800      	cmp	r0, #0
   d878e:	d0e0      	beq.n	d8752 <pow+0x9a>
   d8790:	ec47 6b10 	vmov	d0, r6, r7
   d8794:	f000 fff0 	bl	d9778 <finite>
   d8798:	2800      	cmp	r0, #0
   d879a:	d0da      	beq.n	d8752 <pow+0x9a>
   d879c:	ec45 4b10 	vmov	d0, r4, r5
   d87a0:	f000 ffea 	bl	d9778 <finite>
   d87a4:	2800      	cmp	r0, #0
   d87a6:	d0d4      	beq.n	d8752 <pow+0x9a>
   d87a8:	4b77      	ldr	r3, [pc, #476]	; (d8988 <pow+0x2d0>)
   d87aa:	4a78      	ldr	r2, [pc, #480]	; (d898c <pow+0x2d4>)
   d87ac:	f993 3000 	ldrsb.w	r3, [r3]
   d87b0:	9203      	str	r2, [sp, #12]
   d87b2:	2104      	movs	r1, #4
   d87b4:	2200      	movs	r2, #0
   d87b6:	2b02      	cmp	r3, #2
   d87b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d87bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d87c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d87c4:	9102      	str	r1, [sp, #8]
   d87c6:	920a      	str	r2, [sp, #40]	; 0x28
   d87c8:	d004      	beq.n	d87d4 <pow+0x11c>
   d87ca:	a802      	add	r0, sp, #8
   d87cc:	f000 ffe0 	bl	d9790 <matherr>
   d87d0:	2800      	cmp	r0, #0
   d87d2:	d14a      	bne.n	d886a <pow+0x1b2>
   d87d4:	f7fe faf2 	bl	d6dbc <__errno>
   d87d8:	2322      	movs	r3, #34	; 0x22
   d87da:	6003      	str	r3, [r0, #0]
   d87dc:	e045      	b.n	d886a <pow+0x1b2>
   d87de:	ec45 4b10 	vmov	d0, r4, r5
   d87e2:	f000 ffc9 	bl	d9778 <finite>
   d87e6:	2800      	cmp	r0, #0
   d87e8:	d0b3      	beq.n	d8752 <pow+0x9a>
   d87ea:	4652      	mov	r2, sl
   d87ec:	465b      	mov	r3, fp
   d87ee:	4620      	mov	r0, r4
   d87f0:	4629      	mov	r1, r5
   d87f2:	f001 fd2d 	bl	da250 <__aeabi_dcmplt>
   d87f6:	2800      	cmp	r0, #0
   d87f8:	d0ab      	beq.n	d8752 <pow+0x9a>
   d87fa:	4b63      	ldr	r3, [pc, #396]	; (d8988 <pow+0x2d0>)
   d87fc:	9900      	ldr	r1, [sp, #0]
   d87fe:	4a63      	ldr	r2, [pc, #396]	; (d898c <pow+0x2d4>)
   d8800:	f993 3000 	ldrsb.w	r3, [r3]
   d8804:	910a      	str	r1, [sp, #40]	; 0x28
   d8806:	2101      	movs	r1, #1
   d8808:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d880c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8810:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d8814:	2b00      	cmp	r3, #0
   d8816:	d16f      	bne.n	d88f8 <pow+0x240>
   d8818:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d881c:	a802      	add	r0, sp, #8
   d881e:	f000 ffb7 	bl	d9790 <matherr>
   d8822:	2800      	cmp	r0, #0
   d8824:	d06e      	beq.n	d8904 <pow+0x24c>
   d8826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8828:	b32b      	cbz	r3, d8876 <pow+0x1be>
   d882a:	e020      	b.n	d886e <pow+0x1b6>
   d882c:	2200      	movs	r2, #0
   d882e:	2300      	movs	r3, #0
   d8830:	4620      	mov	r0, r4
   d8832:	4629      	mov	r1, r5
   d8834:	f001 fd02 	bl	da23c <__aeabi_dcmpeq>
   d8838:	2800      	cmp	r0, #0
   d883a:	d08a      	beq.n	d8752 <pow+0x9a>
   d883c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d8978 <pow+0x2c0>
   d8840:	4b52      	ldr	r3, [pc, #328]	; (d898c <pow+0x2d4>)
   d8842:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d8846:	2201      	movs	r2, #1
   d8848:	f1b9 0f02 	cmp.w	r9, #2
   d884c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8850:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8854:	ed8d 8b08 	vstr	d8, [sp, #32]
   d8858:	9202      	str	r2, [sp, #8]
   d885a:	9303      	str	r3, [sp, #12]
   d885c:	f43f af79 	beq.w	d8752 <pow+0x9a>
   d8860:	a802      	add	r0, sp, #8
   d8862:	f000 ff95 	bl	d9790 <matherr>
   d8866:	2800      	cmp	r0, #0
   d8868:	d051      	beq.n	d890e <pow+0x256>
   d886a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d886c:	b11b      	cbz	r3, d8876 <pow+0x1be>
   d886e:	f7fe faa5 	bl	d6dbc <__errno>
   d8872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8874:	6003      	str	r3, [r0, #0]
   d8876:	ed9d 8b08 	vldr	d8, [sp, #32]
   d887a:	e76a      	b.n	d8752 <pow+0x9a>
   d887c:	ec47 6b10 	vmov	d0, r6, r7
   d8880:	f000 ff7a 	bl	d9778 <finite>
   d8884:	2800      	cmp	r0, #0
   d8886:	f43f af77 	beq.w	d8778 <pow+0xc0>
   d888a:	ec45 4b10 	vmov	d0, r4, r5
   d888e:	f000 ff73 	bl	d9778 <finite>
   d8892:	2800      	cmp	r0, #0
   d8894:	f43f af70 	beq.w	d8778 <pow+0xc0>
   d8898:	ec53 2b18 	vmov	r2, r3, d8
   d889c:	ee18 0a10 	vmov	r0, s16
   d88a0:	4619      	mov	r1, r3
   d88a2:	f001 fcfd 	bl	da2a0 <__aeabi_dcmpun>
   d88a6:	4b38      	ldr	r3, [pc, #224]	; (d8988 <pow+0x2d0>)
   d88a8:	2800      	cmp	r0, #0
   d88aa:	f040 8096 	bne.w	d89da <pow+0x322>
   d88ae:	f993 8000 	ldrsb.w	r8, [r3]
   d88b2:	900a      	str	r0, [sp, #40]	; 0x28
   d88b4:	2303      	movs	r3, #3
   d88b6:	9302      	str	r3, [sp, #8]
   d88b8:	4b34      	ldr	r3, [pc, #208]	; (d898c <pow+0x2d4>)
   d88ba:	9303      	str	r3, [sp, #12]
   d88bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d88c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d88c4:	f1b8 0f00 	cmp.w	r8, #0
   d88c8:	d126      	bne.n	d8918 <pow+0x260>
   d88ca:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d899c <pow+0x2e4>
   d88ce:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d88d2:	4652      	mov	r2, sl
   d88d4:	465b      	mov	r3, fp
   d88d6:	4630      	mov	r0, r6
   d88d8:	4639      	mov	r1, r7
   d88da:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d88de:	f001 fcb7 	bl	da250 <__aeabi_dcmplt>
   d88e2:	bb48      	cbnz	r0, d8938 <pow+0x280>
   d88e4:	a802      	add	r0, sp, #8
   d88e6:	f000 ff53 	bl	d9790 <matherr>
   d88ea:	2800      	cmp	r0, #0
   d88ec:	d19b      	bne.n	d8826 <pow+0x16e>
   d88ee:	f7fe fa65 	bl	d6dbc <__errno>
   d88f2:	2322      	movs	r3, #34	; 0x22
   d88f4:	6003      	str	r3, [r0, #0]
   d88f6:	e796      	b.n	d8826 <pow+0x16e>
   d88f8:	4925      	ldr	r1, [pc, #148]	; (d8990 <pow+0x2d8>)
   d88fa:	2000      	movs	r0, #0
   d88fc:	2b02      	cmp	r3, #2
   d88fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8902:	d18b      	bne.n	d881c <pow+0x164>
   d8904:	f7fe fa5a 	bl	d6dbc <__errno>
   d8908:	2321      	movs	r3, #33	; 0x21
   d890a:	6003      	str	r3, [r0, #0]
   d890c:	e78b      	b.n	d8826 <pow+0x16e>
   d890e:	f7fe fa55 	bl	d6dbc <__errno>
   d8912:	2321      	movs	r3, #33	; 0x21
   d8914:	6003      	str	r3, [r0, #0]
   d8916:	e7a8      	b.n	d886a <pow+0x1b2>
   d8918:	ed9f 7b19 	vldr	d7, [pc, #100]	; d8980 <pow+0x2c8>
   d891c:	4652      	mov	r2, sl
   d891e:	465b      	mov	r3, fp
   d8920:	4630      	mov	r0, r6
   d8922:	4639      	mov	r1, r7
   d8924:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8928:	f001 fc92 	bl	da250 <__aeabi_dcmplt>
   d892c:	2800      	cmp	r0, #0
   d892e:	d137      	bne.n	d89a0 <pow+0x2e8>
   d8930:	f1b8 0f02 	cmp.w	r8, #2
   d8934:	d0db      	beq.n	d88ee <pow+0x236>
   d8936:	e7d5      	b.n	d88e4 <pow+0x22c>
   d8938:	4b16      	ldr	r3, [pc, #88]	; (d8994 <pow+0x2dc>)
   d893a:	2200      	movs	r2, #0
   d893c:	4620      	mov	r0, r4
   d893e:	4629      	mov	r1, r5
   d8940:	f001 fa14 	bl	d9d6c <__aeabi_dmul>
   d8944:	4602      	mov	r2, r0
   d8946:	460b      	mov	r3, r1
   d8948:	ec43 2b10 	vmov	d0, r2, r3
   d894c:	e9cd 2300 	strd	r2, r3, [sp]
   d8950:	f000 ff2a 	bl	d97a8 <rint>
   d8954:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8958:	ec51 0b10 	vmov	r0, r1, d0
   d895c:	f001 fc6e 	bl	da23c <__aeabi_dcmpeq>
   d8960:	2800      	cmp	r0, #0
   d8962:	d136      	bne.n	d89d2 <pow+0x31a>
   d8964:	4b0c      	ldr	r3, [pc, #48]	; (d8998 <pow+0x2e0>)
   d8966:	4908      	ldr	r1, [pc, #32]	; (d8988 <pow+0x2d0>)
   d8968:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d896c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8970:	f991 8000 	ldrsb.w	r8, [r1]
   d8974:	e7dc      	b.n	d8930 <pow+0x278>
   d8976:	bf00      	nop
   d8978:	00000000 	.word	0x00000000
   d897c:	3ff00000 	.word	0x3ff00000
   d8980:	00000000 	.word	0x00000000
   d8984:	7ff00000 	.word	0x7ff00000
   d8988:	2003e1cc 	.word	0x2003e1cc
   d898c:	000dd78c 	.word	0x000dd78c
   d8990:	fff00000 	.word	0xfff00000
   d8994:	3fe00000 	.word	0x3fe00000
   d8998:	c7efffff 	.word	0xc7efffff
   d899c:	47efffff 	.word	0x47efffff
   d89a0:	4b1c      	ldr	r3, [pc, #112]	; (d8a14 <pow+0x35c>)
   d89a2:	2200      	movs	r2, #0
   d89a4:	4620      	mov	r0, r4
   d89a6:	4629      	mov	r1, r5
   d89a8:	f001 f9e0 	bl	d9d6c <__aeabi_dmul>
   d89ac:	4602      	mov	r2, r0
   d89ae:	460b      	mov	r3, r1
   d89b0:	ec43 2b10 	vmov	d0, r2, r3
   d89b4:	e9cd 2300 	strd	r2, r3, [sp]
   d89b8:	f000 fef6 	bl	d97a8 <rint>
   d89bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d89c0:	ec51 0b10 	vmov	r0, r1, d0
   d89c4:	f001 fc3a 	bl	da23c <__aeabi_dcmpeq>
   d89c8:	b918      	cbnz	r0, d89d2 <pow+0x31a>
   d89ca:	4b13      	ldr	r3, [pc, #76]	; (d8a18 <pow+0x360>)
   d89cc:	2200      	movs	r2, #0
   d89ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d89d2:	4b12      	ldr	r3, [pc, #72]	; (d8a1c <pow+0x364>)
   d89d4:	f993 8000 	ldrsb.w	r8, [r3]
   d89d8:	e7aa      	b.n	d8930 <pow+0x278>
   d89da:	f993 9000 	ldrsb.w	r9, [r3]
   d89de:	4b10      	ldr	r3, [pc, #64]	; (d8a20 <pow+0x368>)
   d89e0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d89e4:	2201      	movs	r2, #1
   d89e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d89ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d89ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d89f2:	f1b9 0f00 	cmp.w	r9, #0
   d89f6:	f43f af0f 	beq.w	d8818 <pow+0x160>
   d89fa:	4652      	mov	r2, sl
   d89fc:	465b      	mov	r3, fp
   d89fe:	4650      	mov	r0, sl
   d8a00:	4659      	mov	r1, fp
   d8a02:	f001 fadd 	bl	d9fc0 <__aeabi_ddiv>
   d8a06:	f1b9 0f02 	cmp.w	r9, #2
   d8a0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8a0e:	f43f af79 	beq.w	d8904 <pow+0x24c>
   d8a12:	e703      	b.n	d881c <pow+0x164>
   d8a14:	3fe00000 	.word	0x3fe00000
   d8a18:	fff00000 	.word	0xfff00000
   d8a1c:	2003e1cc 	.word	0x2003e1cc
   d8a20:	000dd78c 	.word	0x000dd78c
   d8a24:	00000000 	.word	0x00000000

000d8a28 <__ieee754_pow>:
   d8a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a2c:	ec57 6b11 	vmov	r6, r7, d1
   d8a30:	ed2d 8b0a 	vpush	{d8-d12}
   d8a34:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d8a38:	ea5a 0206 	orrs.w	r2, sl, r6
   d8a3c:	b089      	sub	sp, #36	; 0x24
   d8a3e:	d03d      	beq.n	d8abc <__ieee754_pow+0x94>
   d8a40:	ec55 4b10 	vmov	r4, r5, d0
   d8a44:	4976      	ldr	r1, [pc, #472]	; (d8c20 <__ieee754_pow+0x1f8>)
   d8a46:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d8a4a:	4588      	cmp	r8, r1
   d8a4c:	ee10 2a10 	vmov	r2, s0
   d8a50:	46a9      	mov	r9, r5
   d8a52:	dc2c      	bgt.n	d8aae <__ieee754_pow+0x86>
   d8a54:	ee11 3a10 	vmov	r3, s2
   d8a58:	46bb      	mov	fp, r7
   d8a5a:	d03a      	beq.n	d8ad2 <__ieee754_pow+0xaa>
   d8a5c:	458a      	cmp	sl, r1
   d8a5e:	dc26      	bgt.n	d8aae <__ieee754_pow+0x86>
   d8a60:	496f      	ldr	r1, [pc, #444]	; (d8c20 <__ieee754_pow+0x1f8>)
   d8a62:	458a      	cmp	sl, r1
   d8a64:	d021      	beq.n	d8aaa <__ieee754_pow+0x82>
   d8a66:	f1b9 0f00 	cmp.w	r9, #0
   d8a6a:	db3d      	blt.n	d8ae8 <__ieee754_pow+0xc0>
   d8a6c:	2100      	movs	r1, #0
   d8a6e:	9103      	str	r1, [sp, #12]
   d8a70:	2b00      	cmp	r3, #0
   d8a72:	d155      	bne.n	d8b20 <__ieee754_pow+0xf8>
   d8a74:	4b6a      	ldr	r3, [pc, #424]	; (d8c20 <__ieee754_pow+0x1f8>)
   d8a76:	459a      	cmp	sl, r3
   d8a78:	f000 80a8 	beq.w	d8bcc <__ieee754_pow+0x1a4>
   d8a7c:	4b69      	ldr	r3, [pc, #420]	; (d8c24 <__ieee754_pow+0x1fc>)
   d8a7e:	459a      	cmp	sl, r3
   d8a80:	f000 80b6 	beq.w	d8bf0 <__ieee754_pow+0x1c8>
   d8a84:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d8a88:	f000 8501 	beq.w	d948e <__ieee754_pow+0xa66>
   d8a8c:	4b66      	ldr	r3, [pc, #408]	; (d8c28 <__ieee754_pow+0x200>)
   d8a8e:	459b      	cmp	fp, r3
   d8a90:	d146      	bne.n	d8b20 <__ieee754_pow+0xf8>
   d8a92:	f1b9 0f00 	cmp.w	r9, #0
   d8a96:	db43      	blt.n	d8b20 <__ieee754_pow+0xf8>
   d8a98:	ec45 4b10 	vmov	d0, r4, r5
   d8a9c:	b009      	add	sp, #36	; 0x24
   d8a9e:	ecbd 8b0a 	vpop	{d8-d12}
   d8aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8aa6:	f000 bd99 	b.w	d95dc <__ieee754_sqrt>
   d8aaa:	2b00      	cmp	r3, #0
   d8aac:	d0db      	beq.n	d8a66 <__ieee754_pow+0x3e>
   d8aae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8ab2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8ab6:	ea58 0302 	orrs.w	r3, r8, r2
   d8aba:	d10d      	bne.n	d8ad8 <__ieee754_pow+0xb0>
   d8abc:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8c10 <__ieee754_pow+0x1e8>
   d8ac0:	ed8d 7b00 	vstr	d7, [sp]
   d8ac4:	ed9d 0b00 	vldr	d0, [sp]
   d8ac8:	b009      	add	sp, #36	; 0x24
   d8aca:	ecbd 8b0a 	vpop	{d8-d12}
   d8ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ad2:	b90c      	cbnz	r4, d8ad8 <__ieee754_pow+0xb0>
   d8ad4:	45c2      	cmp	sl, r8
   d8ad6:	ddc3      	ble.n	d8a60 <__ieee754_pow+0x38>
   d8ad8:	4854      	ldr	r0, [pc, #336]	; (d8c2c <__ieee754_pow+0x204>)
   d8ada:	b009      	add	sp, #36	; 0x24
   d8adc:	ecbd 8b0a 	vpop	{d8-d12}
   d8ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ae4:	f000 be58 	b.w	d9798 <nan>
   d8ae8:	4951      	ldr	r1, [pc, #324]	; (d8c30 <__ieee754_pow+0x208>)
   d8aea:	458a      	cmp	sl, r1
   d8aec:	f300 8087 	bgt.w	d8bfe <__ieee754_pow+0x1d6>
   d8af0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d8af4:	458a      	cmp	sl, r1
   d8af6:	dd0f      	ble.n	d8b18 <__ieee754_pow+0xf0>
   d8af8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d8afc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8b00:	2914      	cmp	r1, #20
   d8b02:	f340 84ce 	ble.w	d94a2 <__ieee754_pow+0xa7a>
   d8b06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d8b0a:	fa23 f001 	lsr.w	r0, r3, r1
   d8b0e:	fa00 f101 	lsl.w	r1, r0, r1
   d8b12:	4299      	cmp	r1, r3
   d8b14:	f000 8520 	beq.w	d9558 <__ieee754_pow+0xb30>
   d8b18:	2100      	movs	r1, #0
   d8b1a:	9103      	str	r1, [sp, #12]
   d8b1c:	2b00      	cmp	r3, #0
   d8b1e:	d0ad      	beq.n	d8a7c <__ieee754_pow+0x54>
   d8b20:	ec45 4b10 	vmov	d0, r4, r5
   d8b24:	9206      	str	r2, [sp, #24]
   d8b26:	f000 fe1d 	bl	d9764 <fabs>
   d8b2a:	9a06      	ldr	r2, [sp, #24]
   d8b2c:	ed8d 0b00 	vstr	d0, [sp]
   d8b30:	bb5a      	cbnz	r2, d8b8a <__ieee754_pow+0x162>
   d8b32:	f1b8 0f00 	cmp.w	r8, #0
   d8b36:	d004      	beq.n	d8b42 <__ieee754_pow+0x11a>
   d8b38:	4b3a      	ldr	r3, [pc, #232]	; (d8c24 <__ieee754_pow+0x1fc>)
   d8b3a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d8b3e:	429a      	cmp	r2, r3
   d8b40:	d123      	bne.n	d8b8a <__ieee754_pow+0x162>
   d8b42:	f1bb 0f00 	cmp.w	fp, #0
   d8b46:	da07      	bge.n	d8b58 <__ieee754_pow+0x130>
   d8b48:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8b4c:	4935      	ldr	r1, [pc, #212]	; (d8c24 <__ieee754_pow+0x1fc>)
   d8b4e:	2000      	movs	r0, #0
   d8b50:	f001 fa36 	bl	d9fc0 <__aeabi_ddiv>
   d8b54:	e9cd 0100 	strd	r0, r1, [sp]
   d8b58:	f1b9 0f00 	cmp.w	r9, #0
   d8b5c:	dab2      	bge.n	d8ac4 <__ieee754_pow+0x9c>
   d8b5e:	9b03      	ldr	r3, [sp, #12]
   d8b60:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8b64:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8b68:	ea58 0303 	orrs.w	r3, r8, r3
   d8b6c:	f040 84be 	bne.w	d94ec <__ieee754_pow+0xac4>
   d8b70:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8b74:	4610      	mov	r0, r2
   d8b76:	4619      	mov	r1, r3
   d8b78:	f000 ff40 	bl	d99fc <__aeabi_dsub>
   d8b7c:	4602      	mov	r2, r0
   d8b7e:	460b      	mov	r3, r1
   d8b80:	f001 fa1e 	bl	d9fc0 <__aeabi_ddiv>
   d8b84:	e9cd 0100 	strd	r0, r1, [sp]
   d8b88:	e79c      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d8b8a:	9a03      	ldr	r2, [sp, #12]
   d8b8c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d8b90:	3b01      	subs	r3, #1
   d8b92:	9306      	str	r3, [sp, #24]
   d8b94:	4313      	orrs	r3, r2
   d8b96:	d035      	beq.n	d8c04 <__ieee754_pow+0x1dc>
   d8b98:	4b26      	ldr	r3, [pc, #152]	; (d8c34 <__ieee754_pow+0x20c>)
   d8b9a:	459a      	cmp	sl, r3
   d8b9c:	dd4e      	ble.n	d8c3c <__ieee754_pow+0x214>
   d8b9e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8ba2:	459a      	cmp	sl, r3
   d8ba4:	4b24      	ldr	r3, [pc, #144]	; (d8c38 <__ieee754_pow+0x210>)
   d8ba6:	f340 83ed 	ble.w	d9384 <__ieee754_pow+0x95c>
   d8baa:	4598      	cmp	r8, r3
   d8bac:	f340 836b 	ble.w	d9286 <__ieee754_pow+0x85e>
   d8bb0:	f1bb 0f00 	cmp.w	fp, #0
   d8bb4:	f340 836b 	ble.w	d928e <__ieee754_pow+0x866>
   d8bb8:	a317      	add	r3, pc, #92	; (adr r3, d8c18 <__ieee754_pow+0x1f0>)
   d8bba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bbe:	4610      	mov	r0, r2
   d8bc0:	4619      	mov	r1, r3
   d8bc2:	f001 f8d3 	bl	d9d6c <__aeabi_dmul>
   d8bc6:	e9cd 0100 	strd	r0, r1, [sp]
   d8bca:	e77b      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d8bcc:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8bd0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8bd4:	4313      	orrs	r3, r2
   d8bd6:	f43f af71 	beq.w	d8abc <__ieee754_pow+0x94>
   d8bda:	4b17      	ldr	r3, [pc, #92]	; (d8c38 <__ieee754_pow+0x210>)
   d8bdc:	4598      	cmp	r8, r3
   d8bde:	f340 8388 	ble.w	d92f2 <__ieee754_pow+0x8ca>
   d8be2:	f1bb 0f00 	cmp.w	fp, #0
   d8be6:	f2c0 8352 	blt.w	d928e <__ieee754_pow+0x866>
   d8bea:	e9cd 6700 	strd	r6, r7, [sp]
   d8bee:	e769      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d8bf0:	f1bb 0f00 	cmp.w	fp, #0
   d8bf4:	f2c0 8441 	blt.w	d947a <__ieee754_pow+0xa52>
   d8bf8:	e9cd 4500 	strd	r4, r5, [sp]
   d8bfc:	e762      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d8bfe:	2102      	movs	r1, #2
   d8c00:	9103      	str	r1, [sp, #12]
   d8c02:	e735      	b.n	d8a70 <__ieee754_pow+0x48>
   d8c04:	4622      	mov	r2, r4
   d8c06:	462b      	mov	r3, r5
   d8c08:	e7b4      	b.n	d8b74 <__ieee754_pow+0x14c>
   d8c0a:	bf00      	nop
   d8c0c:	f3af 8000 	nop.w
   d8c10:	00000000 	.word	0x00000000
   d8c14:	3ff00000 	.word	0x3ff00000
   d8c18:	8800759c 	.word	0x8800759c
   d8c1c:	7e37e43c 	.word	0x7e37e43c
   d8c20:	7ff00000 	.word	0x7ff00000
   d8c24:	3ff00000 	.word	0x3ff00000
   d8c28:	3fe00000 	.word	0x3fe00000
   d8c2c:	000dd790 	.word	0x000dd790
   d8c30:	433fffff 	.word	0x433fffff
   d8c34:	41e00000 	.word	0x41e00000
   d8c38:	3fefffff 	.word	0x3fefffff
   d8c3c:	4be4      	ldr	r3, [pc, #912]	; (d8fd0 <__ieee754_pow+0x5a8>)
   d8c3e:	ea09 0303 	and.w	r3, r9, r3
   d8c42:	2b00      	cmp	r3, #0
   d8c44:	f040 8416 	bne.w	d9474 <__ieee754_pow+0xa4c>
   d8c48:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8c4c:	4be1      	ldr	r3, [pc, #900]	; (d8fd4 <__ieee754_pow+0x5ac>)
   d8c4e:	2200      	movs	r2, #0
   d8c50:	f001 f88c 	bl	d9d6c <__aeabi_dmul>
   d8c54:	e9cd 0100 	strd	r0, r1, [sp]
   d8c58:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d8c5c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d8c60:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8c64:	49dc      	ldr	r1, [pc, #880]	; (d8fd8 <__ieee754_pow+0x5b0>)
   d8c66:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d8c6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8c6e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d8c72:	1818      	adds	r0, r3, r0
   d8c74:	428a      	cmp	r2, r1
   d8c76:	9007      	str	r0, [sp, #28]
   d8c78:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d8c7c:	f340 83e9 	ble.w	d9452 <__ieee754_pow+0xa2a>
   d8c80:	4bd6      	ldr	r3, [pc, #856]	; (d8fdc <__ieee754_pow+0x5b4>)
   d8c82:	429a      	cmp	r2, r3
   d8c84:	f340 843e 	ble.w	d9504 <__ieee754_pow+0xadc>
   d8c88:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d8f78 <__ieee754_pow+0x550>
   d8c8c:	eeb0 ba47 	vmov.f32	s22, s14
   d8c90:	eef0 ba67 	vmov.f32	s23, s15
   d8c94:	eeb0 ca47 	vmov.f32	s24, s14
   d8c98:	eef0 ca67 	vmov.f32	s25, s15
   d8c9c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d8f80 <__ieee754_pow+0x558>
   d8ca0:	3001      	adds	r0, #1
   d8ca2:	ec54 3b17 	vmov	r3, r4, d7
   d8ca6:	9007      	str	r0, [sp, #28]
   d8ca8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d8cac:	f04f 0900 	mov.w	r9, #0
   d8cb0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8cb4:	ec44 3b18 	vmov	d8, r3, r4
   d8cb8:	461a      	mov	r2, r3
   d8cba:	4650      	mov	r0, sl
   d8cbc:	4623      	mov	r3, r4
   d8cbe:	4641      	mov	r1, r8
   d8cc0:	f000 fe9c 	bl	d99fc <__aeabi_dsub>
   d8cc4:	ec53 2b18 	vmov	r2, r3, d8
   d8cc8:	4604      	mov	r4, r0
   d8cca:	460d      	mov	r5, r1
   d8ccc:	4650      	mov	r0, sl
   d8cce:	4641      	mov	r1, r8
   d8cd0:	f000 fe96 	bl	d9a00 <__adddf3>
   d8cd4:	4602      	mov	r2, r0
   d8cd6:	460b      	mov	r3, r1
   d8cd8:	2000      	movs	r0, #0
   d8cda:	49c1      	ldr	r1, [pc, #772]	; (d8fe0 <__ieee754_pow+0x5b8>)
   d8cdc:	f001 f970 	bl	d9fc0 <__aeabi_ddiv>
   d8ce0:	ec45 4b1a 	vmov	d10, r4, r5
   d8ce4:	ec41 0b19 	vmov	d9, r0, r1
   d8ce8:	ec51 0b1a 	vmov	r0, r1, d10
   d8cec:	ec53 2b19 	vmov	r2, r3, d9
   d8cf0:	f001 f83c 	bl	d9d6c <__aeabi_dmul>
   d8cf4:	46c3      	mov	fp, r8
   d8cf6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d8cfa:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d8cfe:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8d02:	eb03 0509 	add.w	r5, r3, r9
   d8d06:	460a      	mov	r2, r1
   d8d08:	2300      	movs	r3, #0
   d8d0a:	4601      	mov	r1, r0
   d8d0c:	e9cd 1200 	strd	r1, r2, [sp]
   d8d10:	9300      	str	r3, [sp, #0]
   d8d12:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8d16:	2400      	movs	r4, #0
   d8d18:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8d1c:	462b      	mov	r3, r5
   d8d1e:	4622      	mov	r2, r4
   d8d20:	4640      	mov	r0, r8
   d8d22:	4649      	mov	r1, r9
   d8d24:	f001 f822 	bl	d9d6c <__aeabi_dmul>
   d8d28:	4602      	mov	r2, r0
   d8d2a:	460b      	mov	r3, r1
   d8d2c:	ec51 0b1a 	vmov	r0, r1, d10
   d8d30:	f000 fe64 	bl	d99fc <__aeabi_dsub>
   d8d34:	ec41 0b17 	vmov	d7, r0, r1
   d8d38:	ec53 2b18 	vmov	r2, r3, d8
   d8d3c:	4620      	mov	r0, r4
   d8d3e:	4629      	mov	r1, r5
   d8d40:	ec55 4b17 	vmov	r4, r5, d7
   d8d44:	f000 fe5a 	bl	d99fc <__aeabi_dsub>
   d8d48:	4602      	mov	r2, r0
   d8d4a:	460b      	mov	r3, r1
   d8d4c:	4650      	mov	r0, sl
   d8d4e:	4659      	mov	r1, fp
   d8d50:	f000 fe54 	bl	d99fc <__aeabi_dsub>
   d8d54:	4642      	mov	r2, r8
   d8d56:	464b      	mov	r3, r9
   d8d58:	f001 f808 	bl	d9d6c <__aeabi_dmul>
   d8d5c:	4602      	mov	r2, r0
   d8d5e:	460b      	mov	r3, r1
   d8d60:	4620      	mov	r0, r4
   d8d62:	4629      	mov	r1, r5
   d8d64:	f000 fe4a 	bl	d99fc <__aeabi_dsub>
   d8d68:	ec53 2b19 	vmov	r2, r3, d9
   d8d6c:	f000 fffe 	bl	d9d6c <__aeabi_dmul>
   d8d70:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8d74:	4604      	mov	r4, r0
   d8d76:	460d      	mov	r5, r1
   d8d78:	4652      	mov	r2, sl
   d8d7a:	465b      	mov	r3, fp
   d8d7c:	4650      	mov	r0, sl
   d8d7e:	4659      	mov	r1, fp
   d8d80:	f000 fff4 	bl	d9d6c <__aeabi_dmul>
   d8d84:	a380      	add	r3, pc, #512	; (adr r3, d8f88 <__ieee754_pow+0x560>)
   d8d86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d8a:	ec45 4b1a 	vmov	d10, r4, r5
   d8d8e:	4604      	mov	r4, r0
   d8d90:	460d      	mov	r5, r1
   d8d92:	f000 ffeb 	bl	d9d6c <__aeabi_dmul>
   d8d96:	a37e      	add	r3, pc, #504	; (adr r3, d8f90 <__ieee754_pow+0x568>)
   d8d98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d9c:	f000 fe30 	bl	d9a00 <__adddf3>
   d8da0:	4622      	mov	r2, r4
   d8da2:	462b      	mov	r3, r5
   d8da4:	f000 ffe2 	bl	d9d6c <__aeabi_dmul>
   d8da8:	a37b      	add	r3, pc, #492	; (adr r3, d8f98 <__ieee754_pow+0x570>)
   d8daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dae:	f000 fe27 	bl	d9a00 <__adddf3>
   d8db2:	4622      	mov	r2, r4
   d8db4:	462b      	mov	r3, r5
   d8db6:	f000 ffd9 	bl	d9d6c <__aeabi_dmul>
   d8dba:	a379      	add	r3, pc, #484	; (adr r3, d8fa0 <__ieee754_pow+0x578>)
   d8dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dc0:	f000 fe1e 	bl	d9a00 <__adddf3>
   d8dc4:	4622      	mov	r2, r4
   d8dc6:	462b      	mov	r3, r5
   d8dc8:	f000 ffd0 	bl	d9d6c <__aeabi_dmul>
   d8dcc:	a376      	add	r3, pc, #472	; (adr r3, d8fa8 <__ieee754_pow+0x580>)
   d8dce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dd2:	f000 fe15 	bl	d9a00 <__adddf3>
   d8dd6:	4622      	mov	r2, r4
   d8dd8:	462b      	mov	r3, r5
   d8dda:	f000 ffc7 	bl	d9d6c <__aeabi_dmul>
   d8dde:	a374      	add	r3, pc, #464	; (adr r3, d8fb0 <__ieee754_pow+0x588>)
   d8de0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8de4:	f000 fe0c 	bl	d9a00 <__adddf3>
   d8de8:	4622      	mov	r2, r4
   d8dea:	462b      	mov	r3, r5
   d8dec:	4604      	mov	r4, r0
   d8dee:	460d      	mov	r5, r1
   d8df0:	4610      	mov	r0, r2
   d8df2:	4619      	mov	r1, r3
   d8df4:	f000 ffba 	bl	d9d6c <__aeabi_dmul>
   d8df8:	4602      	mov	r2, r0
   d8dfa:	460b      	mov	r3, r1
   d8dfc:	4620      	mov	r0, r4
   d8dfe:	4629      	mov	r1, r5
   d8e00:	f000 ffb4 	bl	d9d6c <__aeabi_dmul>
   d8e04:	4642      	mov	r2, r8
   d8e06:	4604      	mov	r4, r0
   d8e08:	460d      	mov	r5, r1
   d8e0a:	464b      	mov	r3, r9
   d8e0c:	4650      	mov	r0, sl
   d8e0e:	4659      	mov	r1, fp
   d8e10:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d8e14:	f000 fdf4 	bl	d9a00 <__adddf3>
   d8e18:	ec53 2b1a 	vmov	r2, r3, d10
   d8e1c:	f000 ffa6 	bl	d9d6c <__aeabi_dmul>
   d8e20:	4622      	mov	r2, r4
   d8e22:	462b      	mov	r3, r5
   d8e24:	f000 fdec 	bl	d9a00 <__adddf3>
   d8e28:	4642      	mov	r2, r8
   d8e2a:	4604      	mov	r4, r0
   d8e2c:	460d      	mov	r5, r1
   d8e2e:	464b      	mov	r3, r9
   d8e30:	4640      	mov	r0, r8
   d8e32:	4649      	mov	r1, r9
   d8e34:	f000 ff9a 	bl	d9d6c <__aeabi_dmul>
   d8e38:	ec45 4b19 	vmov	d9, r4, r5
   d8e3c:	4b69      	ldr	r3, [pc, #420]	; (d8fe4 <__ieee754_pow+0x5bc>)
   d8e3e:	2200      	movs	r2, #0
   d8e40:	4682      	mov	sl, r0
   d8e42:	468b      	mov	fp, r1
   d8e44:	f000 fddc 	bl	d9a00 <__adddf3>
   d8e48:	ec53 2b19 	vmov	r2, r3, d9
   d8e4c:	f000 fdd8 	bl	d9a00 <__adddf3>
   d8e50:	9c00      	ldr	r4, [sp, #0]
   d8e52:	460d      	mov	r5, r1
   d8e54:	4622      	mov	r2, r4
   d8e56:	462b      	mov	r3, r5
   d8e58:	4640      	mov	r0, r8
   d8e5a:	4649      	mov	r1, r9
   d8e5c:	f000 ff86 	bl	d9d6c <__aeabi_dmul>
   d8e60:	4b60      	ldr	r3, [pc, #384]	; (d8fe4 <__ieee754_pow+0x5bc>)
   d8e62:	4680      	mov	r8, r0
   d8e64:	4689      	mov	r9, r1
   d8e66:	2200      	movs	r2, #0
   d8e68:	4620      	mov	r0, r4
   d8e6a:	4629      	mov	r1, r5
   d8e6c:	f000 fdc6 	bl	d99fc <__aeabi_dsub>
   d8e70:	4652      	mov	r2, sl
   d8e72:	465b      	mov	r3, fp
   d8e74:	f000 fdc2 	bl	d99fc <__aeabi_dsub>
   d8e78:	4602      	mov	r2, r0
   d8e7a:	460b      	mov	r3, r1
   d8e7c:	ec51 0b19 	vmov	r0, r1, d9
   d8e80:	f000 fdbc 	bl	d99fc <__aeabi_dsub>
   d8e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8e88:	f000 ff70 	bl	d9d6c <__aeabi_dmul>
   d8e8c:	ec49 8b18 	vmov	d8, r8, r9
   d8e90:	4622      	mov	r2, r4
   d8e92:	4680      	mov	r8, r0
   d8e94:	4689      	mov	r9, r1
   d8e96:	462b      	mov	r3, r5
   d8e98:	ec51 0b1a 	vmov	r0, r1, d10
   d8e9c:	f000 ff66 	bl	d9d6c <__aeabi_dmul>
   d8ea0:	4602      	mov	r2, r0
   d8ea2:	460b      	mov	r3, r1
   d8ea4:	4640      	mov	r0, r8
   d8ea6:	4649      	mov	r1, r9
   d8ea8:	f000 fdaa 	bl	d9a00 <__adddf3>
   d8eac:	4682      	mov	sl, r0
   d8eae:	468b      	mov	fp, r1
   d8eb0:	4652      	mov	r2, sl
   d8eb2:	465b      	mov	r3, fp
   d8eb4:	ec51 0b18 	vmov	r0, r1, d8
   d8eb8:	f000 fda2 	bl	d9a00 <__adddf3>
   d8ebc:	9c00      	ldr	r4, [sp, #0]
   d8ebe:	a33e      	add	r3, pc, #248	; (adr r3, d8fb8 <__ieee754_pow+0x590>)
   d8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ec4:	4620      	mov	r0, r4
   d8ec6:	460d      	mov	r5, r1
   d8ec8:	f000 ff50 	bl	d9d6c <__aeabi_dmul>
   d8ecc:	ec53 2b18 	vmov	r2, r3, d8
   d8ed0:	4680      	mov	r8, r0
   d8ed2:	4689      	mov	r9, r1
   d8ed4:	4620      	mov	r0, r4
   d8ed6:	4629      	mov	r1, r5
   d8ed8:	f000 fd90 	bl	d99fc <__aeabi_dsub>
   d8edc:	4602      	mov	r2, r0
   d8ede:	460b      	mov	r3, r1
   d8ee0:	4650      	mov	r0, sl
   d8ee2:	4659      	mov	r1, fp
   d8ee4:	f000 fd8a 	bl	d99fc <__aeabi_dsub>
   d8ee8:	a335      	add	r3, pc, #212	; (adr r3, d8fc0 <__ieee754_pow+0x598>)
   d8eea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8eee:	f000 ff3d 	bl	d9d6c <__aeabi_dmul>
   d8ef2:	ec49 8b19 	vmov	d9, r8, r9
   d8ef6:	a334      	add	r3, pc, #208	; (adr r3, d8fc8 <__ieee754_pow+0x5a0>)
   d8ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8efc:	4680      	mov	r8, r0
   d8efe:	4689      	mov	r9, r1
   d8f00:	4620      	mov	r0, r4
   d8f02:	4629      	mov	r1, r5
   d8f04:	f000 ff32 	bl	d9d6c <__aeabi_dmul>
   d8f08:	4602      	mov	r2, r0
   d8f0a:	460b      	mov	r3, r1
   d8f0c:	4640      	mov	r0, r8
   d8f0e:	4649      	mov	r1, r9
   d8f10:	f000 fd76 	bl	d9a00 <__adddf3>
   d8f14:	ec53 2b1c 	vmov	r2, r3, d12
   d8f18:	f000 fd72 	bl	d9a00 <__adddf3>
   d8f1c:	4682      	mov	sl, r0
   d8f1e:	9807      	ldr	r0, [sp, #28]
   d8f20:	468b      	mov	fp, r1
   d8f22:	f000 feb9 	bl	d9c98 <__aeabi_i2d>
   d8f26:	4652      	mov	r2, sl
   d8f28:	4680      	mov	r8, r0
   d8f2a:	4689      	mov	r9, r1
   d8f2c:	465b      	mov	r3, fp
   d8f2e:	ec51 0b19 	vmov	r0, r1, d9
   d8f32:	f000 fd65 	bl	d9a00 <__adddf3>
   d8f36:	ec53 2b1b 	vmov	r2, r3, d11
   d8f3a:	f000 fd61 	bl	d9a00 <__adddf3>
   d8f3e:	4642      	mov	r2, r8
   d8f40:	464b      	mov	r3, r9
   d8f42:	f000 fd5d 	bl	d9a00 <__adddf3>
   d8f46:	9c00      	ldr	r4, [sp, #0]
   d8f48:	4642      	mov	r2, r8
   d8f4a:	464b      	mov	r3, r9
   d8f4c:	4620      	mov	r0, r4
   d8f4e:	460d      	mov	r5, r1
   d8f50:	f000 fd54 	bl	d99fc <__aeabi_dsub>
   d8f54:	ec53 2b1b 	vmov	r2, r3, d11
   d8f58:	f000 fd50 	bl	d99fc <__aeabi_dsub>
   d8f5c:	ec53 2b19 	vmov	r2, r3, d9
   d8f60:	f000 fd4c 	bl	d99fc <__aeabi_dsub>
   d8f64:	4602      	mov	r2, r0
   d8f66:	460b      	mov	r3, r1
   d8f68:	4650      	mov	r0, sl
   d8f6a:	4659      	mov	r1, fp
   d8f6c:	f000 fd46 	bl	d99fc <__aeabi_dsub>
   d8f70:	4682      	mov	sl, r0
   d8f72:	468b      	mov	fp, r1
   d8f74:	e038      	b.n	d8fe8 <__ieee754_pow+0x5c0>
   d8f76:	bf00      	nop
	...
   d8f84:	3ff00000 	.word	0x3ff00000
   d8f88:	4a454eef 	.word	0x4a454eef
   d8f8c:	3fca7e28 	.word	0x3fca7e28
   d8f90:	93c9db65 	.word	0x93c9db65
   d8f94:	3fcd864a 	.word	0x3fcd864a
   d8f98:	a91d4101 	.word	0xa91d4101
   d8f9c:	3fd17460 	.word	0x3fd17460
   d8fa0:	518f264d 	.word	0x518f264d
   d8fa4:	3fd55555 	.word	0x3fd55555
   d8fa8:	db6fabff 	.word	0xdb6fabff
   d8fac:	3fdb6db6 	.word	0x3fdb6db6
   d8fb0:	33333303 	.word	0x33333303
   d8fb4:	3fe33333 	.word	0x3fe33333
   d8fb8:	e0000000 	.word	0xe0000000
   d8fbc:	3feec709 	.word	0x3feec709
   d8fc0:	dc3a03fd 	.word	0xdc3a03fd
   d8fc4:	3feec709 	.word	0x3feec709
   d8fc8:	145b01f5 	.word	0x145b01f5
   d8fcc:	be3e2fe0 	.word	0xbe3e2fe0
   d8fd0:	7ff00000 	.word	0x7ff00000
   d8fd4:	43400000 	.word	0x43400000
   d8fd8:	0003988e 	.word	0x0003988e
   d8fdc:	000bb679 	.word	0x000bb679
   d8fe0:	3ff00000 	.word	0x3ff00000
   d8fe4:	40080000 	.word	0x40080000
   d8fe8:	9b03      	ldr	r3, [sp, #12]
   d8fea:	9a06      	ldr	r2, [sp, #24]
   d8fec:	3b01      	subs	r3, #1
   d8fee:	4313      	orrs	r3, r2
   d8ff0:	f040 8178 	bne.w	d92e4 <__ieee754_pow+0x8bc>
   d8ff4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d9308 <__ieee754_pow+0x8e0>
   d8ff8:	eeb0 9a47 	vmov.f32	s18, s14
   d8ffc:	eef0 9a67 	vmov.f32	s19, s15
   d9000:	2300      	movs	r3, #0
   d9002:	e9cd 6700 	strd	r6, r7, [sp]
   d9006:	9300      	str	r3, [sp, #0]
   d9008:	e9dd 8900 	ldrd	r8, r9, [sp]
   d900c:	4630      	mov	r0, r6
   d900e:	4642      	mov	r2, r8
   d9010:	4639      	mov	r1, r7
   d9012:	464b      	mov	r3, r9
   d9014:	f000 fcf2 	bl	d99fc <__aeabi_dsub>
   d9018:	4622      	mov	r2, r4
   d901a:	462b      	mov	r3, r5
   d901c:	f000 fea6 	bl	d9d6c <__aeabi_dmul>
   d9020:	4632      	mov	r2, r6
   d9022:	463b      	mov	r3, r7
   d9024:	4606      	mov	r6, r0
   d9026:	460f      	mov	r7, r1
   d9028:	4650      	mov	r0, sl
   d902a:	4659      	mov	r1, fp
   d902c:	f000 fe9e 	bl	d9d6c <__aeabi_dmul>
   d9030:	4602      	mov	r2, r0
   d9032:	460b      	mov	r3, r1
   d9034:	4630      	mov	r0, r6
   d9036:	4639      	mov	r1, r7
   d9038:	f000 fce2 	bl	d9a00 <__adddf3>
   d903c:	4642      	mov	r2, r8
   d903e:	4682      	mov	sl, r0
   d9040:	468b      	mov	fp, r1
   d9042:	464b      	mov	r3, r9
   d9044:	4620      	mov	r0, r4
   d9046:	4629      	mov	r1, r5
   d9048:	f000 fe90 	bl	d9d6c <__aeabi_dmul>
   d904c:	4606      	mov	r6, r0
   d904e:	460f      	mov	r7, r1
   d9050:	463b      	mov	r3, r7
   d9052:	4650      	mov	r0, sl
   d9054:	4659      	mov	r1, fp
   d9056:	4632      	mov	r2, r6
   d9058:	f000 fcd2 	bl	d9a00 <__adddf3>
   d905c:	4bc4      	ldr	r3, [pc, #784]	; (d9370 <__ieee754_pow+0x948>)
   d905e:	4299      	cmp	r1, r3
   d9060:	4604      	mov	r4, r0
   d9062:	460d      	mov	r5, r1
   d9064:	4688      	mov	r8, r1
   d9066:	f340 8117 	ble.w	d9298 <__ieee754_pow+0x870>
   d906a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d906e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d9072:	4303      	orrs	r3, r0
   d9074:	f040 822a 	bne.w	d94cc <__ieee754_pow+0xaa4>
   d9078:	a3a5      	add	r3, pc, #660	; (adr r3, d9310 <__ieee754_pow+0x8e8>)
   d907a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d907e:	4650      	mov	r0, sl
   d9080:	4659      	mov	r1, fp
   d9082:	f000 fcbd 	bl	d9a00 <__adddf3>
   d9086:	4632      	mov	r2, r6
   d9088:	ec41 0b18 	vmov	d8, r0, r1
   d908c:	463b      	mov	r3, r7
   d908e:	4620      	mov	r0, r4
   d9090:	4629      	mov	r1, r5
   d9092:	f000 fcb3 	bl	d99fc <__aeabi_dsub>
   d9096:	4602      	mov	r2, r0
   d9098:	460b      	mov	r3, r1
   d909a:	ec51 0b18 	vmov	r0, r1, d8
   d909e:	f001 f8f5 	bl	da28c <__aeabi_dcmpgt>
   d90a2:	2800      	cmp	r0, #0
   d90a4:	f040 8212 	bne.w	d94cc <__ieee754_pow+0xaa4>
   d90a8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d90ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d90b0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d90b4:	fa42 f303 	asr.w	r3, r2, r3
   d90b8:	4443      	add	r3, r8
   d90ba:	49ae      	ldr	r1, [pc, #696]	; (d9374 <__ieee754_pow+0x94c>)
   d90bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d90c0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d90c4:	fa41 fc02 	asr.w	ip, r1, r2
   d90c8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d90cc:	ea23 010c 	bic.w	r1, r3, ip
   d90d0:	f1c2 0414 	rsb	r4, r2, #20
   d90d4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d90d8:	f1b8 0f00 	cmp.w	r8, #0
   d90dc:	460b      	mov	r3, r1
   d90de:	fa45 f104 	asr.w	r1, r5, r4
   d90e2:	9103      	str	r1, [sp, #12]
   d90e4:	f04f 0000 	mov.w	r0, #0
   d90e8:	bfb8      	it	lt
   d90ea:	4249      	neglt	r1, r1
   d90ec:	4602      	mov	r2, r0
   d90ee:	bfb8      	it	lt
   d90f0:	9103      	strlt	r1, [sp, #12]
   d90f2:	4630      	mov	r0, r6
   d90f4:	4639      	mov	r1, r7
   d90f6:	f000 fc81 	bl	d99fc <__aeabi_dsub>
   d90fa:	4606      	mov	r6, r0
   d90fc:	460f      	mov	r7, r1
   d90fe:	463b      	mov	r3, r7
   d9100:	4650      	mov	r0, sl
   d9102:	4659      	mov	r1, fp
   d9104:	4632      	mov	r2, r6
   d9106:	f000 fc7b 	bl	d9a00 <__adddf3>
   d910a:	9b03      	ldr	r3, [sp, #12]
   d910c:	051b      	lsls	r3, r3, #20
   d910e:	9300      	str	r3, [sp, #0]
   d9110:	460d      	mov	r5, r1
   d9112:	2400      	movs	r4, #0
   d9114:	a380      	add	r3, pc, #512	; (adr r3, d9318 <__ieee754_pow+0x8f0>)
   d9116:	e9d3 2300 	ldrd	r2, r3, [r3]
   d911a:	4620      	mov	r0, r4
   d911c:	4629      	mov	r1, r5
   d911e:	f000 fe25 	bl	d9d6c <__aeabi_dmul>
   d9122:	4632      	mov	r2, r6
   d9124:	4680      	mov	r8, r0
   d9126:	4689      	mov	r9, r1
   d9128:	463b      	mov	r3, r7
   d912a:	4620      	mov	r0, r4
   d912c:	4629      	mov	r1, r5
   d912e:	f000 fc65 	bl	d99fc <__aeabi_dsub>
   d9132:	4602      	mov	r2, r0
   d9134:	460b      	mov	r3, r1
   d9136:	4650      	mov	r0, sl
   d9138:	4659      	mov	r1, fp
   d913a:	f000 fc5f 	bl	d99fc <__aeabi_dsub>
   d913e:	a378      	add	r3, pc, #480	; (adr r3, d9320 <__ieee754_pow+0x8f8>)
   d9140:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9144:	f000 fe12 	bl	d9d6c <__aeabi_dmul>
   d9148:	a377      	add	r3, pc, #476	; (adr r3, d9328 <__ieee754_pow+0x900>)
   d914a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d914e:	4606      	mov	r6, r0
   d9150:	460f      	mov	r7, r1
   d9152:	4620      	mov	r0, r4
   d9154:	4629      	mov	r1, r5
   d9156:	f000 fe09 	bl	d9d6c <__aeabi_dmul>
   d915a:	4602      	mov	r2, r0
   d915c:	460b      	mov	r3, r1
   d915e:	4630      	mov	r0, r6
   d9160:	4639      	mov	r1, r7
   d9162:	f000 fc4d 	bl	d9a00 <__adddf3>
   d9166:	4606      	mov	r6, r0
   d9168:	460f      	mov	r7, r1
   d916a:	4632      	mov	r2, r6
   d916c:	463b      	mov	r3, r7
   d916e:	4640      	mov	r0, r8
   d9170:	4649      	mov	r1, r9
   d9172:	f000 fc45 	bl	d9a00 <__adddf3>
   d9176:	4642      	mov	r2, r8
   d9178:	464b      	mov	r3, r9
   d917a:	4604      	mov	r4, r0
   d917c:	460d      	mov	r5, r1
   d917e:	f000 fc3d 	bl	d99fc <__aeabi_dsub>
   d9182:	4602      	mov	r2, r0
   d9184:	460b      	mov	r3, r1
   d9186:	4630      	mov	r0, r6
   d9188:	4639      	mov	r1, r7
   d918a:	f000 fc37 	bl	d99fc <__aeabi_dsub>
   d918e:	4622      	mov	r2, r4
   d9190:	4682      	mov	sl, r0
   d9192:	468b      	mov	fp, r1
   d9194:	462b      	mov	r3, r5
   d9196:	4620      	mov	r0, r4
   d9198:	4629      	mov	r1, r5
   d919a:	f000 fde7 	bl	d9d6c <__aeabi_dmul>
   d919e:	a364      	add	r3, pc, #400	; (adr r3, d9330 <__ieee754_pow+0x908>)
   d91a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91a4:	4606      	mov	r6, r0
   d91a6:	460f      	mov	r7, r1
   d91a8:	f000 fde0 	bl	d9d6c <__aeabi_dmul>
   d91ac:	a362      	add	r3, pc, #392	; (adr r3, d9338 <__ieee754_pow+0x910>)
   d91ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91b2:	f000 fc23 	bl	d99fc <__aeabi_dsub>
   d91b6:	4632      	mov	r2, r6
   d91b8:	463b      	mov	r3, r7
   d91ba:	f000 fdd7 	bl	d9d6c <__aeabi_dmul>
   d91be:	a360      	add	r3, pc, #384	; (adr r3, d9340 <__ieee754_pow+0x918>)
   d91c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91c4:	f000 fc1c 	bl	d9a00 <__adddf3>
   d91c8:	4632      	mov	r2, r6
   d91ca:	463b      	mov	r3, r7
   d91cc:	f000 fdce 	bl	d9d6c <__aeabi_dmul>
   d91d0:	a35d      	add	r3, pc, #372	; (adr r3, d9348 <__ieee754_pow+0x920>)
   d91d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91d6:	f000 fc11 	bl	d99fc <__aeabi_dsub>
   d91da:	4632      	mov	r2, r6
   d91dc:	463b      	mov	r3, r7
   d91de:	f000 fdc5 	bl	d9d6c <__aeabi_dmul>
   d91e2:	a35b      	add	r3, pc, #364	; (adr r3, d9350 <__ieee754_pow+0x928>)
   d91e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91e8:	f000 fc0a 	bl	d9a00 <__adddf3>
   d91ec:	4632      	mov	r2, r6
   d91ee:	463b      	mov	r3, r7
   d91f0:	f000 fdbc 	bl	d9d6c <__aeabi_dmul>
   d91f4:	4602      	mov	r2, r0
   d91f6:	460b      	mov	r3, r1
   d91f8:	4620      	mov	r0, r4
   d91fa:	4629      	mov	r1, r5
   d91fc:	f000 fbfe 	bl	d99fc <__aeabi_dsub>
   d9200:	4606      	mov	r6, r0
   d9202:	460f      	mov	r7, r1
   d9204:	4632      	mov	r2, r6
   d9206:	463b      	mov	r3, r7
   d9208:	4620      	mov	r0, r4
   d920a:	4629      	mov	r1, r5
   d920c:	f000 fdae 	bl	d9d6c <__aeabi_dmul>
   d9210:	2200      	movs	r2, #0
   d9212:	4680      	mov	r8, r0
   d9214:	4689      	mov	r9, r1
   d9216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d921a:	4630      	mov	r0, r6
   d921c:	4639      	mov	r1, r7
   d921e:	f000 fbed 	bl	d99fc <__aeabi_dsub>
   d9222:	4602      	mov	r2, r0
   d9224:	460b      	mov	r3, r1
   d9226:	4640      	mov	r0, r8
   d9228:	4649      	mov	r1, r9
   d922a:	f000 fec9 	bl	d9fc0 <__aeabi_ddiv>
   d922e:	4652      	mov	r2, sl
   d9230:	4606      	mov	r6, r0
   d9232:	460f      	mov	r7, r1
   d9234:	465b      	mov	r3, fp
   d9236:	4620      	mov	r0, r4
   d9238:	4629      	mov	r1, r5
   d923a:	f000 fd97 	bl	d9d6c <__aeabi_dmul>
   d923e:	4652      	mov	r2, sl
   d9240:	465b      	mov	r3, fp
   d9242:	f000 fbdd 	bl	d9a00 <__adddf3>
   d9246:	4602      	mov	r2, r0
   d9248:	460b      	mov	r3, r1
   d924a:	4630      	mov	r0, r6
   d924c:	4639      	mov	r1, r7
   d924e:	f000 fbd5 	bl	d99fc <__aeabi_dsub>
   d9252:	4622      	mov	r2, r4
   d9254:	462b      	mov	r3, r5
   d9256:	f000 fbd1 	bl	d99fc <__aeabi_dsub>
   d925a:	4602      	mov	r2, r0
   d925c:	460b      	mov	r3, r1
   d925e:	2000      	movs	r0, #0
   d9260:	4945      	ldr	r1, [pc, #276]	; (d9378 <__ieee754_pow+0x950>)
   d9262:	f000 fbcb 	bl	d99fc <__aeabi_dsub>
   d9266:	460b      	mov	r3, r1
   d9268:	9900      	ldr	r1, [sp, #0]
   d926a:	4419      	add	r1, r3
   d926c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9270:	4602      	mov	r2, r0
   d9272:	f2c0 8169 	blt.w	d9548 <__ieee754_pow+0xb20>
   d9276:	4610      	mov	r0, r2
   d9278:	ec53 2b19 	vmov	r2, r3, d9
   d927c:	f000 fd76 	bl	d9d6c <__aeabi_dmul>
   d9280:	e9cd 0100 	strd	r0, r1, [sp]
   d9284:	e41e      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d9286:	f1bb 0f00 	cmp.w	fp, #0
   d928a:	f6ff ac95 	blt.w	d8bb8 <__ieee754_pow+0x190>
   d928e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d9358 <__ieee754_pow+0x930>
   d9292:	ed8d 7b00 	vstr	d7, [sp]
   d9296:	e415      	b.n	d8ac4 <__ieee754_pow+0x9c>
   d9298:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d9380 <__ieee754_pow+0x958>
   d929c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d92a0:	4563      	cmp	r3, ip
   d92a2:	f340 810b 	ble.w	d94bc <__ieee754_pow+0xa94>
   d92a6:	4b35      	ldr	r3, [pc, #212]	; (d937c <__ieee754_pow+0x954>)
   d92a8:	440b      	add	r3, r1
   d92aa:	4303      	orrs	r3, r0
   d92ac:	d10a      	bne.n	d92c4 <__ieee754_pow+0x89c>
   d92ae:	4632      	mov	r2, r6
   d92b0:	463b      	mov	r3, r7
   d92b2:	f000 fba3 	bl	d99fc <__aeabi_dsub>
   d92b6:	4652      	mov	r2, sl
   d92b8:	465b      	mov	r3, fp
   d92ba:	f000 ffdd 	bl	da278 <__aeabi_dcmpge>
   d92be:	2800      	cmp	r0, #0
   d92c0:	f43f aef2 	beq.w	d90a8 <__ieee754_pow+0x680>
   d92c4:	a326      	add	r3, pc, #152	; (adr r3, d9360 <__ieee754_pow+0x938>)
   d92c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92ca:	ec51 0b19 	vmov	r0, r1, d9
   d92ce:	f000 fd4d 	bl	d9d6c <__aeabi_dmul>
   d92d2:	a323      	add	r3, pc, #140	; (adr r3, d9360 <__ieee754_pow+0x938>)
   d92d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92d8:	f000 fd48 	bl	d9d6c <__aeabi_dmul>
   d92dc:	e9cd 0100 	strd	r0, r1, [sp]
   d92e0:	f7ff bbf0 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d92e4:	ed9f 7b20 	vldr	d7, [pc, #128]	; d9368 <__ieee754_pow+0x940>
   d92e8:	eeb0 9a47 	vmov.f32	s18, s14
   d92ec:	eef0 9a67 	vmov.f32	s19, s15
   d92f0:	e686      	b.n	d9000 <__ieee754_pow+0x5d8>
   d92f2:	f1bb 0f00 	cmp.w	fp, #0
   d92f6:	daca      	bge.n	d928e <__ieee754_pow+0x866>
   d92f8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d92fc:	9600      	str	r6, [sp, #0]
   d92fe:	9301      	str	r3, [sp, #4]
   d9300:	f7ff bbe0 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d9304:	f3af 8000 	nop.w
   d9308:	00000000 	.word	0x00000000
   d930c:	bff00000 	.word	0xbff00000
   d9310:	652b82fe 	.word	0x652b82fe
   d9314:	3c971547 	.word	0x3c971547
   d9318:	00000000 	.word	0x00000000
   d931c:	3fe62e43 	.word	0x3fe62e43
   d9320:	fefa39ef 	.word	0xfefa39ef
   d9324:	3fe62e42 	.word	0x3fe62e42
   d9328:	0ca86c39 	.word	0x0ca86c39
   d932c:	be205c61 	.word	0xbe205c61
   d9330:	72bea4d0 	.word	0x72bea4d0
   d9334:	3e663769 	.word	0x3e663769
   d9338:	c5d26bf1 	.word	0xc5d26bf1
   d933c:	3ebbbd41 	.word	0x3ebbbd41
   d9340:	af25de2c 	.word	0xaf25de2c
   d9344:	3f11566a 	.word	0x3f11566a
   d9348:	16bebd93 	.word	0x16bebd93
   d934c:	3f66c16c 	.word	0x3f66c16c
   d9350:	5555553e 	.word	0x5555553e
   d9354:	3fc55555 	.word	0x3fc55555
	...
   d9360:	c2f8f359 	.word	0xc2f8f359
   d9364:	01a56e1f 	.word	0x01a56e1f
   d9368:	00000000 	.word	0x00000000
   d936c:	3ff00000 	.word	0x3ff00000
   d9370:	408fffff 	.word	0x408fffff
   d9374:	000fffff 	.word	0x000fffff
   d9378:	3ff00000 	.word	0x3ff00000
   d937c:	3f6f3400 	.word	0x3f6f3400
   d9380:	4090cbff 	.word	0x4090cbff
   d9384:	4598      	cmp	r8, r3
   d9386:	f6ff af7e 	blt.w	d9286 <__ieee754_pow+0x85e>
   d938a:	4b91      	ldr	r3, [pc, #580]	; (d95d0 <__ieee754_pow+0xba8>)
   d938c:	4598      	cmp	r8, r3
   d938e:	f73f ac0f 	bgt.w	d8bb0 <__ieee754_pow+0x188>
   d9392:	4b8f      	ldr	r3, [pc, #572]	; (d95d0 <__ieee754_pow+0xba8>)
   d9394:	2200      	movs	r2, #0
   d9396:	e9dd 0100 	ldrd	r0, r1, [sp]
   d939a:	f000 fb2f 	bl	d99fc <__aeabi_dsub>
   d939e:	a378      	add	r3, pc, #480	; (adr r3, d9580 <__ieee754_pow+0xb58>)
   d93a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93a4:	4604      	mov	r4, r0
   d93a6:	460d      	mov	r5, r1
   d93a8:	f000 fce0 	bl	d9d6c <__aeabi_dmul>
   d93ac:	a376      	add	r3, pc, #472	; (adr r3, d9588 <__ieee754_pow+0xb60>)
   d93ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93b2:	4682      	mov	sl, r0
   d93b4:	468b      	mov	fp, r1
   d93b6:	4620      	mov	r0, r4
   d93b8:	4629      	mov	r1, r5
   d93ba:	f000 fcd7 	bl	d9d6c <__aeabi_dmul>
   d93be:	4b85      	ldr	r3, [pc, #532]	; (d95d4 <__ieee754_pow+0xbac>)
   d93c0:	4680      	mov	r8, r0
   d93c2:	4689      	mov	r9, r1
   d93c4:	2200      	movs	r2, #0
   d93c6:	4620      	mov	r0, r4
   d93c8:	4629      	mov	r1, r5
   d93ca:	f000 fccf 	bl	d9d6c <__aeabi_dmul>
   d93ce:	4602      	mov	r2, r0
   d93d0:	460b      	mov	r3, r1
   d93d2:	a16f      	add	r1, pc, #444	; (adr r1, d9590 <__ieee754_pow+0xb68>)
   d93d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d93d8:	f000 fb10 	bl	d99fc <__aeabi_dsub>
   d93dc:	4622      	mov	r2, r4
   d93de:	462b      	mov	r3, r5
   d93e0:	f000 fcc4 	bl	d9d6c <__aeabi_dmul>
   d93e4:	4602      	mov	r2, r0
   d93e6:	460b      	mov	r3, r1
   d93e8:	2000      	movs	r0, #0
   d93ea:	497b      	ldr	r1, [pc, #492]	; (d95d8 <__ieee754_pow+0xbb0>)
   d93ec:	f000 fb06 	bl	d99fc <__aeabi_dsub>
   d93f0:	4622      	mov	r2, r4
   d93f2:	462b      	mov	r3, r5
   d93f4:	4604      	mov	r4, r0
   d93f6:	460d      	mov	r5, r1
   d93f8:	4610      	mov	r0, r2
   d93fa:	4619      	mov	r1, r3
   d93fc:	f000 fcb6 	bl	d9d6c <__aeabi_dmul>
   d9400:	4602      	mov	r2, r0
   d9402:	460b      	mov	r3, r1
   d9404:	4620      	mov	r0, r4
   d9406:	4629      	mov	r1, r5
   d9408:	f000 fcb0 	bl	d9d6c <__aeabi_dmul>
   d940c:	a362      	add	r3, pc, #392	; (adr r3, d9598 <__ieee754_pow+0xb70>)
   d940e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9412:	f000 fcab 	bl	d9d6c <__aeabi_dmul>
   d9416:	4602      	mov	r2, r0
   d9418:	460b      	mov	r3, r1
   d941a:	4640      	mov	r0, r8
   d941c:	4649      	mov	r1, r9
   d941e:	f000 faed 	bl	d99fc <__aeabi_dsub>
   d9422:	4680      	mov	r8, r0
   d9424:	4689      	mov	r9, r1
   d9426:	4650      	mov	r0, sl
   d9428:	4659      	mov	r1, fp
   d942a:	4642      	mov	r2, r8
   d942c:	464b      	mov	r3, r9
   d942e:	f000 fae7 	bl	d9a00 <__adddf3>
   d9432:	2400      	movs	r4, #0
   d9434:	4652      	mov	r2, sl
   d9436:	465b      	mov	r3, fp
   d9438:	4620      	mov	r0, r4
   d943a:	460d      	mov	r5, r1
   d943c:	f000 fade 	bl	d99fc <__aeabi_dsub>
   d9440:	4602      	mov	r2, r0
   d9442:	460b      	mov	r3, r1
   d9444:	4640      	mov	r0, r8
   d9446:	4649      	mov	r1, r9
   d9448:	f000 fad8 	bl	d99fc <__aeabi_dsub>
   d944c:	4682      	mov	sl, r0
   d944e:	468b      	mov	fp, r1
   d9450:	e5ca      	b.n	d8fe8 <__ieee754_pow+0x5c0>
   d9452:	ed9f 7b53 	vldr	d7, [pc, #332]	; d95a0 <__ieee754_pow+0xb78>
   d9456:	eeb0 ba47 	vmov.f32	s22, s14
   d945a:	eef0 ba67 	vmov.f32	s23, s15
   d945e:	eeb0 ca47 	vmov.f32	s24, s14
   d9462:	eef0 ca67 	vmov.f32	s25, s15
   d9466:	ed9f 7b50 	vldr	d7, [pc, #320]	; d95a8 <__ieee754_pow+0xb80>
   d946a:	f04f 0900 	mov.w	r9, #0
   d946e:	ec54 3b17 	vmov	r3, r4, d7
   d9472:	e41d      	b.n	d8cb0 <__ieee754_pow+0x288>
   d9474:	2000      	movs	r0, #0
   d9476:	f7ff bbf3 	b.w	d8c60 <__ieee754_pow+0x238>
   d947a:	4955      	ldr	r1, [pc, #340]	; (d95d0 <__ieee754_pow+0xba8>)
   d947c:	4622      	mov	r2, r4
   d947e:	462b      	mov	r3, r5
   d9480:	2000      	movs	r0, #0
   d9482:	f000 fd9d 	bl	d9fc0 <__aeabi_ddiv>
   d9486:	e9cd 0100 	strd	r0, r1, [sp]
   d948a:	f7ff bb1b 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d948e:	4622      	mov	r2, r4
   d9490:	462b      	mov	r3, r5
   d9492:	4620      	mov	r0, r4
   d9494:	4629      	mov	r1, r5
   d9496:	f000 fc69 	bl	d9d6c <__aeabi_dmul>
   d949a:	e9cd 0100 	strd	r0, r1, [sp]
   d949e:	f7ff bb11 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d94a2:	2b00      	cmp	r3, #0
   d94a4:	d142      	bne.n	d952c <__ieee754_pow+0xb04>
   d94a6:	f1c1 0114 	rsb	r1, r1, #20
   d94aa:	fa4a f001 	asr.w	r0, sl, r1
   d94ae:	fa00 f101 	lsl.w	r1, r0, r1
   d94b2:	4551      	cmp	r1, sl
   d94b4:	d05a      	beq.n	d956c <__ieee754_pow+0xb44>
   d94b6:	9303      	str	r3, [sp, #12]
   d94b8:	f7ff bae0 	b.w	d8a7c <__ieee754_pow+0x54>
   d94bc:	4a46      	ldr	r2, [pc, #280]	; (d95d8 <__ieee754_pow+0xbb0>)
   d94be:	4293      	cmp	r3, r2
   d94c0:	dc5b      	bgt.n	d957a <__ieee754_pow+0xb52>
   d94c2:	e9dd 1200 	ldrd	r1, r2, [sp]
   d94c6:	9100      	str	r1, [sp, #0]
   d94c8:	9103      	str	r1, [sp, #12]
   d94ca:	e622      	b.n	d9112 <__ieee754_pow+0x6ea>
   d94cc:	a338      	add	r3, pc, #224	; (adr r3, d95b0 <__ieee754_pow+0xb88>)
   d94ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94d2:	ec51 0b19 	vmov	r0, r1, d9
   d94d6:	f000 fc49 	bl	d9d6c <__aeabi_dmul>
   d94da:	a335      	add	r3, pc, #212	; (adr r3, d95b0 <__ieee754_pow+0xb88>)
   d94dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94e0:	f000 fc44 	bl	d9d6c <__aeabi_dmul>
   d94e4:	e9cd 0100 	strd	r0, r1, [sp]
   d94e8:	f7ff baec 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d94ec:	9b03      	ldr	r3, [sp, #12]
   d94ee:	2b01      	cmp	r3, #1
   d94f0:	f47f aae8 	bne.w	d8ac4 <__ieee754_pow+0x9c>
   d94f4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d94f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d94fc:	e9cd 2300 	strd	r2, r3, [sp]
   d9500:	f7ff bae0 	b.w	d8ac4 <__ieee754_pow+0x9c>
   d9504:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d95b8 <__ieee754_pow+0xb90>
   d9508:	eeb0 ba47 	vmov.f32	s22, s14
   d950c:	eef0 ba67 	vmov.f32	s23, s15
   d9510:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d95c0 <__ieee754_pow+0xb98>
   d9514:	eeb0 ca47 	vmov.f32	s24, s14
   d9518:	eef0 ca67 	vmov.f32	s25, s15
   d951c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d95c8 <__ieee754_pow+0xba0>
   d9520:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d9524:	ec54 3b17 	vmov	r3, r4, d7
   d9528:	f7ff bbc2 	b.w	d8cb0 <__ieee754_pow+0x288>
   d952c:	ec45 4b10 	vmov	d0, r4, r5
   d9530:	9203      	str	r2, [sp, #12]
   d9532:	f000 f917 	bl	d9764 <fabs>
   d9536:	9a03      	ldr	r2, [sp, #12]
   d9538:	ed8d 0b00 	vstr	d0, [sp]
   d953c:	2a00      	cmp	r2, #0
   d953e:	f47f ab61 	bne.w	d8c04 <__ieee754_pow+0x1dc>
   d9542:	9203      	str	r2, [sp, #12]
   d9544:	f7ff baf5 	b.w	d8b32 <__ieee754_pow+0x10a>
   d9548:	9803      	ldr	r0, [sp, #12]
   d954a:	ec43 2b10 	vmov	d0, r2, r3
   d954e:	f000 f9bf 	bl	d98d0 <scalbn>
   d9552:	ec51 0b10 	vmov	r0, r1, d0
   d9556:	e68f      	b.n	d9278 <__ieee754_pow+0x850>
   d9558:	f000 0001 	and.w	r0, r0, #1
   d955c:	f1c0 0102 	rsb	r1, r0, #2
   d9560:	9103      	str	r1, [sp, #12]
   d9562:	2b00      	cmp	r3, #0
   d9564:	f43f aa8a 	beq.w	d8a7c <__ieee754_pow+0x54>
   d9568:	f7ff bada 	b.w	d8b20 <__ieee754_pow+0xf8>
   d956c:	f000 0001 	and.w	r0, r0, #1
   d9570:	f1c0 0302 	rsb	r3, r0, #2
   d9574:	9303      	str	r3, [sp, #12]
   d9576:	f7ff ba81 	b.w	d8a7c <__ieee754_pow+0x54>
   d957a:	151b      	asrs	r3, r3, #20
   d957c:	e596      	b.n	d90ac <__ieee754_pow+0x684>
   d957e:	bf00      	nop
   d9580:	60000000 	.word	0x60000000
   d9584:	3ff71547 	.word	0x3ff71547
   d9588:	f85ddf44 	.word	0xf85ddf44
   d958c:	3e54ae0b 	.word	0x3e54ae0b
   d9590:	55555555 	.word	0x55555555
   d9594:	3fd55555 	.word	0x3fd55555
   d9598:	652b82fe 	.word	0x652b82fe
   d959c:	3ff71547 	.word	0x3ff71547
	...
   d95ac:	3ff00000 	.word	0x3ff00000
   d95b0:	8800759c 	.word	0x8800759c
   d95b4:	7e37e43c 	.word	0x7e37e43c
   d95b8:	40000000 	.word	0x40000000
   d95bc:	3fe2b803 	.word	0x3fe2b803
   d95c0:	43cfd006 	.word	0x43cfd006
   d95c4:	3e4cfdeb 	.word	0x3e4cfdeb
   d95c8:	00000000 	.word	0x00000000
   d95cc:	3ff80000 	.word	0x3ff80000
   d95d0:	3ff00000 	.word	0x3ff00000
   d95d4:	3fd00000 	.word	0x3fd00000
   d95d8:	3fe00000 	.word	0x3fe00000

000d95dc <__ieee754_sqrt>:
   d95dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95e0:	4a5f      	ldr	r2, [pc, #380]	; (d9760 <__ieee754_sqrt+0x184>)
   d95e2:	ec57 6b10 	vmov	r6, r7, d0
   d95e6:	43ba      	bics	r2, r7
   d95e8:	f000 8098 	beq.w	d971c <__ieee754_sqrt+0x140>
   d95ec:	2f00      	cmp	r7, #0
   d95ee:	ee10 4a10 	vmov	r4, s0
   d95f2:	463b      	mov	r3, r7
   d95f4:	dd4e      	ble.n	d9694 <__ieee754_sqrt+0xb8>
   d95f6:	1539      	asrs	r1, r7, #20
   d95f8:	d05b      	beq.n	d96b2 <__ieee754_sqrt+0xd6>
   d95fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d95fe:	07ca      	lsls	r2, r1, #31
   d9600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9604:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d9608:	d403      	bmi.n	d9612 <__ieee754_sqrt+0x36>
   d960a:	005b      	lsls	r3, r3, #1
   d960c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d9610:	0064      	lsls	r4, r4, #1
   d9612:	0fe2      	lsrs	r2, r4, #31
   d9614:	f04f 0c00 	mov.w	ip, #0
   d9618:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d961c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d9620:	0064      	lsls	r4, r4, #1
   d9622:	4666      	mov	r6, ip
   d9624:	2516      	movs	r5, #22
   d9626:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d962a:	18b1      	adds	r1, r6, r2
   d962c:	4299      	cmp	r1, r3
   d962e:	dc02      	bgt.n	d9636 <__ieee754_sqrt+0x5a>
   d9630:	1a5b      	subs	r3, r3, r1
   d9632:	188e      	adds	r6, r1, r2
   d9634:	4494      	add	ip, r2
   d9636:	005b      	lsls	r3, r3, #1
   d9638:	3d01      	subs	r5, #1
   d963a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d963e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d9642:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d9646:	d1f0      	bne.n	d962a <__ieee754_sqrt+0x4e>
   d9648:	462f      	mov	r7, r5
   d964a:	2020      	movs	r0, #32
   d964c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d9650:	e009      	b.n	d9666 <__ieee754_sqrt+0x8a>
   d9652:	d03e      	beq.n	d96d2 <__ieee754_sqrt+0xf6>
   d9654:	0fe1      	lsrs	r1, r4, #31
   d9656:	3801      	subs	r0, #1
   d9658:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d965c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d9660:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d9664:	d03e      	beq.n	d96e4 <__ieee754_sqrt+0x108>
   d9666:	42b3      	cmp	r3, r6
   d9668:	eb02 0105 	add.w	r1, r2, r5
   d966c:	ddf1      	ble.n	d9652 <__ieee754_sqrt+0x76>
   d966e:	2900      	cmp	r1, #0
   d9670:	eb01 0502 	add.w	r5, r1, r2
   d9674:	db09      	blt.n	d968a <__ieee754_sqrt+0xae>
   d9676:	46b0      	mov	r8, r6
   d9678:	1b9b      	subs	r3, r3, r6
   d967a:	42a1      	cmp	r1, r4
   d967c:	bf88      	it	hi
   d967e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d9682:	1a64      	subs	r4, r4, r1
   d9684:	4417      	add	r7, r2
   d9686:	4646      	mov	r6, r8
   d9688:	e7e4      	b.n	d9654 <__ieee754_sqrt+0x78>
   d968a:	2d00      	cmp	r5, #0
   d968c:	dbf3      	blt.n	d9676 <__ieee754_sqrt+0x9a>
   d968e:	f106 0801 	add.w	r8, r6, #1
   d9692:	e7f1      	b.n	d9678 <__ieee754_sqrt+0x9c>
   d9694:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d9698:	4332      	orrs	r2, r6
   d969a:	d036      	beq.n	d970a <__ieee754_sqrt+0x12e>
   d969c:	2f00      	cmp	r7, #0
   d969e:	d14d      	bne.n	d973c <__ieee754_sqrt+0x160>
   d96a0:	4639      	mov	r1, r7
   d96a2:	0ae2      	lsrs	r2, r4, #11
   d96a4:	3915      	subs	r1, #21
   d96a6:	0564      	lsls	r4, r4, #21
   d96a8:	4613      	mov	r3, r2
   d96aa:	2a00      	cmp	r2, #0
   d96ac:	d0f9      	beq.n	d96a2 <__ieee754_sqrt+0xc6>
   d96ae:	02d7      	lsls	r7, r2, #11
   d96b0:	d451      	bmi.n	d9756 <__ieee754_sqrt+0x17a>
   d96b2:	2000      	movs	r0, #0
   d96b4:	005b      	lsls	r3, r3, #1
   d96b6:	02de      	lsls	r6, r3, #11
   d96b8:	4605      	mov	r5, r0
   d96ba:	f100 0001 	add.w	r0, r0, #1
   d96be:	d5f9      	bpl.n	d96b4 <__ieee754_sqrt+0xd8>
   d96c0:	461a      	mov	r2, r3
   d96c2:	4623      	mov	r3, r4
   d96c4:	4084      	lsls	r4, r0
   d96c6:	f1c0 0020 	rsb	r0, r0, #32
   d96ca:	40c3      	lsrs	r3, r0
   d96cc:	4313      	orrs	r3, r2
   d96ce:	1b49      	subs	r1, r1, r5
   d96d0:	e793      	b.n	d95fa <__ieee754_sqrt+0x1e>
   d96d2:	42a1      	cmp	r1, r4
   d96d4:	d8be      	bhi.n	d9654 <__ieee754_sqrt+0x78>
   d96d6:	2900      	cmp	r1, #0
   d96d8:	eb01 0502 	add.w	r5, r1, r2
   d96dc:	dbd5      	blt.n	d968a <__ieee754_sqrt+0xae>
   d96de:	4698      	mov	r8, r3
   d96e0:	2300      	movs	r3, #0
   d96e2:	e7ce      	b.n	d9682 <__ieee754_sqrt+0xa6>
   d96e4:	4323      	orrs	r3, r4
   d96e6:	d112      	bne.n	d970e <__ieee754_sqrt+0x132>
   d96e8:	0878      	lsrs	r0, r7, #1
   d96ea:	ea4f 016c 	mov.w	r1, ip, asr #1
   d96ee:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d96f2:	f01c 0f01 	tst.w	ip, #1
   d96f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d96fa:	bf18      	it	ne
   d96fc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d9700:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d9704:	4602      	mov	r2, r0
   d9706:	ec43 2b10 	vmov	d0, r2, r3
   d970a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d970e:	1c7b      	adds	r3, r7, #1
   d9710:	bf16      	itet	ne
   d9712:	1c78      	addne	r0, r7, #1
   d9714:	f10c 0c01 	addeq.w	ip, ip, #1
   d9718:	0840      	lsrne	r0, r0, #1
   d971a:	e7e6      	b.n	d96ea <__ieee754_sqrt+0x10e>
   d971c:	ee10 2a10 	vmov	r2, s0
   d9720:	ee10 0a10 	vmov	r0, s0
   d9724:	463b      	mov	r3, r7
   d9726:	4639      	mov	r1, r7
   d9728:	f000 fb20 	bl	d9d6c <__aeabi_dmul>
   d972c:	4632      	mov	r2, r6
   d972e:	463b      	mov	r3, r7
   d9730:	f000 f966 	bl	d9a00 <__adddf3>
   d9734:	ec41 0b10 	vmov	d0, r0, r1
   d9738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d973c:	ee10 2a10 	vmov	r2, s0
   d9740:	4630      	mov	r0, r6
   d9742:	4639      	mov	r1, r7
   d9744:	f000 f95a 	bl	d99fc <__aeabi_dsub>
   d9748:	4602      	mov	r2, r0
   d974a:	460b      	mov	r3, r1
   d974c:	f000 fc38 	bl	d9fc0 <__aeabi_ddiv>
   d9750:	ec41 0b10 	vmov	d0, r0, r1
   d9754:	e7d9      	b.n	d970a <__ieee754_sqrt+0x12e>
   d9756:	4623      	mov	r3, r4
   d9758:	2020      	movs	r0, #32
   d975a:	f04f 35ff 	mov.w	r5, #4294967295
   d975e:	e7b4      	b.n	d96ca <__ieee754_sqrt+0xee>
   d9760:	7ff00000 	.word	0x7ff00000

000d9764 <fabs>:
   d9764:	ec51 0b10 	vmov	r0, r1, d0
   d9768:	ee10 2a10 	vmov	r2, s0
   d976c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9770:	ec43 2b10 	vmov	d0, r2, r3
   d9774:	4770      	bx	lr
   d9776:	bf00      	nop

000d9778 <finite>:
   d9778:	b082      	sub	sp, #8
   d977a:	ed8d 0b00 	vstr	d0, [sp]
   d977e:	9801      	ldr	r0, [sp, #4]
   d9780:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d9784:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d9788:	0fc0      	lsrs	r0, r0, #31
   d978a:	b002      	add	sp, #8
   d978c:	4770      	bx	lr
   d978e:	bf00      	nop

000d9790 <matherr>:
   d9790:	2000      	movs	r0, #0
   d9792:	4770      	bx	lr
   d9794:	0000      	movs	r0, r0
	...

000d9798 <nan>:
   d9798:	ed9f 0b01 	vldr	d0, [pc, #4]	; d97a0 <nan+0x8>
   d979c:	4770      	bx	lr
   d979e:	bf00      	nop
   d97a0:	00000000 	.word	0x00000000
   d97a4:	7ff80000 	.word	0x7ff80000

000d97a8 <rint>:
   d97a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97aa:	ec53 2b10 	vmov	r2, r3, d0
   d97ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d97b2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d97b6:	2813      	cmp	r0, #19
   d97b8:	ee10 5a10 	vmov	r5, s0
   d97bc:	b083      	sub	sp, #12
   d97be:	4619      	mov	r1, r3
   d97c0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d97c4:	dc31      	bgt.n	d982a <rint+0x82>
   d97c6:	2800      	cmp	r0, #0
   d97c8:	db4c      	blt.n	d9864 <rint+0xbc>
   d97ca:	4e3e      	ldr	r6, [pc, #248]	; (d98c4 <rint+0x11c>)
   d97cc:	4106      	asrs	r6, r0
   d97ce:	ea03 0706 	and.w	r7, r3, r6
   d97d2:	4317      	orrs	r7, r2
   d97d4:	d02e      	beq.n	d9834 <rint+0x8c>
   d97d6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d97da:	431d      	orrs	r5, r3
   d97dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d97e0:	d00c      	beq.n	d97fc <rint+0x54>
   d97e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d97e6:	2813      	cmp	r0, #19
   d97e8:	ea21 0606 	bic.w	r6, r1, r6
   d97ec:	fa43 f100 	asr.w	r1, r3, r0
   d97f0:	ea41 0106 	orr.w	r1, r1, r6
   d97f4:	bf0c      	ite	eq
   d97f6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d97fa:	2500      	movne	r5, #0
   d97fc:	4832      	ldr	r0, [pc, #200]	; (d98c8 <rint+0x120>)
   d97fe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d9802:	462a      	mov	r2, r5
   d9804:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9808:	460b      	mov	r3, r1
   d980a:	4620      	mov	r0, r4
   d980c:	4629      	mov	r1, r5
   d980e:	f000 f8f7 	bl	d9a00 <__adddf3>
   d9812:	e9cd 0100 	strd	r0, r1, [sp]
   d9816:	e9dd 0100 	ldrd	r0, r1, [sp]
   d981a:	4622      	mov	r2, r4
   d981c:	462b      	mov	r3, r5
   d981e:	f000 f8ed 	bl	d99fc <__aeabi_dsub>
   d9822:	ec41 0b10 	vmov	d0, r0, r1
   d9826:	b003      	add	sp, #12
   d9828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d982a:	2833      	cmp	r0, #51	; 0x33
   d982c:	dd06      	ble.n	d983c <rint+0x94>
   d982e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d9832:	d040      	beq.n	d98b6 <rint+0x10e>
   d9834:	ec43 2b10 	vmov	d0, r2, r3
   d9838:	b003      	add	sp, #12
   d983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d983c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d9840:	f04f 30ff 	mov.w	r0, #4294967295
   d9844:	40f0      	lsrs	r0, r6
   d9846:	4202      	tst	r2, r0
   d9848:	d0f4      	beq.n	d9834 <rint+0x8c>
   d984a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d984e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d9852:	d0d3      	beq.n	d97fc <rint+0x54>
   d9854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d9858:	ea25 0503 	bic.w	r5, r5, r3
   d985c:	fa42 f606 	asr.w	r6, r2, r6
   d9860:	4335      	orrs	r5, r6
   d9862:	e7cb      	b.n	d97fc <rint+0x54>
   d9864:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9868:	4310      	orrs	r0, r2
   d986a:	d0e3      	beq.n	d9834 <rint+0x8c>
   d986c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d9870:	4310      	orrs	r0, r2
   d9872:	4245      	negs	r5, r0
   d9874:	4305      	orrs	r5, r0
   d9876:	4814      	ldr	r0, [pc, #80]	; (d98c8 <rint+0x120>)
   d9878:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d987c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9880:	0c59      	lsrs	r1, r3, #17
   d9882:	0b2d      	lsrs	r5, r5, #12
   d9884:	0449      	lsls	r1, r1, #17
   d9886:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d988a:	ea45 0301 	orr.w	r3, r5, r1
   d988e:	4630      	mov	r0, r6
   d9890:	4639      	mov	r1, r7
   d9892:	f000 f8b5 	bl	d9a00 <__adddf3>
   d9896:	e9cd 0100 	strd	r0, r1, [sp]
   d989a:	463b      	mov	r3, r7
   d989c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d98a0:	4632      	mov	r2, r6
   d98a2:	f000 f8ab 	bl	d99fc <__aeabi_dsub>
   d98a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d98aa:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d98ae:	ec41 0b10 	vmov	d0, r0, r1
   d98b2:	b003      	add	sp, #12
   d98b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d98b6:	ee10 0a10 	vmov	r0, s0
   d98ba:	f000 f8a1 	bl	d9a00 <__adddf3>
   d98be:	ec41 0b10 	vmov	d0, r0, r1
   d98c2:	e7b9      	b.n	d9838 <rint+0x90>
   d98c4:	000fffff 	.word	0x000fffff
   d98c8:	000dd798 	.word	0x000dd798
   d98cc:	00000000 	.word	0x00000000

000d98d0 <scalbn>:
   d98d0:	b538      	push	{r3, r4, r5, lr}
   d98d2:	ec53 2b10 	vmov	r2, r3, d0
   d98d6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d98da:	461c      	mov	r4, r3
   d98dc:	4605      	mov	r5, r0
   d98de:	bb81      	cbnz	r1, d9942 <scalbn+0x72>
   d98e0:	ee10 1a10 	vmov	r1, s0
   d98e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d98e8:	4321      	orrs	r1, r4
   d98ea:	d029      	beq.n	d9940 <scalbn+0x70>
   d98ec:	4619      	mov	r1, r3
   d98ee:	2200      	movs	r2, #0
   d98f0:	4b3d      	ldr	r3, [pc, #244]	; (d99e8 <scalbn+0x118>)
   d98f2:	4c3e      	ldr	r4, [pc, #248]	; (d99ec <scalbn+0x11c>)
   d98f4:	ee10 0a10 	vmov	r0, s0
   d98f8:	f000 fa38 	bl	d9d6c <__aeabi_dmul>
   d98fc:	42a5      	cmp	r5, r4
   d98fe:	4602      	mov	r2, r0
   d9900:	460b      	mov	r3, r1
   d9902:	db16      	blt.n	d9932 <scalbn+0x62>
   d9904:	460c      	mov	r4, r1
   d9906:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d990a:	3936      	subs	r1, #54	; 0x36
   d990c:	4429      	add	r1, r5
   d990e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d9912:	4281      	cmp	r1, r0
   d9914:	dc21      	bgt.n	d995a <scalbn+0x8a>
   d9916:	2900      	cmp	r1, #0
   d9918:	dc47      	bgt.n	d99aa <scalbn+0xda>
   d991a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d991e:	da34      	bge.n	d998a <scalbn+0xba>
   d9920:	f24c 3150 	movw	r1, #50000	; 0xc350
   d9924:	428d      	cmp	r5, r1
   d9926:	dc18      	bgt.n	d995a <scalbn+0x8a>
   d9928:	2b00      	cmp	r3, #0
   d992a:	a127      	add	r1, pc, #156	; (adr r1, d99c8 <scalbn+0xf8>)
   d992c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9930:	db44      	blt.n	d99bc <scalbn+0xec>
   d9932:	a325      	add	r3, pc, #148	; (adr r3, d99c8 <scalbn+0xf8>)
   d9934:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9938:	f000 fa18 	bl	d9d6c <__aeabi_dmul>
   d993c:	ec41 0b10 	vmov	d0, r0, r1
   d9940:	bd38      	pop	{r3, r4, r5, pc}
   d9942:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d9946:	4281      	cmp	r1, r0
   d9948:	d1e0      	bne.n	d990c <scalbn+0x3c>
   d994a:	ee10 0a10 	vmov	r0, s0
   d994e:	4619      	mov	r1, r3
   d9950:	f000 f856 	bl	d9a00 <__adddf3>
   d9954:	ec41 0b10 	vmov	d0, r0, r1
   d9958:	bd38      	pop	{r3, r4, r5, pc}
   d995a:	2b00      	cmp	r3, #0
   d995c:	a11c      	add	r1, pc, #112	; (adr r1, d99d0 <scalbn+0x100>)
   d995e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9962:	db07      	blt.n	d9974 <scalbn+0xa4>
   d9964:	a31a      	add	r3, pc, #104	; (adr r3, d99d0 <scalbn+0x100>)
   d9966:	e9d3 2300 	ldrd	r2, r3, [r3]
   d996a:	f000 f9ff 	bl	d9d6c <__aeabi_dmul>
   d996e:	ec41 0b10 	vmov	d0, r0, r1
   d9972:	bd38      	pop	{r3, r4, r5, pc}
   d9974:	a118      	add	r1, pc, #96	; (adr r1, d99d8 <scalbn+0x108>)
   d9976:	e9d1 0100 	ldrd	r0, r1, [r1]
   d997a:	a315      	add	r3, pc, #84	; (adr r3, d99d0 <scalbn+0x100>)
   d997c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9980:	f000 f9f4 	bl	d9d6c <__aeabi_dmul>
   d9984:	ec41 0b10 	vmov	d0, r0, r1
   d9988:	e7f3      	b.n	d9972 <scalbn+0xa2>
   d998a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d998e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9992:	3136      	adds	r1, #54	; 0x36
   d9994:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9998:	4610      	mov	r0, r2
   d999a:	4619      	mov	r1, r3
   d999c:	2200      	movs	r2, #0
   d999e:	4b14      	ldr	r3, [pc, #80]	; (d99f0 <scalbn+0x120>)
   d99a0:	f000 f9e4 	bl	d9d6c <__aeabi_dmul>
   d99a4:	ec41 0b10 	vmov	d0, r0, r1
   d99a8:	bd38      	pop	{r3, r4, r5, pc}
   d99aa:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d99ae:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d99b2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d99b6:	ec43 2b10 	vmov	d0, r2, r3
   d99ba:	bd38      	pop	{r3, r4, r5, pc}
   d99bc:	a108      	add	r1, pc, #32	; (adr r1, d99e0 <scalbn+0x110>)
   d99be:	e9d1 0100 	ldrd	r0, r1, [r1]
   d99c2:	e7b6      	b.n	d9932 <scalbn+0x62>
   d99c4:	f3af 8000 	nop.w
   d99c8:	c2f8f359 	.word	0xc2f8f359
   d99cc:	01a56e1f 	.word	0x01a56e1f
   d99d0:	8800759c 	.word	0x8800759c
   d99d4:	7e37e43c 	.word	0x7e37e43c
   d99d8:	8800759c 	.word	0x8800759c
   d99dc:	fe37e43c 	.word	0xfe37e43c
   d99e0:	c2f8f359 	.word	0xc2f8f359
   d99e4:	81a56e1f 	.word	0x81a56e1f
   d99e8:	43500000 	.word	0x43500000
   d99ec:	ffff3cb0 	.word	0xffff3cb0
   d99f0:	3c900000 	.word	0x3c900000

000d99f4 <__aeabi_drsub>:
   d99f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d99f8:	e002      	b.n	d9a00 <__adddf3>
   d99fa:	bf00      	nop

000d99fc <__aeabi_dsub>:
   d99fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9a00 <__adddf3>:
   d9a00:	b530      	push	{r4, r5, lr}
   d9a02:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9a06:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9a0a:	ea94 0f05 	teq	r4, r5
   d9a0e:	bf08      	it	eq
   d9a10:	ea90 0f02 	teqeq	r0, r2
   d9a14:	bf1f      	itttt	ne
   d9a16:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9a1a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9a1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9a22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a26:	f000 80e2 	beq.w	d9bee <__adddf3+0x1ee>
   d9a2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9a2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9a32:	bfb8      	it	lt
   d9a34:	426d      	neglt	r5, r5
   d9a36:	dd0c      	ble.n	d9a52 <__adddf3+0x52>
   d9a38:	442c      	add	r4, r5
   d9a3a:	ea80 0202 	eor.w	r2, r0, r2
   d9a3e:	ea81 0303 	eor.w	r3, r1, r3
   d9a42:	ea82 0000 	eor.w	r0, r2, r0
   d9a46:	ea83 0101 	eor.w	r1, r3, r1
   d9a4a:	ea80 0202 	eor.w	r2, r0, r2
   d9a4e:	ea81 0303 	eor.w	r3, r1, r3
   d9a52:	2d36      	cmp	r5, #54	; 0x36
   d9a54:	bf88      	it	hi
   d9a56:	bd30      	pophi	{r4, r5, pc}
   d9a58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a68:	d002      	beq.n	d9a70 <__adddf3+0x70>
   d9a6a:	4240      	negs	r0, r0
   d9a6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9a74:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9a7c:	d002      	beq.n	d9a84 <__adddf3+0x84>
   d9a7e:	4252      	negs	r2, r2
   d9a80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9a84:	ea94 0f05 	teq	r4, r5
   d9a88:	f000 80a7 	beq.w	d9bda <__adddf3+0x1da>
   d9a8c:	f1a4 0401 	sub.w	r4, r4, #1
   d9a90:	f1d5 0e20 	rsbs	lr, r5, #32
   d9a94:	db0d      	blt.n	d9ab2 <__adddf3+0xb2>
   d9a96:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9a9a:	fa22 f205 	lsr.w	r2, r2, r5
   d9a9e:	1880      	adds	r0, r0, r2
   d9aa0:	f141 0100 	adc.w	r1, r1, #0
   d9aa4:	fa03 f20e 	lsl.w	r2, r3, lr
   d9aa8:	1880      	adds	r0, r0, r2
   d9aaa:	fa43 f305 	asr.w	r3, r3, r5
   d9aae:	4159      	adcs	r1, r3
   d9ab0:	e00e      	b.n	d9ad0 <__adddf3+0xd0>
   d9ab2:	f1a5 0520 	sub.w	r5, r5, #32
   d9ab6:	f10e 0e20 	add.w	lr, lr, #32
   d9aba:	2a01      	cmp	r2, #1
   d9abc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9ac0:	bf28      	it	cs
   d9ac2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9ac6:	fa43 f305 	asr.w	r3, r3, r5
   d9aca:	18c0      	adds	r0, r0, r3
   d9acc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9ad0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9ad4:	d507      	bpl.n	d9ae6 <__adddf3+0xe6>
   d9ad6:	f04f 0e00 	mov.w	lr, #0
   d9ada:	f1dc 0c00 	rsbs	ip, ip, #0
   d9ade:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9ae2:	eb6e 0101 	sbc.w	r1, lr, r1
   d9ae6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9aea:	d31b      	bcc.n	d9b24 <__adddf3+0x124>
   d9aec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9af0:	d30c      	bcc.n	d9b0c <__adddf3+0x10c>
   d9af2:	0849      	lsrs	r1, r1, #1
   d9af4:	ea5f 0030 	movs.w	r0, r0, rrx
   d9af8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9afc:	f104 0401 	add.w	r4, r4, #1
   d9b00:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9b04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9b08:	f080 809a 	bcs.w	d9c40 <__adddf3+0x240>
   d9b0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9b10:	bf08      	it	eq
   d9b12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b16:	f150 0000 	adcs.w	r0, r0, #0
   d9b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b1e:	ea41 0105 	orr.w	r1, r1, r5
   d9b22:	bd30      	pop	{r4, r5, pc}
   d9b24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9b28:	4140      	adcs	r0, r0
   d9b2a:	eb41 0101 	adc.w	r1, r1, r1
   d9b2e:	3c01      	subs	r4, #1
   d9b30:	bf28      	it	cs
   d9b32:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9b36:	d2e9      	bcs.n	d9b0c <__adddf3+0x10c>
   d9b38:	f091 0f00 	teq	r1, #0
   d9b3c:	bf04      	itt	eq
   d9b3e:	4601      	moveq	r1, r0
   d9b40:	2000      	moveq	r0, #0
   d9b42:	fab1 f381 	clz	r3, r1
   d9b46:	bf08      	it	eq
   d9b48:	3320      	addeq	r3, #32
   d9b4a:	f1a3 030b 	sub.w	r3, r3, #11
   d9b4e:	f1b3 0220 	subs.w	r2, r3, #32
   d9b52:	da0c      	bge.n	d9b6e <__adddf3+0x16e>
   d9b54:	320c      	adds	r2, #12
   d9b56:	dd08      	ble.n	d9b6a <__adddf3+0x16a>
   d9b58:	f102 0c14 	add.w	ip, r2, #20
   d9b5c:	f1c2 020c 	rsb	r2, r2, #12
   d9b60:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b64:	fa21 f102 	lsr.w	r1, r1, r2
   d9b68:	e00c      	b.n	d9b84 <__adddf3+0x184>
   d9b6a:	f102 0214 	add.w	r2, r2, #20
   d9b6e:	bfd8      	it	le
   d9b70:	f1c2 0c20 	rsble	ip, r2, #32
   d9b74:	fa01 f102 	lsl.w	r1, r1, r2
   d9b78:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9b7c:	bfdc      	itt	le
   d9b7e:	ea41 010c 	orrle.w	r1, r1, ip
   d9b82:	4090      	lslle	r0, r2
   d9b84:	1ae4      	subs	r4, r4, r3
   d9b86:	bfa2      	ittt	ge
   d9b88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9b8c:	4329      	orrge	r1, r5
   d9b8e:	bd30      	popge	{r4, r5, pc}
   d9b90:	ea6f 0404 	mvn.w	r4, r4
   d9b94:	3c1f      	subs	r4, #31
   d9b96:	da1c      	bge.n	d9bd2 <__adddf3+0x1d2>
   d9b98:	340c      	adds	r4, #12
   d9b9a:	dc0e      	bgt.n	d9bba <__adddf3+0x1ba>
   d9b9c:	f104 0414 	add.w	r4, r4, #20
   d9ba0:	f1c4 0220 	rsb	r2, r4, #32
   d9ba4:	fa20 f004 	lsr.w	r0, r0, r4
   d9ba8:	fa01 f302 	lsl.w	r3, r1, r2
   d9bac:	ea40 0003 	orr.w	r0, r0, r3
   d9bb0:	fa21 f304 	lsr.w	r3, r1, r4
   d9bb4:	ea45 0103 	orr.w	r1, r5, r3
   d9bb8:	bd30      	pop	{r4, r5, pc}
   d9bba:	f1c4 040c 	rsb	r4, r4, #12
   d9bbe:	f1c4 0220 	rsb	r2, r4, #32
   d9bc2:	fa20 f002 	lsr.w	r0, r0, r2
   d9bc6:	fa01 f304 	lsl.w	r3, r1, r4
   d9bca:	ea40 0003 	orr.w	r0, r0, r3
   d9bce:	4629      	mov	r1, r5
   d9bd0:	bd30      	pop	{r4, r5, pc}
   d9bd2:	fa21 f004 	lsr.w	r0, r1, r4
   d9bd6:	4629      	mov	r1, r5
   d9bd8:	bd30      	pop	{r4, r5, pc}
   d9bda:	f094 0f00 	teq	r4, #0
   d9bde:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9be2:	bf06      	itte	eq
   d9be4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9be8:	3401      	addeq	r4, #1
   d9bea:	3d01      	subne	r5, #1
   d9bec:	e74e      	b.n	d9a8c <__adddf3+0x8c>
   d9bee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9bf2:	bf18      	it	ne
   d9bf4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9bf8:	d029      	beq.n	d9c4e <__adddf3+0x24e>
   d9bfa:	ea94 0f05 	teq	r4, r5
   d9bfe:	bf08      	it	eq
   d9c00:	ea90 0f02 	teqeq	r0, r2
   d9c04:	d005      	beq.n	d9c12 <__adddf3+0x212>
   d9c06:	ea54 0c00 	orrs.w	ip, r4, r0
   d9c0a:	bf04      	itt	eq
   d9c0c:	4619      	moveq	r1, r3
   d9c0e:	4610      	moveq	r0, r2
   d9c10:	bd30      	pop	{r4, r5, pc}
   d9c12:	ea91 0f03 	teq	r1, r3
   d9c16:	bf1e      	ittt	ne
   d9c18:	2100      	movne	r1, #0
   d9c1a:	2000      	movne	r0, #0
   d9c1c:	bd30      	popne	{r4, r5, pc}
   d9c1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9c22:	d105      	bne.n	d9c30 <__adddf3+0x230>
   d9c24:	0040      	lsls	r0, r0, #1
   d9c26:	4149      	adcs	r1, r1
   d9c28:	bf28      	it	cs
   d9c2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9c2e:	bd30      	pop	{r4, r5, pc}
   d9c30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9c34:	bf3c      	itt	cc
   d9c36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9c3a:	bd30      	popcc	{r4, r5, pc}
   d9c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9c44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c48:	f04f 0000 	mov.w	r0, #0
   d9c4c:	bd30      	pop	{r4, r5, pc}
   d9c4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c52:	bf1a      	itte	ne
   d9c54:	4619      	movne	r1, r3
   d9c56:	4610      	movne	r0, r2
   d9c58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c5c:	bf1c      	itt	ne
   d9c5e:	460b      	movne	r3, r1
   d9c60:	4602      	movne	r2, r0
   d9c62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c66:	bf06      	itte	eq
   d9c68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c6c:	ea91 0f03 	teqeq	r1, r3
   d9c70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9c74:	bd30      	pop	{r4, r5, pc}
   d9c76:	bf00      	nop

000d9c78 <__aeabi_ui2d>:
   d9c78:	f090 0f00 	teq	r0, #0
   d9c7c:	bf04      	itt	eq
   d9c7e:	2100      	moveq	r1, #0
   d9c80:	4770      	bxeq	lr
   d9c82:	b530      	push	{r4, r5, lr}
   d9c84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9c8c:	f04f 0500 	mov.w	r5, #0
   d9c90:	f04f 0100 	mov.w	r1, #0
   d9c94:	e750      	b.n	d9b38 <__adddf3+0x138>
   d9c96:	bf00      	nop

000d9c98 <__aeabi_i2d>:
   d9c98:	f090 0f00 	teq	r0, #0
   d9c9c:	bf04      	itt	eq
   d9c9e:	2100      	moveq	r1, #0
   d9ca0:	4770      	bxeq	lr
   d9ca2:	b530      	push	{r4, r5, lr}
   d9ca4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ca8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9cac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9cb0:	bf48      	it	mi
   d9cb2:	4240      	negmi	r0, r0
   d9cb4:	f04f 0100 	mov.w	r1, #0
   d9cb8:	e73e      	b.n	d9b38 <__adddf3+0x138>
   d9cba:	bf00      	nop

000d9cbc <__aeabi_f2d>:
   d9cbc:	0042      	lsls	r2, r0, #1
   d9cbe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9cc2:	ea4f 0131 	mov.w	r1, r1, rrx
   d9cc6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9cca:	bf1f      	itttt	ne
   d9ccc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9cd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9cd4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9cd8:	4770      	bxne	lr
   d9cda:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9cde:	bf08      	it	eq
   d9ce0:	4770      	bxeq	lr
   d9ce2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9ce6:	bf04      	itt	eq
   d9ce8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9cec:	4770      	bxeq	lr
   d9cee:	b530      	push	{r4, r5, lr}
   d9cf0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9cf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9cfc:	e71c      	b.n	d9b38 <__adddf3+0x138>
   d9cfe:	bf00      	nop

000d9d00 <__aeabi_ul2d>:
   d9d00:	ea50 0201 	orrs.w	r2, r0, r1
   d9d04:	bf08      	it	eq
   d9d06:	4770      	bxeq	lr
   d9d08:	b530      	push	{r4, r5, lr}
   d9d0a:	f04f 0500 	mov.w	r5, #0
   d9d0e:	e00a      	b.n	d9d26 <__aeabi_l2d+0x16>

000d9d10 <__aeabi_l2d>:
   d9d10:	ea50 0201 	orrs.w	r2, r0, r1
   d9d14:	bf08      	it	eq
   d9d16:	4770      	bxeq	lr
   d9d18:	b530      	push	{r4, r5, lr}
   d9d1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9d1e:	d502      	bpl.n	d9d26 <__aeabi_l2d+0x16>
   d9d20:	4240      	negs	r0, r0
   d9d22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d26:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9d2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9d2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9d32:	f43f aed8 	beq.w	d9ae6 <__adddf3+0xe6>
   d9d36:	f04f 0203 	mov.w	r2, #3
   d9d3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d3e:	bf18      	it	ne
   d9d40:	3203      	addne	r2, #3
   d9d42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d46:	bf18      	it	ne
   d9d48:	3203      	addne	r2, #3
   d9d4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9d4e:	f1c2 0320 	rsb	r3, r2, #32
   d9d52:	fa00 fc03 	lsl.w	ip, r0, r3
   d9d56:	fa20 f002 	lsr.w	r0, r0, r2
   d9d5a:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d5e:	ea40 000e 	orr.w	r0, r0, lr
   d9d62:	fa21 f102 	lsr.w	r1, r1, r2
   d9d66:	4414      	add	r4, r2
   d9d68:	e6bd      	b.n	d9ae6 <__adddf3+0xe6>
   d9d6a:	bf00      	nop

000d9d6c <__aeabi_dmul>:
   d9d6c:	b570      	push	{r4, r5, r6, lr}
   d9d6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d7a:	bf1d      	ittte	ne
   d9d7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d80:	ea94 0f0c 	teqne	r4, ip
   d9d84:	ea95 0f0c 	teqne	r5, ip
   d9d88:	f000 f8de 	bleq	d9f48 <__aeabi_dmul+0x1dc>
   d9d8c:	442c      	add	r4, r5
   d9d8e:	ea81 0603 	eor.w	r6, r1, r3
   d9d92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9d96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9d9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9d9e:	bf18      	it	ne
   d9da0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9dac:	d038      	beq.n	d9e20 <__aeabi_dmul+0xb4>
   d9dae:	fba0 ce02 	umull	ip, lr, r0, r2
   d9db2:	f04f 0500 	mov.w	r5, #0
   d9db6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9dba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9dbe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9dc2:	f04f 0600 	mov.w	r6, #0
   d9dc6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9dca:	f09c 0f00 	teq	ip, #0
   d9dce:	bf18      	it	ne
   d9dd0:	f04e 0e01 	orrne.w	lr, lr, #1
   d9dd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9dd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9ddc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9de0:	d204      	bcs.n	d9dec <__aeabi_dmul+0x80>
   d9de2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9de6:	416d      	adcs	r5, r5
   d9de8:	eb46 0606 	adc.w	r6, r6, r6
   d9dec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9df0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9df4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9df8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9dfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9e00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9e04:	bf88      	it	hi
   d9e06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9e0a:	d81e      	bhi.n	d9e4a <__aeabi_dmul+0xde>
   d9e0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9e10:	bf08      	it	eq
   d9e12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9e16:	f150 0000 	adcs.w	r0, r0, #0
   d9e1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e1e:	bd70      	pop	{r4, r5, r6, pc}
   d9e20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9e24:	ea46 0101 	orr.w	r1, r6, r1
   d9e28:	ea40 0002 	orr.w	r0, r0, r2
   d9e2c:	ea81 0103 	eor.w	r1, r1, r3
   d9e30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9e34:	bfc2      	ittt	gt
   d9e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e3e:	bd70      	popgt	{r4, r5, r6, pc}
   d9e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e44:	f04f 0e00 	mov.w	lr, #0
   d9e48:	3c01      	subs	r4, #1
   d9e4a:	f300 80ab 	bgt.w	d9fa4 <__aeabi_dmul+0x238>
   d9e4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9e52:	bfde      	ittt	le
   d9e54:	2000      	movle	r0, #0
   d9e56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9e5a:	bd70      	pople	{r4, r5, r6, pc}
   d9e5c:	f1c4 0400 	rsb	r4, r4, #0
   d9e60:	3c20      	subs	r4, #32
   d9e62:	da35      	bge.n	d9ed0 <__aeabi_dmul+0x164>
   d9e64:	340c      	adds	r4, #12
   d9e66:	dc1b      	bgt.n	d9ea0 <__aeabi_dmul+0x134>
   d9e68:	f104 0414 	add.w	r4, r4, #20
   d9e6c:	f1c4 0520 	rsb	r5, r4, #32
   d9e70:	fa00 f305 	lsl.w	r3, r0, r5
   d9e74:	fa20 f004 	lsr.w	r0, r0, r4
   d9e78:	fa01 f205 	lsl.w	r2, r1, r5
   d9e7c:	ea40 0002 	orr.w	r0, r0, r2
   d9e80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9e88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e8c:	fa21 f604 	lsr.w	r6, r1, r4
   d9e90:	eb42 0106 	adc.w	r1, r2, r6
   d9e94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9e98:	bf08      	it	eq
   d9e9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9e9e:	bd70      	pop	{r4, r5, r6, pc}
   d9ea0:	f1c4 040c 	rsb	r4, r4, #12
   d9ea4:	f1c4 0520 	rsb	r5, r4, #32
   d9ea8:	fa00 f304 	lsl.w	r3, r0, r4
   d9eac:	fa20 f005 	lsr.w	r0, r0, r5
   d9eb0:	fa01 f204 	lsl.w	r2, r1, r4
   d9eb4:	ea40 0002 	orr.w	r0, r0, r2
   d9eb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ebc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9ec0:	f141 0100 	adc.w	r1, r1, #0
   d9ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ec8:	bf08      	it	eq
   d9eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9ece:	bd70      	pop	{r4, r5, r6, pc}
   d9ed0:	f1c4 0520 	rsb	r5, r4, #32
   d9ed4:	fa00 f205 	lsl.w	r2, r0, r5
   d9ed8:	ea4e 0e02 	orr.w	lr, lr, r2
   d9edc:	fa20 f304 	lsr.w	r3, r0, r4
   d9ee0:	fa01 f205 	lsl.w	r2, r1, r5
   d9ee4:	ea43 0302 	orr.w	r3, r3, r2
   d9ee8:	fa21 f004 	lsr.w	r0, r1, r4
   d9eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ef0:	fa21 f204 	lsr.w	r2, r1, r4
   d9ef4:	ea20 0002 	bic.w	r0, r0, r2
   d9ef8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9f00:	bf08      	it	eq
   d9f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9f06:	bd70      	pop	{r4, r5, r6, pc}
   d9f08:	f094 0f00 	teq	r4, #0
   d9f0c:	d10f      	bne.n	d9f2e <__aeabi_dmul+0x1c2>
   d9f0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9f12:	0040      	lsls	r0, r0, #1
   d9f14:	eb41 0101 	adc.w	r1, r1, r1
   d9f18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f1c:	bf08      	it	eq
   d9f1e:	3c01      	subeq	r4, #1
   d9f20:	d0f7      	beq.n	d9f12 <__aeabi_dmul+0x1a6>
   d9f22:	ea41 0106 	orr.w	r1, r1, r6
   d9f26:	f095 0f00 	teq	r5, #0
   d9f2a:	bf18      	it	ne
   d9f2c:	4770      	bxne	lr
   d9f2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9f32:	0052      	lsls	r2, r2, #1
   d9f34:	eb43 0303 	adc.w	r3, r3, r3
   d9f38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9f3c:	bf08      	it	eq
   d9f3e:	3d01      	subeq	r5, #1
   d9f40:	d0f7      	beq.n	d9f32 <__aeabi_dmul+0x1c6>
   d9f42:	ea43 0306 	orr.w	r3, r3, r6
   d9f46:	4770      	bx	lr
   d9f48:	ea94 0f0c 	teq	r4, ip
   d9f4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f50:	bf18      	it	ne
   d9f52:	ea95 0f0c 	teqne	r5, ip
   d9f56:	d00c      	beq.n	d9f72 <__aeabi_dmul+0x206>
   d9f58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f5c:	bf18      	it	ne
   d9f5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f62:	d1d1      	bne.n	d9f08 <__aeabi_dmul+0x19c>
   d9f64:	ea81 0103 	eor.w	r1, r1, r3
   d9f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f6c:	f04f 0000 	mov.w	r0, #0
   d9f70:	bd70      	pop	{r4, r5, r6, pc}
   d9f72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f76:	bf06      	itte	eq
   d9f78:	4610      	moveq	r0, r2
   d9f7a:	4619      	moveq	r1, r3
   d9f7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f80:	d019      	beq.n	d9fb6 <__aeabi_dmul+0x24a>
   d9f82:	ea94 0f0c 	teq	r4, ip
   d9f86:	d102      	bne.n	d9f8e <__aeabi_dmul+0x222>
   d9f88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9f8c:	d113      	bne.n	d9fb6 <__aeabi_dmul+0x24a>
   d9f8e:	ea95 0f0c 	teq	r5, ip
   d9f92:	d105      	bne.n	d9fa0 <__aeabi_dmul+0x234>
   d9f94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9f98:	bf1c      	itt	ne
   d9f9a:	4610      	movne	r0, r2
   d9f9c:	4619      	movne	r1, r3
   d9f9e:	d10a      	bne.n	d9fb6 <__aeabi_dmul+0x24a>
   d9fa0:	ea81 0103 	eor.w	r1, r1, r3
   d9fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9fa8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9fb0:	f04f 0000 	mov.w	r0, #0
   d9fb4:	bd70      	pop	{r4, r5, r6, pc}
   d9fb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9fbe:	bd70      	pop	{r4, r5, r6, pc}

000d9fc0 <__aeabi_ddiv>:
   d9fc0:	b570      	push	{r4, r5, r6, lr}
   d9fc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9fce:	bf1d      	ittte	ne
   d9fd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fd4:	ea94 0f0c 	teqne	r4, ip
   d9fd8:	ea95 0f0c 	teqne	r5, ip
   d9fdc:	f000 f8a7 	bleq	da12e <__aeabi_ddiv+0x16e>
   d9fe0:	eba4 0405 	sub.w	r4, r4, r5
   d9fe4:	ea81 0e03 	eor.w	lr, r1, r3
   d9fe8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9fec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9ff0:	f000 8088 	beq.w	da104 <__aeabi_ddiv+0x144>
   d9ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9ff8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9ffc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da000:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da004:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da008:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da00c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da010:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da014:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da018:	429d      	cmp	r5, r3
   da01a:	bf08      	it	eq
   da01c:	4296      	cmpeq	r6, r2
   da01e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da022:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da026:	d202      	bcs.n	da02e <__aeabi_ddiv+0x6e>
   da028:	085b      	lsrs	r3, r3, #1
   da02a:	ea4f 0232 	mov.w	r2, r2, rrx
   da02e:	1ab6      	subs	r6, r6, r2
   da030:	eb65 0503 	sbc.w	r5, r5, r3
   da034:	085b      	lsrs	r3, r3, #1
   da036:	ea4f 0232 	mov.w	r2, r2, rrx
   da03a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da03e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da042:	ebb6 0e02 	subs.w	lr, r6, r2
   da046:	eb75 0e03 	sbcs.w	lr, r5, r3
   da04a:	bf22      	ittt	cs
   da04c:	1ab6      	subcs	r6, r6, r2
   da04e:	4675      	movcs	r5, lr
   da050:	ea40 000c 	orrcs.w	r0, r0, ip
   da054:	085b      	lsrs	r3, r3, #1
   da056:	ea4f 0232 	mov.w	r2, r2, rrx
   da05a:	ebb6 0e02 	subs.w	lr, r6, r2
   da05e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da062:	bf22      	ittt	cs
   da064:	1ab6      	subcs	r6, r6, r2
   da066:	4675      	movcs	r5, lr
   da068:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da06c:	085b      	lsrs	r3, r3, #1
   da06e:	ea4f 0232 	mov.w	r2, r2, rrx
   da072:	ebb6 0e02 	subs.w	lr, r6, r2
   da076:	eb75 0e03 	sbcs.w	lr, r5, r3
   da07a:	bf22      	ittt	cs
   da07c:	1ab6      	subcs	r6, r6, r2
   da07e:	4675      	movcs	r5, lr
   da080:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da084:	085b      	lsrs	r3, r3, #1
   da086:	ea4f 0232 	mov.w	r2, r2, rrx
   da08a:	ebb6 0e02 	subs.w	lr, r6, r2
   da08e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da092:	bf22      	ittt	cs
   da094:	1ab6      	subcs	r6, r6, r2
   da096:	4675      	movcs	r5, lr
   da098:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da09c:	ea55 0e06 	orrs.w	lr, r5, r6
   da0a0:	d018      	beq.n	da0d4 <__aeabi_ddiv+0x114>
   da0a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da0a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da0aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da0ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da0b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da0b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da0ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da0be:	d1c0      	bne.n	da042 <__aeabi_ddiv+0x82>
   da0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0c4:	d10b      	bne.n	da0de <__aeabi_ddiv+0x11e>
   da0c6:	ea41 0100 	orr.w	r1, r1, r0
   da0ca:	f04f 0000 	mov.w	r0, #0
   da0ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da0d2:	e7b6      	b.n	da042 <__aeabi_ddiv+0x82>
   da0d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0d8:	bf04      	itt	eq
   da0da:	4301      	orreq	r1, r0
   da0dc:	2000      	moveq	r0, #0
   da0de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da0e2:	bf88      	it	hi
   da0e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da0e8:	f63f aeaf 	bhi.w	d9e4a <__aeabi_dmul+0xde>
   da0ec:	ebb5 0c03 	subs.w	ip, r5, r3
   da0f0:	bf04      	itt	eq
   da0f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   da0f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da0fa:	f150 0000 	adcs.w	r0, r0, #0
   da0fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da102:	bd70      	pop	{r4, r5, r6, pc}
   da104:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da108:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da10c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da110:	bfc2      	ittt	gt
   da112:	ebd4 050c 	rsbsgt	r5, r4, ip
   da116:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da11a:	bd70      	popgt	{r4, r5, r6, pc}
   da11c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da120:	f04f 0e00 	mov.w	lr, #0
   da124:	3c01      	subs	r4, #1
   da126:	e690      	b.n	d9e4a <__aeabi_dmul+0xde>
   da128:	ea45 0e06 	orr.w	lr, r5, r6
   da12c:	e68d      	b.n	d9e4a <__aeabi_dmul+0xde>
   da12e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da132:	ea94 0f0c 	teq	r4, ip
   da136:	bf08      	it	eq
   da138:	ea95 0f0c 	teqeq	r5, ip
   da13c:	f43f af3b 	beq.w	d9fb6 <__aeabi_dmul+0x24a>
   da140:	ea94 0f0c 	teq	r4, ip
   da144:	d10a      	bne.n	da15c <__aeabi_ddiv+0x19c>
   da146:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da14a:	f47f af34 	bne.w	d9fb6 <__aeabi_dmul+0x24a>
   da14e:	ea95 0f0c 	teq	r5, ip
   da152:	f47f af25 	bne.w	d9fa0 <__aeabi_dmul+0x234>
   da156:	4610      	mov	r0, r2
   da158:	4619      	mov	r1, r3
   da15a:	e72c      	b.n	d9fb6 <__aeabi_dmul+0x24a>
   da15c:	ea95 0f0c 	teq	r5, ip
   da160:	d106      	bne.n	da170 <__aeabi_ddiv+0x1b0>
   da162:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da166:	f43f aefd 	beq.w	d9f64 <__aeabi_dmul+0x1f8>
   da16a:	4610      	mov	r0, r2
   da16c:	4619      	mov	r1, r3
   da16e:	e722      	b.n	d9fb6 <__aeabi_dmul+0x24a>
   da170:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da174:	bf18      	it	ne
   da176:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da17a:	f47f aec5 	bne.w	d9f08 <__aeabi_dmul+0x19c>
   da17e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da182:	f47f af0d 	bne.w	d9fa0 <__aeabi_dmul+0x234>
   da186:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da18a:	f47f aeeb 	bne.w	d9f64 <__aeabi_dmul+0x1f8>
   da18e:	e712      	b.n	d9fb6 <__aeabi_dmul+0x24a>

000da190 <__gedf2>:
   da190:	f04f 3cff 	mov.w	ip, #4294967295
   da194:	e006      	b.n	da1a4 <__cmpdf2+0x4>
   da196:	bf00      	nop

000da198 <__ledf2>:
   da198:	f04f 0c01 	mov.w	ip, #1
   da19c:	e002      	b.n	da1a4 <__cmpdf2+0x4>
   da19e:	bf00      	nop

000da1a0 <__cmpdf2>:
   da1a0:	f04f 0c01 	mov.w	ip, #1
   da1a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   da1a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1b4:	bf18      	it	ne
   da1b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da1ba:	d01b      	beq.n	da1f4 <__cmpdf2+0x54>
   da1bc:	b001      	add	sp, #4
   da1be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da1c2:	bf0c      	ite	eq
   da1c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da1c8:	ea91 0f03 	teqne	r1, r3
   da1cc:	bf02      	ittt	eq
   da1ce:	ea90 0f02 	teqeq	r0, r2
   da1d2:	2000      	moveq	r0, #0
   da1d4:	4770      	bxeq	lr
   da1d6:	f110 0f00 	cmn.w	r0, #0
   da1da:	ea91 0f03 	teq	r1, r3
   da1de:	bf58      	it	pl
   da1e0:	4299      	cmppl	r1, r3
   da1e2:	bf08      	it	eq
   da1e4:	4290      	cmpeq	r0, r2
   da1e6:	bf2c      	ite	cs
   da1e8:	17d8      	asrcs	r0, r3, #31
   da1ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da1ee:	f040 0001 	orr.w	r0, r0, #1
   da1f2:	4770      	bx	lr
   da1f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1fc:	d102      	bne.n	da204 <__cmpdf2+0x64>
   da1fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da202:	d107      	bne.n	da214 <__cmpdf2+0x74>
   da204:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da20c:	d1d6      	bne.n	da1bc <__cmpdf2+0x1c>
   da20e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da212:	d0d3      	beq.n	da1bc <__cmpdf2+0x1c>
   da214:	f85d 0b04 	ldr.w	r0, [sp], #4
   da218:	4770      	bx	lr
   da21a:	bf00      	nop

000da21c <__aeabi_cdrcmple>:
   da21c:	4684      	mov	ip, r0
   da21e:	4610      	mov	r0, r2
   da220:	4662      	mov	r2, ip
   da222:	468c      	mov	ip, r1
   da224:	4619      	mov	r1, r3
   da226:	4663      	mov	r3, ip
   da228:	e000      	b.n	da22c <__aeabi_cdcmpeq>
   da22a:	bf00      	nop

000da22c <__aeabi_cdcmpeq>:
   da22c:	b501      	push	{r0, lr}
   da22e:	f7ff ffb7 	bl	da1a0 <__cmpdf2>
   da232:	2800      	cmp	r0, #0
   da234:	bf48      	it	mi
   da236:	f110 0f00 	cmnmi.w	r0, #0
   da23a:	bd01      	pop	{r0, pc}

000da23c <__aeabi_dcmpeq>:
   da23c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da240:	f7ff fff4 	bl	da22c <__aeabi_cdcmpeq>
   da244:	bf0c      	ite	eq
   da246:	2001      	moveq	r0, #1
   da248:	2000      	movne	r0, #0
   da24a:	f85d fb08 	ldr.w	pc, [sp], #8
   da24e:	bf00      	nop

000da250 <__aeabi_dcmplt>:
   da250:	f84d ed08 	str.w	lr, [sp, #-8]!
   da254:	f7ff ffea 	bl	da22c <__aeabi_cdcmpeq>
   da258:	bf34      	ite	cc
   da25a:	2001      	movcc	r0, #1
   da25c:	2000      	movcs	r0, #0
   da25e:	f85d fb08 	ldr.w	pc, [sp], #8
   da262:	bf00      	nop

000da264 <__aeabi_dcmple>:
   da264:	f84d ed08 	str.w	lr, [sp, #-8]!
   da268:	f7ff ffe0 	bl	da22c <__aeabi_cdcmpeq>
   da26c:	bf94      	ite	ls
   da26e:	2001      	movls	r0, #1
   da270:	2000      	movhi	r0, #0
   da272:	f85d fb08 	ldr.w	pc, [sp], #8
   da276:	bf00      	nop

000da278 <__aeabi_dcmpge>:
   da278:	f84d ed08 	str.w	lr, [sp, #-8]!
   da27c:	f7ff ffce 	bl	da21c <__aeabi_cdrcmple>
   da280:	bf94      	ite	ls
   da282:	2001      	movls	r0, #1
   da284:	2000      	movhi	r0, #0
   da286:	f85d fb08 	ldr.w	pc, [sp], #8
   da28a:	bf00      	nop

000da28c <__aeabi_dcmpgt>:
   da28c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da290:	f7ff ffc4 	bl	da21c <__aeabi_cdrcmple>
   da294:	bf34      	ite	cc
   da296:	2001      	movcc	r0, #1
   da298:	2000      	movcs	r0, #0
   da29a:	f85d fb08 	ldr.w	pc, [sp], #8
   da29e:	bf00      	nop

000da2a0 <__aeabi_dcmpun>:
   da2a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da2a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2a8:	d102      	bne.n	da2b0 <__aeabi_dcmpun+0x10>
   da2aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da2ae:	d10a      	bne.n	da2c6 <__aeabi_dcmpun+0x26>
   da2b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da2b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2b8:	d102      	bne.n	da2c0 <__aeabi_dcmpun+0x20>
   da2ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da2be:	d102      	bne.n	da2c6 <__aeabi_dcmpun+0x26>
   da2c0:	f04f 0000 	mov.w	r0, #0
   da2c4:	4770      	bx	lr
   da2c6:	f04f 0001 	mov.w	r0, #1
   da2ca:	4770      	bx	lr

000da2cc <__aeabi_d2uiz>:
   da2cc:	004a      	lsls	r2, r1, #1
   da2ce:	d211      	bcs.n	da2f4 <__aeabi_d2uiz+0x28>
   da2d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da2d4:	d211      	bcs.n	da2fa <__aeabi_d2uiz+0x2e>
   da2d6:	d50d      	bpl.n	da2f4 <__aeabi_d2uiz+0x28>
   da2d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da2dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da2e0:	d40e      	bmi.n	da300 <__aeabi_d2uiz+0x34>
   da2e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da2e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da2ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da2ee:	fa23 f002 	lsr.w	r0, r3, r2
   da2f2:	4770      	bx	lr
   da2f4:	f04f 0000 	mov.w	r0, #0
   da2f8:	4770      	bx	lr
   da2fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da2fe:	d102      	bne.n	da306 <__aeabi_d2uiz+0x3a>
   da300:	f04f 30ff 	mov.w	r0, #4294967295
   da304:	4770      	bx	lr
   da306:	f04f 0000 	mov.w	r0, #0
   da30a:	4770      	bx	lr

000da30c <__aeabi_d2f>:
   da30c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da310:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da314:	bf24      	itt	cs
   da316:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da31a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da31e:	d90d      	bls.n	da33c <__aeabi_d2f+0x30>
   da320:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da324:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da328:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da32c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da330:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da334:	bf08      	it	eq
   da336:	f020 0001 	biceq.w	r0, r0, #1
   da33a:	4770      	bx	lr
   da33c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da340:	d121      	bne.n	da386 <__aeabi_d2f+0x7a>
   da342:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da346:	bfbc      	itt	lt
   da348:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da34c:	4770      	bxlt	lr
   da34e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da352:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da356:	f1c2 0218 	rsb	r2, r2, #24
   da35a:	f1c2 0c20 	rsb	ip, r2, #32
   da35e:	fa10 f30c 	lsls.w	r3, r0, ip
   da362:	fa20 f002 	lsr.w	r0, r0, r2
   da366:	bf18      	it	ne
   da368:	f040 0001 	orrne.w	r0, r0, #1
   da36c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da370:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da374:	fa03 fc0c 	lsl.w	ip, r3, ip
   da378:	ea40 000c 	orr.w	r0, r0, ip
   da37c:	fa23 f302 	lsr.w	r3, r3, r2
   da380:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da384:	e7cc      	b.n	da320 <__aeabi_d2f+0x14>
   da386:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da38a:	d107      	bne.n	da39c <__aeabi_d2f+0x90>
   da38c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da390:	bf1e      	ittt	ne
   da392:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da396:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da39a:	4770      	bxne	lr
   da39c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da3a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da3a8:	4770      	bx	lr
   da3aa:	bf00      	nop

000da3ac <__aeabi_frsub>:
   da3ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da3b0:	e002      	b.n	da3b8 <__addsf3>
   da3b2:	bf00      	nop

000da3b4 <__aeabi_fsub>:
   da3b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da3b8 <__addsf3>:
   da3b8:	0042      	lsls	r2, r0, #1
   da3ba:	bf1f      	itttt	ne
   da3bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da3c0:	ea92 0f03 	teqne	r2, r3
   da3c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da3c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da3cc:	d06a      	beq.n	da4a4 <__addsf3+0xec>
   da3ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da3d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da3d6:	bfc1      	itttt	gt
   da3d8:	18d2      	addgt	r2, r2, r3
   da3da:	4041      	eorgt	r1, r0
   da3dc:	4048      	eorgt	r0, r1
   da3de:	4041      	eorgt	r1, r0
   da3e0:	bfb8      	it	lt
   da3e2:	425b      	neglt	r3, r3
   da3e4:	2b19      	cmp	r3, #25
   da3e6:	bf88      	it	hi
   da3e8:	4770      	bxhi	lr
   da3ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da3ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da3f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da3f6:	bf18      	it	ne
   da3f8:	4240      	negne	r0, r0
   da3fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da3fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da402:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da406:	bf18      	it	ne
   da408:	4249      	negne	r1, r1
   da40a:	ea92 0f03 	teq	r2, r3
   da40e:	d03f      	beq.n	da490 <__addsf3+0xd8>
   da410:	f1a2 0201 	sub.w	r2, r2, #1
   da414:	fa41 fc03 	asr.w	ip, r1, r3
   da418:	eb10 000c 	adds.w	r0, r0, ip
   da41c:	f1c3 0320 	rsb	r3, r3, #32
   da420:	fa01 f103 	lsl.w	r1, r1, r3
   da424:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da428:	d502      	bpl.n	da430 <__addsf3+0x78>
   da42a:	4249      	negs	r1, r1
   da42c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da430:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da434:	d313      	bcc.n	da45e <__addsf3+0xa6>
   da436:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da43a:	d306      	bcc.n	da44a <__addsf3+0x92>
   da43c:	0840      	lsrs	r0, r0, #1
   da43e:	ea4f 0131 	mov.w	r1, r1, rrx
   da442:	f102 0201 	add.w	r2, r2, #1
   da446:	2afe      	cmp	r2, #254	; 0xfe
   da448:	d251      	bcs.n	da4ee <__addsf3+0x136>
   da44a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da44e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da452:	bf08      	it	eq
   da454:	f020 0001 	biceq.w	r0, r0, #1
   da458:	ea40 0003 	orr.w	r0, r0, r3
   da45c:	4770      	bx	lr
   da45e:	0049      	lsls	r1, r1, #1
   da460:	eb40 0000 	adc.w	r0, r0, r0
   da464:	3a01      	subs	r2, #1
   da466:	bf28      	it	cs
   da468:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   da46c:	d2ed      	bcs.n	da44a <__addsf3+0x92>
   da46e:	fab0 fc80 	clz	ip, r0
   da472:	f1ac 0c08 	sub.w	ip, ip, #8
   da476:	ebb2 020c 	subs.w	r2, r2, ip
   da47a:	fa00 f00c 	lsl.w	r0, r0, ip
   da47e:	bfaa      	itet	ge
   da480:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da484:	4252      	neglt	r2, r2
   da486:	4318      	orrge	r0, r3
   da488:	bfbc      	itt	lt
   da48a:	40d0      	lsrlt	r0, r2
   da48c:	4318      	orrlt	r0, r3
   da48e:	4770      	bx	lr
   da490:	f092 0f00 	teq	r2, #0
   da494:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da498:	bf06      	itte	eq
   da49a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da49e:	3201      	addeq	r2, #1
   da4a0:	3b01      	subne	r3, #1
   da4a2:	e7b5      	b.n	da410 <__addsf3+0x58>
   da4a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da4a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da4ac:	bf18      	it	ne
   da4ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da4b2:	d021      	beq.n	da4f8 <__addsf3+0x140>
   da4b4:	ea92 0f03 	teq	r2, r3
   da4b8:	d004      	beq.n	da4c4 <__addsf3+0x10c>
   da4ba:	f092 0f00 	teq	r2, #0
   da4be:	bf08      	it	eq
   da4c0:	4608      	moveq	r0, r1
   da4c2:	4770      	bx	lr
   da4c4:	ea90 0f01 	teq	r0, r1
   da4c8:	bf1c      	itt	ne
   da4ca:	2000      	movne	r0, #0
   da4cc:	4770      	bxne	lr
   da4ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da4d2:	d104      	bne.n	da4de <__addsf3+0x126>
   da4d4:	0040      	lsls	r0, r0, #1
   da4d6:	bf28      	it	cs
   da4d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da4dc:	4770      	bx	lr
   da4de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da4e2:	bf3c      	itt	cc
   da4e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da4e8:	4770      	bxcc	lr
   da4ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da4ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da4f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da4f6:	4770      	bx	lr
   da4f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da4fc:	bf16      	itet	ne
   da4fe:	4608      	movne	r0, r1
   da500:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da504:	4601      	movne	r1, r0
   da506:	0242      	lsls	r2, r0, #9
   da508:	bf06      	itte	eq
   da50a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da50e:	ea90 0f01 	teqeq	r0, r1
   da512:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da516:	4770      	bx	lr

000da518 <__aeabi_ui2f>:
   da518:	f04f 0300 	mov.w	r3, #0
   da51c:	e004      	b.n	da528 <__aeabi_i2f+0x8>
   da51e:	bf00      	nop

000da520 <__aeabi_i2f>:
   da520:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da524:	bf48      	it	mi
   da526:	4240      	negmi	r0, r0
   da528:	ea5f 0c00 	movs.w	ip, r0
   da52c:	bf08      	it	eq
   da52e:	4770      	bxeq	lr
   da530:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da534:	4601      	mov	r1, r0
   da536:	f04f 0000 	mov.w	r0, #0
   da53a:	e01c      	b.n	da576 <__aeabi_l2f+0x2a>

000da53c <__aeabi_ul2f>:
   da53c:	ea50 0201 	orrs.w	r2, r0, r1
   da540:	bf08      	it	eq
   da542:	4770      	bxeq	lr
   da544:	f04f 0300 	mov.w	r3, #0
   da548:	e00a      	b.n	da560 <__aeabi_l2f+0x14>
   da54a:	bf00      	nop

000da54c <__aeabi_l2f>:
   da54c:	ea50 0201 	orrs.w	r2, r0, r1
   da550:	bf08      	it	eq
   da552:	4770      	bxeq	lr
   da554:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da558:	d502      	bpl.n	da560 <__aeabi_l2f+0x14>
   da55a:	4240      	negs	r0, r0
   da55c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da560:	ea5f 0c01 	movs.w	ip, r1
   da564:	bf02      	ittt	eq
   da566:	4684      	moveq	ip, r0
   da568:	4601      	moveq	r1, r0
   da56a:	2000      	moveq	r0, #0
   da56c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da570:	bf08      	it	eq
   da572:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da576:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da57a:	fabc f28c 	clz	r2, ip
   da57e:	3a08      	subs	r2, #8
   da580:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da584:	db10      	blt.n	da5a8 <__aeabi_l2f+0x5c>
   da586:	fa01 fc02 	lsl.w	ip, r1, r2
   da58a:	4463      	add	r3, ip
   da58c:	fa00 fc02 	lsl.w	ip, r0, r2
   da590:	f1c2 0220 	rsb	r2, r2, #32
   da594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da598:	fa20 f202 	lsr.w	r2, r0, r2
   da59c:	eb43 0002 	adc.w	r0, r3, r2
   da5a0:	bf08      	it	eq
   da5a2:	f020 0001 	biceq.w	r0, r0, #1
   da5a6:	4770      	bx	lr
   da5a8:	f102 0220 	add.w	r2, r2, #32
   da5ac:	fa01 fc02 	lsl.w	ip, r1, r2
   da5b0:	f1c2 0220 	rsb	r2, r2, #32
   da5b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da5b8:	fa21 f202 	lsr.w	r2, r1, r2
   da5bc:	eb43 0002 	adc.w	r0, r3, r2
   da5c0:	bf08      	it	eq
   da5c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da5c6:	4770      	bx	lr

000da5c8 <__aeabi_ldivmod>:
   da5c8:	b97b      	cbnz	r3, da5ea <__aeabi_ldivmod+0x22>
   da5ca:	b972      	cbnz	r2, da5ea <__aeabi_ldivmod+0x22>
   da5cc:	2900      	cmp	r1, #0
   da5ce:	bfbe      	ittt	lt
   da5d0:	2000      	movlt	r0, #0
   da5d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da5d6:	e006      	blt.n	da5e6 <__aeabi_ldivmod+0x1e>
   da5d8:	bf08      	it	eq
   da5da:	2800      	cmpeq	r0, #0
   da5dc:	bf1c      	itt	ne
   da5de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da5e2:	f04f 30ff 	movne.w	r0, #4294967295
   da5e6:	f000 b9f3 	b.w	da9d0 <__aeabi_idiv0>
   da5ea:	f1ad 0c08 	sub.w	ip, sp, #8
   da5ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da5f2:	2900      	cmp	r1, #0
   da5f4:	db09      	blt.n	da60a <__aeabi_ldivmod+0x42>
   da5f6:	2b00      	cmp	r3, #0
   da5f8:	db1a      	blt.n	da630 <__aeabi_ldivmod+0x68>
   da5fa:	f000 f887 	bl	da70c <__udivmoddi4>
   da5fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   da602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da606:	b004      	add	sp, #16
   da608:	4770      	bx	lr
   da60a:	4240      	negs	r0, r0
   da60c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da610:	2b00      	cmp	r3, #0
   da612:	db1b      	blt.n	da64c <__aeabi_ldivmod+0x84>
   da614:	f000 f87a 	bl	da70c <__udivmoddi4>
   da618:	f8dd e004 	ldr.w	lr, [sp, #4]
   da61c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da620:	b004      	add	sp, #16
   da622:	4240      	negs	r0, r0
   da624:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da628:	4252      	negs	r2, r2
   da62a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da62e:	4770      	bx	lr
   da630:	4252      	negs	r2, r2
   da632:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da636:	f000 f869 	bl	da70c <__udivmoddi4>
   da63a:	f8dd e004 	ldr.w	lr, [sp, #4]
   da63e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da642:	b004      	add	sp, #16
   da644:	4240      	negs	r0, r0
   da646:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da64a:	4770      	bx	lr
   da64c:	4252      	negs	r2, r2
   da64e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da652:	f000 f85b 	bl	da70c <__udivmoddi4>
   da656:	f8dd e004 	ldr.w	lr, [sp, #4]
   da65a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da65e:	b004      	add	sp, #16
   da660:	4252      	negs	r2, r2
   da662:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da666:	4770      	bx	lr

000da668 <__aeabi_f2lz>:
   da668:	ee07 0a90 	vmov	s15, r0
   da66c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da674:	d401      	bmi.n	da67a <__aeabi_f2lz+0x12>
   da676:	f000 b80b 	b.w	da690 <__aeabi_f2ulz>
   da67a:	eef1 7a67 	vneg.f32	s15, s15
   da67e:	b508      	push	{r3, lr}
   da680:	ee17 0a90 	vmov	r0, s15
   da684:	f000 f804 	bl	da690 <__aeabi_f2ulz>
   da688:	4240      	negs	r0, r0
   da68a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da68e:	bd08      	pop	{r3, pc}

000da690 <__aeabi_f2ulz>:
   da690:	b5d0      	push	{r4, r6, r7, lr}
   da692:	f7ff fb13 	bl	d9cbc <__aeabi_f2d>
   da696:	4b0c      	ldr	r3, [pc, #48]	; (da6c8 <__aeabi_f2ulz+0x38>)
   da698:	2200      	movs	r2, #0
   da69a:	4606      	mov	r6, r0
   da69c:	460f      	mov	r7, r1
   da69e:	f7ff fb65 	bl	d9d6c <__aeabi_dmul>
   da6a2:	f7ff fe13 	bl	da2cc <__aeabi_d2uiz>
   da6a6:	4604      	mov	r4, r0
   da6a8:	f7ff fae6 	bl	d9c78 <__aeabi_ui2d>
   da6ac:	4b07      	ldr	r3, [pc, #28]	; (da6cc <__aeabi_f2ulz+0x3c>)
   da6ae:	2200      	movs	r2, #0
   da6b0:	f7ff fb5c 	bl	d9d6c <__aeabi_dmul>
   da6b4:	4602      	mov	r2, r0
   da6b6:	460b      	mov	r3, r1
   da6b8:	4630      	mov	r0, r6
   da6ba:	4639      	mov	r1, r7
   da6bc:	f7ff f99e 	bl	d99fc <__aeabi_dsub>
   da6c0:	f7ff fe04 	bl	da2cc <__aeabi_d2uiz>
   da6c4:	4621      	mov	r1, r4
   da6c6:	bdd0      	pop	{r4, r6, r7, pc}
   da6c8:	3df00000 	.word	0x3df00000
   da6cc:	41f00000 	.word	0x41f00000

000da6d0 <__aeabi_d2ulz>:
   da6d0:	b5d0      	push	{r4, r6, r7, lr}
   da6d2:	4b0c      	ldr	r3, [pc, #48]	; (da704 <__aeabi_d2ulz+0x34>)
   da6d4:	2200      	movs	r2, #0
   da6d6:	4606      	mov	r6, r0
   da6d8:	460f      	mov	r7, r1
   da6da:	f7ff fb47 	bl	d9d6c <__aeabi_dmul>
   da6de:	f7ff fdf5 	bl	da2cc <__aeabi_d2uiz>
   da6e2:	4604      	mov	r4, r0
   da6e4:	f7ff fac8 	bl	d9c78 <__aeabi_ui2d>
   da6e8:	4b07      	ldr	r3, [pc, #28]	; (da708 <__aeabi_d2ulz+0x38>)
   da6ea:	2200      	movs	r2, #0
   da6ec:	f7ff fb3e 	bl	d9d6c <__aeabi_dmul>
   da6f0:	4602      	mov	r2, r0
   da6f2:	460b      	mov	r3, r1
   da6f4:	4630      	mov	r0, r6
   da6f6:	4639      	mov	r1, r7
   da6f8:	f7ff f980 	bl	d99fc <__aeabi_dsub>
   da6fc:	f7ff fde6 	bl	da2cc <__aeabi_d2uiz>
   da700:	4621      	mov	r1, r4
   da702:	bdd0      	pop	{r4, r6, r7, pc}
   da704:	3df00000 	.word	0x3df00000
   da708:	41f00000 	.word	0x41f00000

000da70c <__udivmoddi4>:
   da70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da710:	9d08      	ldr	r5, [sp, #32]
   da712:	4604      	mov	r4, r0
   da714:	468c      	mov	ip, r1
   da716:	2b00      	cmp	r3, #0
   da718:	f040 8083 	bne.w	da822 <__udivmoddi4+0x116>
   da71c:	428a      	cmp	r2, r1
   da71e:	4617      	mov	r7, r2
   da720:	d947      	bls.n	da7b2 <__udivmoddi4+0xa6>
   da722:	fab2 f282 	clz	r2, r2
   da726:	b142      	cbz	r2, da73a <__udivmoddi4+0x2e>
   da728:	f1c2 0020 	rsb	r0, r2, #32
   da72c:	fa24 f000 	lsr.w	r0, r4, r0
   da730:	4091      	lsls	r1, r2
   da732:	4097      	lsls	r7, r2
   da734:	ea40 0c01 	orr.w	ip, r0, r1
   da738:	4094      	lsls	r4, r2
   da73a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da73e:	0c23      	lsrs	r3, r4, #16
   da740:	fbbc f6f8 	udiv	r6, ip, r8
   da744:	fa1f fe87 	uxth.w	lr, r7
   da748:	fb08 c116 	mls	r1, r8, r6, ip
   da74c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da750:	fb06 f10e 	mul.w	r1, r6, lr
   da754:	4299      	cmp	r1, r3
   da756:	d909      	bls.n	da76c <__udivmoddi4+0x60>
   da758:	18fb      	adds	r3, r7, r3
   da75a:	f106 30ff 	add.w	r0, r6, #4294967295
   da75e:	f080 8119 	bcs.w	da994 <__udivmoddi4+0x288>
   da762:	4299      	cmp	r1, r3
   da764:	f240 8116 	bls.w	da994 <__udivmoddi4+0x288>
   da768:	3e02      	subs	r6, #2
   da76a:	443b      	add	r3, r7
   da76c:	1a5b      	subs	r3, r3, r1
   da76e:	b2a4      	uxth	r4, r4
   da770:	fbb3 f0f8 	udiv	r0, r3, r8
   da774:	fb08 3310 	mls	r3, r8, r0, r3
   da778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da77c:	fb00 fe0e 	mul.w	lr, r0, lr
   da780:	45a6      	cmp	lr, r4
   da782:	d909      	bls.n	da798 <__udivmoddi4+0x8c>
   da784:	193c      	adds	r4, r7, r4
   da786:	f100 33ff 	add.w	r3, r0, #4294967295
   da78a:	f080 8105 	bcs.w	da998 <__udivmoddi4+0x28c>
   da78e:	45a6      	cmp	lr, r4
   da790:	f240 8102 	bls.w	da998 <__udivmoddi4+0x28c>
   da794:	3802      	subs	r0, #2
   da796:	443c      	add	r4, r7
   da798:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da79c:	eba4 040e 	sub.w	r4, r4, lr
   da7a0:	2600      	movs	r6, #0
   da7a2:	b11d      	cbz	r5, da7ac <__udivmoddi4+0xa0>
   da7a4:	40d4      	lsrs	r4, r2
   da7a6:	2300      	movs	r3, #0
   da7a8:	e9c5 4300 	strd	r4, r3, [r5]
   da7ac:	4631      	mov	r1, r6
   da7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7b2:	b902      	cbnz	r2, da7b6 <__udivmoddi4+0xaa>
   da7b4:	deff      	udf	#255	; 0xff
   da7b6:	fab2 f282 	clz	r2, r2
   da7ba:	2a00      	cmp	r2, #0
   da7bc:	d150      	bne.n	da860 <__udivmoddi4+0x154>
   da7be:	1bcb      	subs	r3, r1, r7
   da7c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da7c4:	fa1f f887 	uxth.w	r8, r7
   da7c8:	2601      	movs	r6, #1
   da7ca:	fbb3 fcfe 	udiv	ip, r3, lr
   da7ce:	0c21      	lsrs	r1, r4, #16
   da7d0:	fb0e 331c 	mls	r3, lr, ip, r3
   da7d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da7d8:	fb08 f30c 	mul.w	r3, r8, ip
   da7dc:	428b      	cmp	r3, r1
   da7de:	d907      	bls.n	da7f0 <__udivmoddi4+0xe4>
   da7e0:	1879      	adds	r1, r7, r1
   da7e2:	f10c 30ff 	add.w	r0, ip, #4294967295
   da7e6:	d202      	bcs.n	da7ee <__udivmoddi4+0xe2>
   da7e8:	428b      	cmp	r3, r1
   da7ea:	f200 80e9 	bhi.w	da9c0 <__udivmoddi4+0x2b4>
   da7ee:	4684      	mov	ip, r0
   da7f0:	1ac9      	subs	r1, r1, r3
   da7f2:	b2a3      	uxth	r3, r4
   da7f4:	fbb1 f0fe 	udiv	r0, r1, lr
   da7f8:	fb0e 1110 	mls	r1, lr, r0, r1
   da7fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da800:	fb08 f800 	mul.w	r8, r8, r0
   da804:	45a0      	cmp	r8, r4
   da806:	d907      	bls.n	da818 <__udivmoddi4+0x10c>
   da808:	193c      	adds	r4, r7, r4
   da80a:	f100 33ff 	add.w	r3, r0, #4294967295
   da80e:	d202      	bcs.n	da816 <__udivmoddi4+0x10a>
   da810:	45a0      	cmp	r8, r4
   da812:	f200 80d9 	bhi.w	da9c8 <__udivmoddi4+0x2bc>
   da816:	4618      	mov	r0, r3
   da818:	eba4 0408 	sub.w	r4, r4, r8
   da81c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da820:	e7bf      	b.n	da7a2 <__udivmoddi4+0x96>
   da822:	428b      	cmp	r3, r1
   da824:	d909      	bls.n	da83a <__udivmoddi4+0x12e>
   da826:	2d00      	cmp	r5, #0
   da828:	f000 80b1 	beq.w	da98e <__udivmoddi4+0x282>
   da82c:	2600      	movs	r6, #0
   da82e:	e9c5 0100 	strd	r0, r1, [r5]
   da832:	4630      	mov	r0, r6
   da834:	4631      	mov	r1, r6
   da836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da83a:	fab3 f683 	clz	r6, r3
   da83e:	2e00      	cmp	r6, #0
   da840:	d14a      	bne.n	da8d8 <__udivmoddi4+0x1cc>
   da842:	428b      	cmp	r3, r1
   da844:	d302      	bcc.n	da84c <__udivmoddi4+0x140>
   da846:	4282      	cmp	r2, r0
   da848:	f200 80b8 	bhi.w	da9bc <__udivmoddi4+0x2b0>
   da84c:	1a84      	subs	r4, r0, r2
   da84e:	eb61 0103 	sbc.w	r1, r1, r3
   da852:	2001      	movs	r0, #1
   da854:	468c      	mov	ip, r1
   da856:	2d00      	cmp	r5, #0
   da858:	d0a8      	beq.n	da7ac <__udivmoddi4+0xa0>
   da85a:	e9c5 4c00 	strd	r4, ip, [r5]
   da85e:	e7a5      	b.n	da7ac <__udivmoddi4+0xa0>
   da860:	f1c2 0320 	rsb	r3, r2, #32
   da864:	fa20 f603 	lsr.w	r6, r0, r3
   da868:	4097      	lsls	r7, r2
   da86a:	fa01 f002 	lsl.w	r0, r1, r2
   da86e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da872:	40d9      	lsrs	r1, r3
   da874:	4330      	orrs	r0, r6
   da876:	0c03      	lsrs	r3, r0, #16
   da878:	fbb1 f6fe 	udiv	r6, r1, lr
   da87c:	fa1f f887 	uxth.w	r8, r7
   da880:	fb0e 1116 	mls	r1, lr, r6, r1
   da884:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da888:	fb06 f108 	mul.w	r1, r6, r8
   da88c:	4299      	cmp	r1, r3
   da88e:	fa04 f402 	lsl.w	r4, r4, r2
   da892:	d909      	bls.n	da8a8 <__udivmoddi4+0x19c>
   da894:	18fb      	adds	r3, r7, r3
   da896:	f106 3cff 	add.w	ip, r6, #4294967295
   da89a:	f080 808d 	bcs.w	da9b8 <__udivmoddi4+0x2ac>
   da89e:	4299      	cmp	r1, r3
   da8a0:	f240 808a 	bls.w	da9b8 <__udivmoddi4+0x2ac>
   da8a4:	3e02      	subs	r6, #2
   da8a6:	443b      	add	r3, r7
   da8a8:	1a5b      	subs	r3, r3, r1
   da8aa:	b281      	uxth	r1, r0
   da8ac:	fbb3 f0fe 	udiv	r0, r3, lr
   da8b0:	fb0e 3310 	mls	r3, lr, r0, r3
   da8b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da8b8:	fb00 f308 	mul.w	r3, r0, r8
   da8bc:	428b      	cmp	r3, r1
   da8be:	d907      	bls.n	da8d0 <__udivmoddi4+0x1c4>
   da8c0:	1879      	adds	r1, r7, r1
   da8c2:	f100 3cff 	add.w	ip, r0, #4294967295
   da8c6:	d273      	bcs.n	da9b0 <__udivmoddi4+0x2a4>
   da8c8:	428b      	cmp	r3, r1
   da8ca:	d971      	bls.n	da9b0 <__udivmoddi4+0x2a4>
   da8cc:	3802      	subs	r0, #2
   da8ce:	4439      	add	r1, r7
   da8d0:	1acb      	subs	r3, r1, r3
   da8d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da8d6:	e778      	b.n	da7ca <__udivmoddi4+0xbe>
   da8d8:	f1c6 0c20 	rsb	ip, r6, #32
   da8dc:	fa03 f406 	lsl.w	r4, r3, r6
   da8e0:	fa22 f30c 	lsr.w	r3, r2, ip
   da8e4:	431c      	orrs	r4, r3
   da8e6:	fa20 f70c 	lsr.w	r7, r0, ip
   da8ea:	fa01 f306 	lsl.w	r3, r1, r6
   da8ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da8f2:	fa21 f10c 	lsr.w	r1, r1, ip
   da8f6:	431f      	orrs	r7, r3
   da8f8:	0c3b      	lsrs	r3, r7, #16
   da8fa:	fbb1 f9fe 	udiv	r9, r1, lr
   da8fe:	fa1f f884 	uxth.w	r8, r4
   da902:	fb0e 1119 	mls	r1, lr, r9, r1
   da906:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da90a:	fb09 fa08 	mul.w	sl, r9, r8
   da90e:	458a      	cmp	sl, r1
   da910:	fa02 f206 	lsl.w	r2, r2, r6
   da914:	fa00 f306 	lsl.w	r3, r0, r6
   da918:	d908      	bls.n	da92c <__udivmoddi4+0x220>
   da91a:	1861      	adds	r1, r4, r1
   da91c:	f109 30ff 	add.w	r0, r9, #4294967295
   da920:	d248      	bcs.n	da9b4 <__udivmoddi4+0x2a8>
   da922:	458a      	cmp	sl, r1
   da924:	d946      	bls.n	da9b4 <__udivmoddi4+0x2a8>
   da926:	f1a9 0902 	sub.w	r9, r9, #2
   da92a:	4421      	add	r1, r4
   da92c:	eba1 010a 	sub.w	r1, r1, sl
   da930:	b2bf      	uxth	r7, r7
   da932:	fbb1 f0fe 	udiv	r0, r1, lr
   da936:	fb0e 1110 	mls	r1, lr, r0, r1
   da93a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da93e:	fb00 f808 	mul.w	r8, r0, r8
   da942:	45b8      	cmp	r8, r7
   da944:	d907      	bls.n	da956 <__udivmoddi4+0x24a>
   da946:	19e7      	adds	r7, r4, r7
   da948:	f100 31ff 	add.w	r1, r0, #4294967295
   da94c:	d22e      	bcs.n	da9ac <__udivmoddi4+0x2a0>
   da94e:	45b8      	cmp	r8, r7
   da950:	d92c      	bls.n	da9ac <__udivmoddi4+0x2a0>
   da952:	3802      	subs	r0, #2
   da954:	4427      	add	r7, r4
   da956:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da95a:	eba7 0708 	sub.w	r7, r7, r8
   da95e:	fba0 8902 	umull	r8, r9, r0, r2
   da962:	454f      	cmp	r7, r9
   da964:	46c6      	mov	lr, r8
   da966:	4649      	mov	r1, r9
   da968:	d31a      	bcc.n	da9a0 <__udivmoddi4+0x294>
   da96a:	d017      	beq.n	da99c <__udivmoddi4+0x290>
   da96c:	b15d      	cbz	r5, da986 <__udivmoddi4+0x27a>
   da96e:	ebb3 020e 	subs.w	r2, r3, lr
   da972:	eb67 0701 	sbc.w	r7, r7, r1
   da976:	fa07 fc0c 	lsl.w	ip, r7, ip
   da97a:	40f2      	lsrs	r2, r6
   da97c:	ea4c 0202 	orr.w	r2, ip, r2
   da980:	40f7      	lsrs	r7, r6
   da982:	e9c5 2700 	strd	r2, r7, [r5]
   da986:	2600      	movs	r6, #0
   da988:	4631      	mov	r1, r6
   da98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da98e:	462e      	mov	r6, r5
   da990:	4628      	mov	r0, r5
   da992:	e70b      	b.n	da7ac <__udivmoddi4+0xa0>
   da994:	4606      	mov	r6, r0
   da996:	e6e9      	b.n	da76c <__udivmoddi4+0x60>
   da998:	4618      	mov	r0, r3
   da99a:	e6fd      	b.n	da798 <__udivmoddi4+0x8c>
   da99c:	4543      	cmp	r3, r8
   da99e:	d2e5      	bcs.n	da96c <__udivmoddi4+0x260>
   da9a0:	ebb8 0e02 	subs.w	lr, r8, r2
   da9a4:	eb69 0104 	sbc.w	r1, r9, r4
   da9a8:	3801      	subs	r0, #1
   da9aa:	e7df      	b.n	da96c <__udivmoddi4+0x260>
   da9ac:	4608      	mov	r0, r1
   da9ae:	e7d2      	b.n	da956 <__udivmoddi4+0x24a>
   da9b0:	4660      	mov	r0, ip
   da9b2:	e78d      	b.n	da8d0 <__udivmoddi4+0x1c4>
   da9b4:	4681      	mov	r9, r0
   da9b6:	e7b9      	b.n	da92c <__udivmoddi4+0x220>
   da9b8:	4666      	mov	r6, ip
   da9ba:	e775      	b.n	da8a8 <__udivmoddi4+0x19c>
   da9bc:	4630      	mov	r0, r6
   da9be:	e74a      	b.n	da856 <__udivmoddi4+0x14a>
   da9c0:	f1ac 0c02 	sub.w	ip, ip, #2
   da9c4:	4439      	add	r1, r7
   da9c6:	e713      	b.n	da7f0 <__udivmoddi4+0xe4>
   da9c8:	3802      	subs	r0, #2
   da9ca:	443c      	add	r4, r7
   da9cc:	e724      	b.n	da818 <__udivmoddi4+0x10c>
   da9ce:	bf00      	nop

000da9d0 <__aeabi_idiv0>:
   da9d0:	4770      	bx	lr
   da9d2:	bf00      	nop

000da9d4 <asctime_r>:
   da9d4:	b510      	push	{r4, lr}
   da9d6:	460c      	mov	r4, r1
   da9d8:	6941      	ldr	r1, [r0, #20]
   da9da:	6903      	ldr	r3, [r0, #16]
   da9dc:	6982      	ldr	r2, [r0, #24]
   da9de:	b086      	sub	sp, #24
   da9e0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da9e4:	9104      	str	r1, [sp, #16]
   da9e6:	6801      	ldr	r1, [r0, #0]
   da9e8:	9103      	str	r1, [sp, #12]
   da9ea:	6841      	ldr	r1, [r0, #4]
   da9ec:	9102      	str	r1, [sp, #8]
   da9ee:	6881      	ldr	r1, [r0, #8]
   da9f0:	9101      	str	r1, [sp, #4]
   da9f2:	68c1      	ldr	r1, [r0, #12]
   da9f4:	9100      	str	r1, [sp, #0]
   da9f6:	4907      	ldr	r1, [pc, #28]	; (daa14 <asctime_r+0x40>)
   da9f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da9fc:	440b      	add	r3, r1
   da9fe:	4906      	ldr	r1, [pc, #24]	; (daa18 <asctime_r+0x44>)
   daa00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daa04:	440a      	add	r2, r1
   daa06:	4620      	mov	r0, r4
   daa08:	4904      	ldr	r1, [pc, #16]	; (daa1c <asctime_r+0x48>)
   daa0a:	f7fc f9bf 	bl	d6d8c <siprintf>
   daa0e:	4620      	mov	r0, r4
   daa10:	b006      	add	sp, #24
   daa12:	bd10      	pop	{r4, pc}
   daa14:	000dd7dd 	.word	0x000dd7dd
   daa18:	000dd7c8 	.word	0x000dd7c8
   daa1c:	000dd7a8 	.word	0x000dd7a8

000daa20 <atof>:
   daa20:	2100      	movs	r1, #0
   daa22:	f000 beff 	b.w	db824 <strtod>
	...

000daa28 <__cxa_atexit>:
   daa28:	b510      	push	{r4, lr}
   daa2a:	4c05      	ldr	r4, [pc, #20]	; (daa40 <__cxa_atexit+0x18>)
   daa2c:	4613      	mov	r3, r2
   daa2e:	b12c      	cbz	r4, daa3c <__cxa_atexit+0x14>
   daa30:	460a      	mov	r2, r1
   daa32:	4601      	mov	r1, r0
   daa34:	2002      	movs	r0, #2
   daa36:	f3af 8000 	nop.w
   daa3a:	bd10      	pop	{r4, pc}
   daa3c:	4620      	mov	r0, r4
   daa3e:	e7fc      	b.n	daa3a <__cxa_atexit+0x12>
   daa40:	00000000 	.word	0x00000000

000daa44 <ldiv>:
   daa44:	2900      	cmp	r1, #0
   daa46:	b510      	push	{r4, lr}
   daa48:	fb91 f4f2 	sdiv	r4, r1, r2
   daa4c:	fb02 1314 	mls	r3, r2, r4, r1
   daa50:	db06      	blt.n	daa60 <ldiv+0x1c>
   daa52:	2b00      	cmp	r3, #0
   daa54:	da01      	bge.n	daa5a <ldiv+0x16>
   daa56:	3401      	adds	r4, #1
   daa58:	1a9b      	subs	r3, r3, r2
   daa5a:	e9c0 4300 	strd	r4, r3, [r0]
   daa5e:	bd10      	pop	{r4, pc}
   daa60:	2b00      	cmp	r3, #0
   daa62:	bfc4      	itt	gt
   daa64:	f104 34ff 	addgt.w	r4, r4, #4294967295
   daa68:	189b      	addgt	r3, r3, r2
   daa6a:	e7f6      	b.n	daa5a <ldiv+0x16>

000daa6c <memcpy>:
   daa6c:	440a      	add	r2, r1
   daa6e:	4291      	cmp	r1, r2
   daa70:	f100 33ff 	add.w	r3, r0, #4294967295
   daa74:	d100      	bne.n	daa78 <memcpy+0xc>
   daa76:	4770      	bx	lr
   daa78:	b510      	push	{r4, lr}
   daa7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   daa7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   daa82:	4291      	cmp	r1, r2
   daa84:	d1f9      	bne.n	daa7a <memcpy+0xe>
   daa86:	bd10      	pop	{r4, pc}

000daa88 <memmove>:
   daa88:	4288      	cmp	r0, r1
   daa8a:	b510      	push	{r4, lr}
   daa8c:	eb01 0402 	add.w	r4, r1, r2
   daa90:	d902      	bls.n	daa98 <memmove+0x10>
   daa92:	4284      	cmp	r4, r0
   daa94:	4623      	mov	r3, r4
   daa96:	d807      	bhi.n	daaa8 <memmove+0x20>
   daa98:	1e43      	subs	r3, r0, #1
   daa9a:	42a1      	cmp	r1, r4
   daa9c:	d008      	beq.n	daab0 <memmove+0x28>
   daa9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   daaa2:	f803 2f01 	strb.w	r2, [r3, #1]!
   daaa6:	e7f8      	b.n	daa9a <memmove+0x12>
   daaa8:	4402      	add	r2, r0
   daaaa:	4601      	mov	r1, r0
   daaac:	428a      	cmp	r2, r1
   daaae:	d100      	bne.n	daab2 <memmove+0x2a>
   daab0:	bd10      	pop	{r4, pc}
   daab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   daab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   daaba:	e7f7      	b.n	daaac <memmove+0x24>

000daabc <memset>:
   daabc:	4402      	add	r2, r0
   daabe:	4603      	mov	r3, r0
   daac0:	4293      	cmp	r3, r2
   daac2:	d100      	bne.n	daac6 <memset+0xa>
   daac4:	4770      	bx	lr
   daac6:	f803 1b01 	strb.w	r1, [r3], #1
   daaca:	e7f9      	b.n	daac0 <memset+0x4>

000daacc <srand>:
   daacc:	b538      	push	{r3, r4, r5, lr}
   daace:	4b0d      	ldr	r3, [pc, #52]	; (dab04 <srand+0x38>)
   daad0:	681d      	ldr	r5, [r3, #0]
   daad2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daad4:	4604      	mov	r4, r0
   daad6:	b97b      	cbnz	r3, daaf8 <srand+0x2c>
   daad8:	2018      	movs	r0, #24
   daada:	f7fc f937 	bl	d6d4c <malloc>
   daade:	4a0a      	ldr	r2, [pc, #40]	; (dab08 <srand+0x3c>)
   daae0:	4b0a      	ldr	r3, [pc, #40]	; (dab0c <srand+0x40>)
   daae2:	63a8      	str	r0, [r5, #56]	; 0x38
   daae4:	e9c0 2300 	strd	r2, r3, [r0]
   daae8:	4b09      	ldr	r3, [pc, #36]	; (dab10 <srand+0x44>)
   daaea:	6083      	str	r3, [r0, #8]
   daaec:	230b      	movs	r3, #11
   daaee:	8183      	strh	r3, [r0, #12]
   daaf0:	2201      	movs	r2, #1
   daaf2:	2300      	movs	r3, #0
   daaf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   daaf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daafa:	2200      	movs	r2, #0
   daafc:	611c      	str	r4, [r3, #16]
   daafe:	615a      	str	r2, [r3, #20]
   dab00:	bd38      	pop	{r3, r4, r5, pc}
   dab02:	bf00      	nop
   dab04:	2003e1d0 	.word	0x2003e1d0
   dab08:	abcd330e 	.word	0xabcd330e
   dab0c:	e66d1234 	.word	0xe66d1234
   dab10:	0005deec 	.word	0x0005deec

000dab14 <strcmp>:
   dab14:	f810 2b01 	ldrb.w	r2, [r0], #1
   dab18:	f811 3b01 	ldrb.w	r3, [r1], #1
   dab1c:	2a01      	cmp	r2, #1
   dab1e:	bf28      	it	cs
   dab20:	429a      	cmpcs	r2, r3
   dab22:	d0f7      	beq.n	dab14 <strcmp>
   dab24:	1ad0      	subs	r0, r2, r3
   dab26:	4770      	bx	lr

000dab28 <strcpy>:
   dab28:	4603      	mov	r3, r0
   dab2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   dab2e:	f803 2b01 	strb.w	r2, [r3], #1
   dab32:	2a00      	cmp	r2, #0
   dab34:	d1f9      	bne.n	dab2a <strcpy+0x2>
   dab36:	4770      	bx	lr

000dab38 <strlen>:
   dab38:	4603      	mov	r3, r0
   dab3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dab3e:	2a00      	cmp	r2, #0
   dab40:	d1fb      	bne.n	dab3a <strlen+0x2>
   dab42:	1a18      	subs	r0, r3, r0
   dab44:	3801      	subs	r0, #1
   dab46:	4770      	bx	lr

000dab48 <strncasecmp>:
   dab48:	b570      	push	{r4, r5, r6, lr}
   dab4a:	4e0f      	ldr	r6, [pc, #60]	; (dab88 <strncasecmp+0x40>)
   dab4c:	4604      	mov	r4, r0
   dab4e:	440a      	add	r2, r1
   dab50:	428a      	cmp	r2, r1
   dab52:	d101      	bne.n	dab58 <strncasecmp+0x10>
   dab54:	2000      	movs	r0, #0
   dab56:	e013      	b.n	dab80 <strncasecmp+0x38>
   dab58:	f814 3b01 	ldrb.w	r3, [r4], #1
   dab5c:	5d98      	ldrb	r0, [r3, r6]
   dab5e:	f000 0003 	and.w	r0, r0, #3
   dab62:	2801      	cmp	r0, #1
   dab64:	f811 0b01 	ldrb.w	r0, [r1], #1
   dab68:	5c35      	ldrb	r5, [r6, r0]
   dab6a:	f005 0503 	and.w	r5, r5, #3
   dab6e:	bf08      	it	eq
   dab70:	3320      	addeq	r3, #32
   dab72:	2d01      	cmp	r5, #1
   dab74:	bf08      	it	eq
   dab76:	3020      	addeq	r0, #32
   dab78:	1a1b      	subs	r3, r3, r0
   dab7a:	d102      	bne.n	dab82 <strncasecmp+0x3a>
   dab7c:	2800      	cmp	r0, #0
   dab7e:	d1e7      	bne.n	dab50 <strncasecmp+0x8>
   dab80:	bd70      	pop	{r4, r5, r6, pc}
   dab82:	4618      	mov	r0, r3
   dab84:	e7fc      	b.n	dab80 <strncasecmp+0x38>
   dab86:	bf00      	nop
   dab88:	000dd861 	.word	0x000dd861

000dab8c <strncmp>:
   dab8c:	b510      	push	{r4, lr}
   dab8e:	b16a      	cbz	r2, dabac <strncmp+0x20>
   dab90:	3901      	subs	r1, #1
   dab92:	1884      	adds	r4, r0, r2
   dab94:	f810 3b01 	ldrb.w	r3, [r0], #1
   dab98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dab9c:	4293      	cmp	r3, r2
   dab9e:	d103      	bne.n	daba8 <strncmp+0x1c>
   daba0:	42a0      	cmp	r0, r4
   daba2:	d001      	beq.n	daba8 <strncmp+0x1c>
   daba4:	2b00      	cmp	r3, #0
   daba6:	d1f5      	bne.n	dab94 <strncmp+0x8>
   daba8:	1a98      	subs	r0, r3, r2
   dabaa:	bd10      	pop	{r4, pc}
   dabac:	4610      	mov	r0, r2
   dabae:	e7fc      	b.n	dabaa <strncmp+0x1e>

000dabb0 <strncpy>:
   dabb0:	b510      	push	{r4, lr}
   dabb2:	3901      	subs	r1, #1
   dabb4:	4603      	mov	r3, r0
   dabb6:	b132      	cbz	r2, dabc6 <strncpy+0x16>
   dabb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dabbc:	f803 4b01 	strb.w	r4, [r3], #1
   dabc0:	3a01      	subs	r2, #1
   dabc2:	2c00      	cmp	r4, #0
   dabc4:	d1f7      	bne.n	dabb6 <strncpy+0x6>
   dabc6:	441a      	add	r2, r3
   dabc8:	2100      	movs	r1, #0
   dabca:	4293      	cmp	r3, r2
   dabcc:	d100      	bne.n	dabd0 <strncpy+0x20>
   dabce:	bd10      	pop	{r4, pc}
   dabd0:	f803 1b01 	strb.w	r1, [r3], #1
   dabd4:	e7f9      	b.n	dabca <strncpy+0x1a>

000dabd6 <sulp>:
   dabd6:	b570      	push	{r4, r5, r6, lr}
   dabd8:	4604      	mov	r4, r0
   dabda:	460d      	mov	r5, r1
   dabdc:	ec45 4b10 	vmov	d0, r4, r5
   dabe0:	4616      	mov	r6, r2
   dabe2:	f001 fc97 	bl	dc514 <__ulp>
   dabe6:	ec51 0b10 	vmov	r0, r1, d0
   dabea:	b17e      	cbz	r6, dac0c <sulp+0x36>
   dabec:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dabf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dabf4:	2b00      	cmp	r3, #0
   dabf6:	dd09      	ble.n	dac0c <sulp+0x36>
   dabf8:	051b      	lsls	r3, r3, #20
   dabfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dabfe:	2400      	movs	r4, #0
   dac00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dac04:	4622      	mov	r2, r4
   dac06:	462b      	mov	r3, r5
   dac08:	f7ff f8b0 	bl	d9d6c <__aeabi_dmul>
   dac0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dac10 <_strtod_l>:
   dac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac14:	b0a3      	sub	sp, #140	; 0x8c
   dac16:	461f      	mov	r7, r3
   dac18:	2300      	movs	r3, #0
   dac1a:	931e      	str	r3, [sp, #120]	; 0x78
   dac1c:	4ba4      	ldr	r3, [pc, #656]	; (daeb0 <_strtod_l+0x2a0>)
   dac1e:	9219      	str	r2, [sp, #100]	; 0x64
   dac20:	681b      	ldr	r3, [r3, #0]
   dac22:	9307      	str	r3, [sp, #28]
   dac24:	4604      	mov	r4, r0
   dac26:	4618      	mov	r0, r3
   dac28:	4688      	mov	r8, r1
   dac2a:	f7ff ff85 	bl	dab38 <strlen>
   dac2e:	f04f 0a00 	mov.w	sl, #0
   dac32:	4605      	mov	r5, r0
   dac34:	f04f 0b00 	mov.w	fp, #0
   dac38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dac3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac3e:	781a      	ldrb	r2, [r3, #0]
   dac40:	2a2b      	cmp	r2, #43	; 0x2b
   dac42:	d04c      	beq.n	dacde <_strtod_l+0xce>
   dac44:	d839      	bhi.n	dacba <_strtod_l+0xaa>
   dac46:	2a0d      	cmp	r2, #13
   dac48:	d832      	bhi.n	dacb0 <_strtod_l+0xa0>
   dac4a:	2a08      	cmp	r2, #8
   dac4c:	d832      	bhi.n	dacb4 <_strtod_l+0xa4>
   dac4e:	2a00      	cmp	r2, #0
   dac50:	d03c      	beq.n	daccc <_strtod_l+0xbc>
   dac52:	2300      	movs	r3, #0
   dac54:	930e      	str	r3, [sp, #56]	; 0x38
   dac56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dac58:	7833      	ldrb	r3, [r6, #0]
   dac5a:	2b30      	cmp	r3, #48	; 0x30
   dac5c:	f040 80b4 	bne.w	dadc8 <_strtod_l+0x1b8>
   dac60:	7873      	ldrb	r3, [r6, #1]
   dac62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dac66:	2b58      	cmp	r3, #88	; 0x58
   dac68:	d16c      	bne.n	dad44 <_strtod_l+0x134>
   dac6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dac6c:	9301      	str	r3, [sp, #4]
   dac6e:	ab1e      	add	r3, sp, #120	; 0x78
   dac70:	9702      	str	r7, [sp, #8]
   dac72:	9300      	str	r3, [sp, #0]
   dac74:	4a8f      	ldr	r2, [pc, #572]	; (daeb4 <_strtod_l+0x2a4>)
   dac76:	ab1f      	add	r3, sp, #124	; 0x7c
   dac78:	a91d      	add	r1, sp, #116	; 0x74
   dac7a:	4620      	mov	r0, r4
   dac7c:	f000 fe46 	bl	db90c <__gethex>
   dac80:	f010 0707 	ands.w	r7, r0, #7
   dac84:	4605      	mov	r5, r0
   dac86:	d005      	beq.n	dac94 <_strtod_l+0x84>
   dac88:	2f06      	cmp	r7, #6
   dac8a:	d12a      	bne.n	dace2 <_strtod_l+0xd2>
   dac8c:	3601      	adds	r6, #1
   dac8e:	2300      	movs	r3, #0
   dac90:	961d      	str	r6, [sp, #116]	; 0x74
   dac92:	930e      	str	r3, [sp, #56]	; 0x38
   dac94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dac96:	2b00      	cmp	r3, #0
   dac98:	f040 8596 	bne.w	db7c8 <_strtod_l+0xbb8>
   dac9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dac9e:	b1db      	cbz	r3, dacd8 <_strtod_l+0xc8>
   daca0:	4652      	mov	r2, sl
   daca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   daca6:	ec43 2b10 	vmov	d0, r2, r3
   dacaa:	b023      	add	sp, #140	; 0x8c
   dacac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dacb0:	2a20      	cmp	r2, #32
   dacb2:	d1ce      	bne.n	dac52 <_strtod_l+0x42>
   dacb4:	3301      	adds	r3, #1
   dacb6:	931d      	str	r3, [sp, #116]	; 0x74
   dacb8:	e7c0      	b.n	dac3c <_strtod_l+0x2c>
   dacba:	2a2d      	cmp	r2, #45	; 0x2d
   dacbc:	d1c9      	bne.n	dac52 <_strtod_l+0x42>
   dacbe:	2201      	movs	r2, #1
   dacc0:	920e      	str	r2, [sp, #56]	; 0x38
   dacc2:	1c5a      	adds	r2, r3, #1
   dacc4:	921d      	str	r2, [sp, #116]	; 0x74
   dacc6:	785b      	ldrb	r3, [r3, #1]
   dacc8:	2b00      	cmp	r3, #0
   dacca:	d1c4      	bne.n	dac56 <_strtod_l+0x46>
   daccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dacce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dacd2:	2b00      	cmp	r3, #0
   dacd4:	f040 8576 	bne.w	db7c4 <_strtod_l+0xbb4>
   dacd8:	4652      	mov	r2, sl
   dacda:	465b      	mov	r3, fp
   dacdc:	e7e3      	b.n	daca6 <_strtod_l+0x96>
   dacde:	2200      	movs	r2, #0
   dace0:	e7ee      	b.n	dacc0 <_strtod_l+0xb0>
   dace2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dace4:	b13a      	cbz	r2, dacf6 <_strtod_l+0xe6>
   dace6:	2135      	movs	r1, #53	; 0x35
   dace8:	a820      	add	r0, sp, #128	; 0x80
   dacea:	f001 fd12 	bl	dc712 <__copybits>
   dacee:	991e      	ldr	r1, [sp, #120]	; 0x78
   dacf0:	4620      	mov	r0, r4
   dacf2:	f001 f947 	bl	dbf84 <_Bfree>
   dacf6:	3f01      	subs	r7, #1
   dacf8:	2f05      	cmp	r7, #5
   dacfa:	d807      	bhi.n	dad0c <_strtod_l+0xfc>
   dacfc:	e8df f007 	tbb	[pc, r7]
   dad00:	1d180b0e 	.word	0x1d180b0e
   dad04:	030e      	.short	0x030e
   dad06:	f04f 0b00 	mov.w	fp, #0
   dad0a:	46da      	mov	sl, fp
   dad0c:	0728      	lsls	r0, r5, #28
   dad0e:	d5c1      	bpl.n	dac94 <_strtod_l+0x84>
   dad10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dad14:	e7be      	b.n	dac94 <_strtod_l+0x84>
   dad16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dad1a:	e7f7      	b.n	dad0c <_strtod_l+0xfc>
   dad1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dad20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dad22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dad26:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dad2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dad2e:	e7ed      	b.n	dad0c <_strtod_l+0xfc>
   dad30:	f8df b184 	ldr.w	fp, [pc, #388]	; daeb8 <_strtod_l+0x2a8>
   dad34:	f04f 0a00 	mov.w	sl, #0
   dad38:	e7e8      	b.n	dad0c <_strtod_l+0xfc>
   dad3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dad3e:	f04f 3aff 	mov.w	sl, #4294967295
   dad42:	e7e3      	b.n	dad0c <_strtod_l+0xfc>
   dad44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dad46:	1c5a      	adds	r2, r3, #1
   dad48:	921d      	str	r2, [sp, #116]	; 0x74
   dad4a:	785b      	ldrb	r3, [r3, #1]
   dad4c:	2b30      	cmp	r3, #48	; 0x30
   dad4e:	d0f9      	beq.n	dad44 <_strtod_l+0x134>
   dad50:	2b00      	cmp	r3, #0
   dad52:	d09f      	beq.n	dac94 <_strtod_l+0x84>
   dad54:	2301      	movs	r3, #1
   dad56:	f04f 0900 	mov.w	r9, #0
   dad5a:	9304      	str	r3, [sp, #16]
   dad5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dad5e:	930a      	str	r3, [sp, #40]	; 0x28
   dad60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dad64:	464f      	mov	r7, r9
   dad66:	220a      	movs	r2, #10
   dad68:	981d      	ldr	r0, [sp, #116]	; 0x74
   dad6a:	7806      	ldrb	r6, [r0, #0]
   dad6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dad70:	b2d9      	uxtb	r1, r3
   dad72:	2909      	cmp	r1, #9
   dad74:	d92a      	bls.n	dadcc <_strtod_l+0x1bc>
   dad76:	9907      	ldr	r1, [sp, #28]
   dad78:	462a      	mov	r2, r5
   dad7a:	f7ff ff07 	bl	dab8c <strncmp>
   dad7e:	b398      	cbz	r0, dade8 <_strtod_l+0x1d8>
   dad80:	2000      	movs	r0, #0
   dad82:	4633      	mov	r3, r6
   dad84:	463d      	mov	r5, r7
   dad86:	9007      	str	r0, [sp, #28]
   dad88:	4602      	mov	r2, r0
   dad8a:	2b65      	cmp	r3, #101	; 0x65
   dad8c:	d001      	beq.n	dad92 <_strtod_l+0x182>
   dad8e:	2b45      	cmp	r3, #69	; 0x45
   dad90:	d118      	bne.n	dadc4 <_strtod_l+0x1b4>
   dad92:	b91d      	cbnz	r5, dad9c <_strtod_l+0x18c>
   dad94:	9b04      	ldr	r3, [sp, #16]
   dad96:	4303      	orrs	r3, r0
   dad98:	d098      	beq.n	daccc <_strtod_l+0xbc>
   dad9a:	2500      	movs	r5, #0
   dad9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dada0:	f108 0301 	add.w	r3, r8, #1
   dada4:	931d      	str	r3, [sp, #116]	; 0x74
   dada6:	f898 3001 	ldrb.w	r3, [r8, #1]
   dadaa:	2b2b      	cmp	r3, #43	; 0x2b
   dadac:	d075      	beq.n	dae9a <_strtod_l+0x28a>
   dadae:	2b2d      	cmp	r3, #45	; 0x2d
   dadb0:	d07b      	beq.n	daeaa <_strtod_l+0x29a>
   dadb2:	f04f 0c00 	mov.w	ip, #0
   dadb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dadba:	2909      	cmp	r1, #9
   dadbc:	f240 8082 	bls.w	daec4 <_strtod_l+0x2b4>
   dadc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dadc4:	2600      	movs	r6, #0
   dadc6:	e09d      	b.n	daf04 <_strtod_l+0x2f4>
   dadc8:	2300      	movs	r3, #0
   dadca:	e7c4      	b.n	dad56 <_strtod_l+0x146>
   dadcc:	2f08      	cmp	r7, #8
   dadce:	bfd8      	it	le
   dadd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dadd2:	f100 0001 	add.w	r0, r0, #1
   dadd6:	bfda      	itte	le
   dadd8:	fb02 3301 	mlale	r3, r2, r1, r3
   daddc:	9309      	strle	r3, [sp, #36]	; 0x24
   dadde:	fb02 3909 	mlagt	r9, r2, r9, r3
   dade2:	3701      	adds	r7, #1
   dade4:	901d      	str	r0, [sp, #116]	; 0x74
   dade6:	e7bf      	b.n	dad68 <_strtod_l+0x158>
   dade8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dadea:	195a      	adds	r2, r3, r5
   dadec:	921d      	str	r2, [sp, #116]	; 0x74
   dadee:	5d5b      	ldrb	r3, [r3, r5]
   dadf0:	2f00      	cmp	r7, #0
   dadf2:	d037      	beq.n	dae64 <_strtod_l+0x254>
   dadf4:	9007      	str	r0, [sp, #28]
   dadf6:	463d      	mov	r5, r7
   dadf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dadfc:	2a09      	cmp	r2, #9
   dadfe:	d912      	bls.n	dae26 <_strtod_l+0x216>
   dae00:	2201      	movs	r2, #1
   dae02:	e7c2      	b.n	dad8a <_strtod_l+0x17a>
   dae04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dae06:	1c5a      	adds	r2, r3, #1
   dae08:	921d      	str	r2, [sp, #116]	; 0x74
   dae0a:	785b      	ldrb	r3, [r3, #1]
   dae0c:	3001      	adds	r0, #1
   dae0e:	2b30      	cmp	r3, #48	; 0x30
   dae10:	d0f8      	beq.n	dae04 <_strtod_l+0x1f4>
   dae12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dae16:	2a08      	cmp	r2, #8
   dae18:	f200 84db 	bhi.w	db7d2 <_strtod_l+0xbc2>
   dae1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dae1e:	9007      	str	r0, [sp, #28]
   dae20:	2000      	movs	r0, #0
   dae22:	920a      	str	r2, [sp, #40]	; 0x28
   dae24:	4605      	mov	r5, r0
   dae26:	3b30      	subs	r3, #48	; 0x30
   dae28:	f100 0201 	add.w	r2, r0, #1
   dae2c:	d014      	beq.n	dae58 <_strtod_l+0x248>
   dae2e:	9907      	ldr	r1, [sp, #28]
   dae30:	4411      	add	r1, r2
   dae32:	9107      	str	r1, [sp, #28]
   dae34:	462a      	mov	r2, r5
   dae36:	eb00 0e05 	add.w	lr, r0, r5
   dae3a:	210a      	movs	r1, #10
   dae3c:	4572      	cmp	r2, lr
   dae3e:	d113      	bne.n	dae68 <_strtod_l+0x258>
   dae40:	182a      	adds	r2, r5, r0
   dae42:	2a08      	cmp	r2, #8
   dae44:	f105 0501 	add.w	r5, r5, #1
   dae48:	4405      	add	r5, r0
   dae4a:	dc1c      	bgt.n	dae86 <_strtod_l+0x276>
   dae4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dae4e:	220a      	movs	r2, #10
   dae50:	fb02 3301 	mla	r3, r2, r1, r3
   dae54:	9309      	str	r3, [sp, #36]	; 0x24
   dae56:	2200      	movs	r2, #0
   dae58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dae5a:	1c59      	adds	r1, r3, #1
   dae5c:	911d      	str	r1, [sp, #116]	; 0x74
   dae5e:	785b      	ldrb	r3, [r3, #1]
   dae60:	4610      	mov	r0, r2
   dae62:	e7c9      	b.n	dadf8 <_strtod_l+0x1e8>
   dae64:	4638      	mov	r0, r7
   dae66:	e7d2      	b.n	dae0e <_strtod_l+0x1fe>
   dae68:	2a08      	cmp	r2, #8
   dae6a:	dc04      	bgt.n	dae76 <_strtod_l+0x266>
   dae6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dae6e:	434e      	muls	r6, r1
   dae70:	9609      	str	r6, [sp, #36]	; 0x24
   dae72:	3201      	adds	r2, #1
   dae74:	e7e2      	b.n	dae3c <_strtod_l+0x22c>
   dae76:	f102 0c01 	add.w	ip, r2, #1
   dae7a:	f1bc 0f10 	cmp.w	ip, #16
   dae7e:	bfd8      	it	le
   dae80:	fb01 f909 	mulle.w	r9, r1, r9
   dae84:	e7f5      	b.n	dae72 <_strtod_l+0x262>
   dae86:	2d10      	cmp	r5, #16
   dae88:	bfdc      	itt	le
   dae8a:	220a      	movle	r2, #10
   dae8c:	fb02 3909 	mlale	r9, r2, r9, r3
   dae90:	e7e1      	b.n	dae56 <_strtod_l+0x246>
   dae92:	2300      	movs	r3, #0
   dae94:	9307      	str	r3, [sp, #28]
   dae96:	2201      	movs	r2, #1
   dae98:	e77c      	b.n	dad94 <_strtod_l+0x184>
   dae9a:	f04f 0c00 	mov.w	ip, #0
   dae9e:	f108 0302 	add.w	r3, r8, #2
   daea2:	931d      	str	r3, [sp, #116]	; 0x74
   daea4:	f898 3002 	ldrb.w	r3, [r8, #2]
   daea8:	e785      	b.n	dadb6 <_strtod_l+0x1a6>
   daeaa:	f04f 0c01 	mov.w	ip, #1
   daeae:	e7f6      	b.n	dae9e <_strtod_l+0x28e>
   daeb0:	000dd964 	.word	0x000dd964
   daeb4:	000dd80c 	.word	0x000dd80c
   daeb8:	7ff00000 	.word	0x7ff00000
   daebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daebe:	1c59      	adds	r1, r3, #1
   daec0:	911d      	str	r1, [sp, #116]	; 0x74
   daec2:	785b      	ldrb	r3, [r3, #1]
   daec4:	2b30      	cmp	r3, #48	; 0x30
   daec6:	d0f9      	beq.n	daebc <_strtod_l+0x2ac>
   daec8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   daecc:	2908      	cmp	r1, #8
   daece:	f63f af79 	bhi.w	dadc4 <_strtod_l+0x1b4>
   daed2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   daed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daed8:	9308      	str	r3, [sp, #32]
   daeda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daedc:	1c59      	adds	r1, r3, #1
   daede:	911d      	str	r1, [sp, #116]	; 0x74
   daee0:	785b      	ldrb	r3, [r3, #1]
   daee2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   daee6:	2e09      	cmp	r6, #9
   daee8:	d937      	bls.n	daf5a <_strtod_l+0x34a>
   daeea:	9e08      	ldr	r6, [sp, #32]
   daeec:	1b89      	subs	r1, r1, r6
   daeee:	2908      	cmp	r1, #8
   daef0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   daef4:	dc02      	bgt.n	daefc <_strtod_l+0x2ec>
   daef6:	4576      	cmp	r6, lr
   daef8:	bfa8      	it	ge
   daefa:	4676      	movge	r6, lr
   daefc:	f1bc 0f00 	cmp.w	ip, #0
   daf00:	d000      	beq.n	daf04 <_strtod_l+0x2f4>
   daf02:	4276      	negs	r6, r6
   daf04:	2d00      	cmp	r5, #0
   daf06:	d14f      	bne.n	dafa8 <_strtod_l+0x398>
   daf08:	9904      	ldr	r1, [sp, #16]
   daf0a:	4301      	orrs	r1, r0
   daf0c:	f47f aec2 	bne.w	dac94 <_strtod_l+0x84>
   daf10:	2a00      	cmp	r2, #0
   daf12:	f47f aedb 	bne.w	daccc <_strtod_l+0xbc>
   daf16:	2b69      	cmp	r3, #105	; 0x69
   daf18:	d027      	beq.n	daf6a <_strtod_l+0x35a>
   daf1a:	dc24      	bgt.n	daf66 <_strtod_l+0x356>
   daf1c:	2b49      	cmp	r3, #73	; 0x49
   daf1e:	d024      	beq.n	daf6a <_strtod_l+0x35a>
   daf20:	2b4e      	cmp	r3, #78	; 0x4e
   daf22:	f47f aed3 	bne.w	daccc <_strtod_l+0xbc>
   daf26:	499e      	ldr	r1, [pc, #632]	; (db1a0 <_strtod_l+0x590>)
   daf28:	a81d      	add	r0, sp, #116	; 0x74
   daf2a:	f000 ff35 	bl	dbd98 <__match>
   daf2e:	2800      	cmp	r0, #0
   daf30:	f43f aecc 	beq.w	daccc <_strtod_l+0xbc>
   daf34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daf36:	781b      	ldrb	r3, [r3, #0]
   daf38:	2b28      	cmp	r3, #40	; 0x28
   daf3a:	d12d      	bne.n	daf98 <_strtod_l+0x388>
   daf3c:	4999      	ldr	r1, [pc, #612]	; (db1a4 <_strtod_l+0x594>)
   daf3e:	aa20      	add	r2, sp, #128	; 0x80
   daf40:	a81d      	add	r0, sp, #116	; 0x74
   daf42:	f000 ff3d 	bl	dbdc0 <__hexnan>
   daf46:	2805      	cmp	r0, #5
   daf48:	d126      	bne.n	daf98 <_strtod_l+0x388>
   daf4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   daf4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   daf50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   daf54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   daf58:	e69c      	b.n	dac94 <_strtod_l+0x84>
   daf5a:	210a      	movs	r1, #10
   daf5c:	fb01 3e0e 	mla	lr, r1, lr, r3
   daf60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   daf64:	e7b9      	b.n	daeda <_strtod_l+0x2ca>
   daf66:	2b6e      	cmp	r3, #110	; 0x6e
   daf68:	e7db      	b.n	daf22 <_strtod_l+0x312>
   daf6a:	498f      	ldr	r1, [pc, #572]	; (db1a8 <_strtod_l+0x598>)
   daf6c:	a81d      	add	r0, sp, #116	; 0x74
   daf6e:	f000 ff13 	bl	dbd98 <__match>
   daf72:	2800      	cmp	r0, #0
   daf74:	f43f aeaa 	beq.w	daccc <_strtod_l+0xbc>
   daf78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daf7a:	498c      	ldr	r1, [pc, #560]	; (db1ac <_strtod_l+0x59c>)
   daf7c:	3b01      	subs	r3, #1
   daf7e:	a81d      	add	r0, sp, #116	; 0x74
   daf80:	931d      	str	r3, [sp, #116]	; 0x74
   daf82:	f000 ff09 	bl	dbd98 <__match>
   daf86:	b910      	cbnz	r0, daf8e <_strtod_l+0x37e>
   daf88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daf8a:	3301      	adds	r3, #1
   daf8c:	931d      	str	r3, [sp, #116]	; 0x74
   daf8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; db1bc <_strtod_l+0x5ac>
   daf92:	f04f 0a00 	mov.w	sl, #0
   daf96:	e67d      	b.n	dac94 <_strtod_l+0x84>
   daf98:	4885      	ldr	r0, [pc, #532]	; (db1b0 <_strtod_l+0x5a0>)
   daf9a:	f7fe fbfd 	bl	d9798 <nan>
   daf9e:	ed8d 0b04 	vstr	d0, [sp, #16]
   dafa2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dafa6:	e675      	b.n	dac94 <_strtod_l+0x84>
   dafa8:	9b07      	ldr	r3, [sp, #28]
   dafaa:	9809      	ldr	r0, [sp, #36]	; 0x24
   dafac:	1af3      	subs	r3, r6, r3
   dafae:	2f00      	cmp	r7, #0
   dafb0:	bf08      	it	eq
   dafb2:	462f      	moveq	r7, r5
   dafb4:	2d10      	cmp	r5, #16
   dafb6:	9308      	str	r3, [sp, #32]
   dafb8:	46a8      	mov	r8, r5
   dafba:	bfa8      	it	ge
   dafbc:	f04f 0810 	movge.w	r8, #16
   dafc0:	f7fe fe5a 	bl	d9c78 <__aeabi_ui2d>
   dafc4:	2d09      	cmp	r5, #9
   dafc6:	4682      	mov	sl, r0
   dafc8:	468b      	mov	fp, r1
   dafca:	dd13      	ble.n	daff4 <_strtod_l+0x3e4>
   dafcc:	4b79      	ldr	r3, [pc, #484]	; (db1b4 <_strtod_l+0x5a4>)
   dafce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dafd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dafd6:	f7fe fec9 	bl	d9d6c <__aeabi_dmul>
   dafda:	4682      	mov	sl, r0
   dafdc:	4648      	mov	r0, r9
   dafde:	468b      	mov	fp, r1
   dafe0:	f7fe fe4a 	bl	d9c78 <__aeabi_ui2d>
   dafe4:	4602      	mov	r2, r0
   dafe6:	460b      	mov	r3, r1
   dafe8:	4650      	mov	r0, sl
   dafea:	4659      	mov	r1, fp
   dafec:	f7fe fd08 	bl	d9a00 <__adddf3>
   daff0:	4682      	mov	sl, r0
   daff2:	468b      	mov	fp, r1
   daff4:	2d0f      	cmp	r5, #15
   daff6:	dc38      	bgt.n	db06a <_strtod_l+0x45a>
   daff8:	9b08      	ldr	r3, [sp, #32]
   daffa:	2b00      	cmp	r3, #0
   daffc:	f43f ae4a 	beq.w	dac94 <_strtod_l+0x84>
   db000:	dd24      	ble.n	db04c <_strtod_l+0x43c>
   db002:	2b16      	cmp	r3, #22
   db004:	dc0b      	bgt.n	db01e <_strtod_l+0x40e>
   db006:	4d6b      	ldr	r5, [pc, #428]	; (db1b4 <_strtod_l+0x5a4>)
   db008:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db00c:	e9d5 0100 	ldrd	r0, r1, [r5]
   db010:	4652      	mov	r2, sl
   db012:	465b      	mov	r3, fp
   db014:	f7fe feaa 	bl	d9d6c <__aeabi_dmul>
   db018:	4682      	mov	sl, r0
   db01a:	468b      	mov	fp, r1
   db01c:	e63a      	b.n	dac94 <_strtod_l+0x84>
   db01e:	9a08      	ldr	r2, [sp, #32]
   db020:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db024:	4293      	cmp	r3, r2
   db026:	db20      	blt.n	db06a <_strtod_l+0x45a>
   db028:	4c62      	ldr	r4, [pc, #392]	; (db1b4 <_strtod_l+0x5a4>)
   db02a:	f1c5 050f 	rsb	r5, r5, #15
   db02e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db032:	4652      	mov	r2, sl
   db034:	465b      	mov	r3, fp
   db036:	e9d1 0100 	ldrd	r0, r1, [r1]
   db03a:	f7fe fe97 	bl	d9d6c <__aeabi_dmul>
   db03e:	9b08      	ldr	r3, [sp, #32]
   db040:	1b5d      	subs	r5, r3, r5
   db042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db046:	e9d4 2300 	ldrd	r2, r3, [r4]
   db04a:	e7e3      	b.n	db014 <_strtod_l+0x404>
   db04c:	9b08      	ldr	r3, [sp, #32]
   db04e:	3316      	adds	r3, #22
   db050:	db0b      	blt.n	db06a <_strtod_l+0x45a>
   db052:	9b07      	ldr	r3, [sp, #28]
   db054:	4a57      	ldr	r2, [pc, #348]	; (db1b4 <_strtod_l+0x5a4>)
   db056:	1b9e      	subs	r6, r3, r6
   db058:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db05c:	e9d6 2300 	ldrd	r2, r3, [r6]
   db060:	4650      	mov	r0, sl
   db062:	4659      	mov	r1, fp
   db064:	f7fe ffac 	bl	d9fc0 <__aeabi_ddiv>
   db068:	e7d6      	b.n	db018 <_strtod_l+0x408>
   db06a:	9b08      	ldr	r3, [sp, #32]
   db06c:	eba5 0808 	sub.w	r8, r5, r8
   db070:	4498      	add	r8, r3
   db072:	f1b8 0f00 	cmp.w	r8, #0
   db076:	dd71      	ble.n	db15c <_strtod_l+0x54c>
   db078:	f018 030f 	ands.w	r3, r8, #15
   db07c:	d00a      	beq.n	db094 <_strtod_l+0x484>
   db07e:	494d      	ldr	r1, [pc, #308]	; (db1b4 <_strtod_l+0x5a4>)
   db080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db084:	4652      	mov	r2, sl
   db086:	465b      	mov	r3, fp
   db088:	e9d1 0100 	ldrd	r0, r1, [r1]
   db08c:	f7fe fe6e 	bl	d9d6c <__aeabi_dmul>
   db090:	4682      	mov	sl, r0
   db092:	468b      	mov	fp, r1
   db094:	f038 080f 	bics.w	r8, r8, #15
   db098:	d04d      	beq.n	db136 <_strtod_l+0x526>
   db09a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db09e:	dd22      	ble.n	db0e6 <_strtod_l+0x4d6>
   db0a0:	2500      	movs	r5, #0
   db0a2:	462e      	mov	r6, r5
   db0a4:	9509      	str	r5, [sp, #36]	; 0x24
   db0a6:	9507      	str	r5, [sp, #28]
   db0a8:	2322      	movs	r3, #34	; 0x22
   db0aa:	f8df b110 	ldr.w	fp, [pc, #272]	; db1bc <_strtod_l+0x5ac>
   db0ae:	6023      	str	r3, [r4, #0]
   db0b0:	f04f 0a00 	mov.w	sl, #0
   db0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db0b6:	2b00      	cmp	r3, #0
   db0b8:	f43f adec 	beq.w	dac94 <_strtod_l+0x84>
   db0bc:	991e      	ldr	r1, [sp, #120]	; 0x78
   db0be:	4620      	mov	r0, r4
   db0c0:	f000 ff60 	bl	dbf84 <_Bfree>
   db0c4:	9907      	ldr	r1, [sp, #28]
   db0c6:	4620      	mov	r0, r4
   db0c8:	f000 ff5c 	bl	dbf84 <_Bfree>
   db0cc:	4631      	mov	r1, r6
   db0ce:	4620      	mov	r0, r4
   db0d0:	f000 ff58 	bl	dbf84 <_Bfree>
   db0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   db0d6:	4620      	mov	r0, r4
   db0d8:	f000 ff54 	bl	dbf84 <_Bfree>
   db0dc:	4629      	mov	r1, r5
   db0de:	4620      	mov	r0, r4
   db0e0:	f000 ff50 	bl	dbf84 <_Bfree>
   db0e4:	e5d6      	b.n	dac94 <_strtod_l+0x84>
   db0e6:	2300      	movs	r3, #0
   db0e8:	ea4f 1828 	mov.w	r8, r8, asr #4
   db0ec:	4650      	mov	r0, sl
   db0ee:	4659      	mov	r1, fp
   db0f0:	4699      	mov	r9, r3
   db0f2:	f1b8 0f01 	cmp.w	r8, #1
   db0f6:	dc21      	bgt.n	db13c <_strtod_l+0x52c>
   db0f8:	b10b      	cbz	r3, db0fe <_strtod_l+0x4ee>
   db0fa:	4682      	mov	sl, r0
   db0fc:	468b      	mov	fp, r1
   db0fe:	4b2e      	ldr	r3, [pc, #184]	; (db1b8 <_strtod_l+0x5a8>)
   db100:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db104:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db108:	4652      	mov	r2, sl
   db10a:	465b      	mov	r3, fp
   db10c:	e9d9 0100 	ldrd	r0, r1, [r9]
   db110:	f7fe fe2c 	bl	d9d6c <__aeabi_dmul>
   db114:	4b29      	ldr	r3, [pc, #164]	; (db1bc <_strtod_l+0x5ac>)
   db116:	460a      	mov	r2, r1
   db118:	400b      	ands	r3, r1
   db11a:	4929      	ldr	r1, [pc, #164]	; (db1c0 <_strtod_l+0x5b0>)
   db11c:	428b      	cmp	r3, r1
   db11e:	4682      	mov	sl, r0
   db120:	d8be      	bhi.n	db0a0 <_strtod_l+0x490>
   db122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db126:	428b      	cmp	r3, r1
   db128:	bf86      	itte	hi
   db12a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db1c4 <_strtod_l+0x5b4>
   db12e:	f04f 3aff 	movhi.w	sl, #4294967295
   db132:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db136:	2300      	movs	r3, #0
   db138:	9304      	str	r3, [sp, #16]
   db13a:	e081      	b.n	db240 <_strtod_l+0x630>
   db13c:	f018 0f01 	tst.w	r8, #1
   db140:	d007      	beq.n	db152 <_strtod_l+0x542>
   db142:	4b1d      	ldr	r3, [pc, #116]	; (db1b8 <_strtod_l+0x5a8>)
   db144:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db148:	e9d3 2300 	ldrd	r2, r3, [r3]
   db14c:	f7fe fe0e 	bl	d9d6c <__aeabi_dmul>
   db150:	2301      	movs	r3, #1
   db152:	f109 0901 	add.w	r9, r9, #1
   db156:	ea4f 0868 	mov.w	r8, r8, asr #1
   db15a:	e7ca      	b.n	db0f2 <_strtod_l+0x4e2>
   db15c:	d0eb      	beq.n	db136 <_strtod_l+0x526>
   db15e:	f1c8 0800 	rsb	r8, r8, #0
   db162:	f018 020f 	ands.w	r2, r8, #15
   db166:	d00a      	beq.n	db17e <_strtod_l+0x56e>
   db168:	4b12      	ldr	r3, [pc, #72]	; (db1b4 <_strtod_l+0x5a4>)
   db16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db16e:	4650      	mov	r0, sl
   db170:	4659      	mov	r1, fp
   db172:	e9d3 2300 	ldrd	r2, r3, [r3]
   db176:	f7fe ff23 	bl	d9fc0 <__aeabi_ddiv>
   db17a:	4682      	mov	sl, r0
   db17c:	468b      	mov	fp, r1
   db17e:	ea5f 1828 	movs.w	r8, r8, asr #4
   db182:	d0d8      	beq.n	db136 <_strtod_l+0x526>
   db184:	f1b8 0f1f 	cmp.w	r8, #31
   db188:	dd1e      	ble.n	db1c8 <_strtod_l+0x5b8>
   db18a:	2500      	movs	r5, #0
   db18c:	462e      	mov	r6, r5
   db18e:	9509      	str	r5, [sp, #36]	; 0x24
   db190:	9507      	str	r5, [sp, #28]
   db192:	2322      	movs	r3, #34	; 0x22
   db194:	f04f 0a00 	mov.w	sl, #0
   db198:	f04f 0b00 	mov.w	fp, #0
   db19c:	6023      	str	r3, [r4, #0]
   db19e:	e789      	b.n	db0b4 <_strtod_l+0x4a4>
   db1a0:	000dcbaa 	.word	0x000dcbaa
   db1a4:	000dd820 	.word	0x000dd820
   db1a8:	000dd801 	.word	0x000dd801
   db1ac:	000dd804 	.word	0x000dd804
   db1b0:	000dc981 	.word	0x000dc981
   db1b4:	000dd9a0 	.word	0x000dd9a0
   db1b8:	000dd978 	.word	0x000dd978
   db1bc:	7ff00000 	.word	0x7ff00000
   db1c0:	7ca00000 	.word	0x7ca00000
   db1c4:	7fefffff 	.word	0x7fefffff
   db1c8:	f018 0310 	ands.w	r3, r8, #16
   db1cc:	bf18      	it	ne
   db1ce:	236a      	movne	r3, #106	; 0x6a
   db1d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; db588 <_strtod_l+0x978>
   db1d4:	9304      	str	r3, [sp, #16]
   db1d6:	4650      	mov	r0, sl
   db1d8:	4659      	mov	r1, fp
   db1da:	2300      	movs	r3, #0
   db1dc:	f018 0f01 	tst.w	r8, #1
   db1e0:	d004      	beq.n	db1ec <_strtod_l+0x5dc>
   db1e2:	e9d9 2300 	ldrd	r2, r3, [r9]
   db1e6:	f7fe fdc1 	bl	d9d6c <__aeabi_dmul>
   db1ea:	2301      	movs	r3, #1
   db1ec:	ea5f 0868 	movs.w	r8, r8, asr #1
   db1f0:	f109 0908 	add.w	r9, r9, #8
   db1f4:	d1f2      	bne.n	db1dc <_strtod_l+0x5cc>
   db1f6:	b10b      	cbz	r3, db1fc <_strtod_l+0x5ec>
   db1f8:	4682      	mov	sl, r0
   db1fa:	468b      	mov	fp, r1
   db1fc:	9b04      	ldr	r3, [sp, #16]
   db1fe:	b1bb      	cbz	r3, db230 <_strtod_l+0x620>
   db200:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db208:	2b00      	cmp	r3, #0
   db20a:	4659      	mov	r1, fp
   db20c:	dd10      	ble.n	db230 <_strtod_l+0x620>
   db20e:	2b1f      	cmp	r3, #31
   db210:	f340 8128 	ble.w	db464 <_strtod_l+0x854>
   db214:	2b34      	cmp	r3, #52	; 0x34
   db216:	bfde      	ittt	le
   db218:	3b20      	suble	r3, #32
   db21a:	f04f 32ff 	movle.w	r2, #4294967295
   db21e:	fa02 f303 	lslle.w	r3, r2, r3
   db222:	f04f 0a00 	mov.w	sl, #0
   db226:	bfcc      	ite	gt
   db228:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db22c:	ea03 0b01 	andle.w	fp, r3, r1
   db230:	2200      	movs	r2, #0
   db232:	2300      	movs	r3, #0
   db234:	4650      	mov	r0, sl
   db236:	4659      	mov	r1, fp
   db238:	f7ff f800 	bl	da23c <__aeabi_dcmpeq>
   db23c:	2800      	cmp	r0, #0
   db23e:	d1a4      	bne.n	db18a <_strtod_l+0x57a>
   db240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db242:	9300      	str	r3, [sp, #0]
   db244:	990a      	ldr	r1, [sp, #40]	; 0x28
   db246:	462b      	mov	r3, r5
   db248:	463a      	mov	r2, r7
   db24a:	4620      	mov	r0, r4
   db24c:	f000 feef 	bl	dc02e <__s2b>
   db250:	9009      	str	r0, [sp, #36]	; 0x24
   db252:	2800      	cmp	r0, #0
   db254:	f43f af24 	beq.w	db0a0 <_strtod_l+0x490>
   db258:	9b07      	ldr	r3, [sp, #28]
   db25a:	1b9e      	subs	r6, r3, r6
   db25c:	9b08      	ldr	r3, [sp, #32]
   db25e:	2b00      	cmp	r3, #0
   db260:	bfb4      	ite	lt
   db262:	4633      	movlt	r3, r6
   db264:	2300      	movge	r3, #0
   db266:	9310      	str	r3, [sp, #64]	; 0x40
   db268:	9b08      	ldr	r3, [sp, #32]
   db26a:	2500      	movs	r5, #0
   db26c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db270:	9318      	str	r3, [sp, #96]	; 0x60
   db272:	462e      	mov	r6, r5
   db274:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db276:	4620      	mov	r0, r4
   db278:	6859      	ldr	r1, [r3, #4]
   db27a:	f000 fe4f 	bl	dbf1c <_Balloc>
   db27e:	9007      	str	r0, [sp, #28]
   db280:	2800      	cmp	r0, #0
   db282:	f43f af11 	beq.w	db0a8 <_strtod_l+0x498>
   db286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db288:	691a      	ldr	r2, [r3, #16]
   db28a:	3202      	adds	r2, #2
   db28c:	f103 010c 	add.w	r1, r3, #12
   db290:	0092      	lsls	r2, r2, #2
   db292:	300c      	adds	r0, #12
   db294:	f7ff fbea 	bl	daa6c <memcpy>
   db298:	ec4b ab10 	vmov	d0, sl, fp
   db29c:	aa20      	add	r2, sp, #128	; 0x80
   db29e:	a91f      	add	r1, sp, #124	; 0x7c
   db2a0:	4620      	mov	r0, r4
   db2a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db2a6:	f001 f9b1 	bl	dc60c <__d2b>
   db2aa:	901e      	str	r0, [sp, #120]	; 0x78
   db2ac:	2800      	cmp	r0, #0
   db2ae:	f43f aefb 	beq.w	db0a8 <_strtod_l+0x498>
   db2b2:	2101      	movs	r1, #1
   db2b4:	4620      	mov	r0, r4
   db2b6:	f000 ff48 	bl	dc14a <__i2b>
   db2ba:	4606      	mov	r6, r0
   db2bc:	2800      	cmp	r0, #0
   db2be:	f43f aef3 	beq.w	db0a8 <_strtod_l+0x498>
   db2c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db2c4:	9904      	ldr	r1, [sp, #16]
   db2c6:	2b00      	cmp	r3, #0
   db2c8:	bfab      	itete	ge
   db2ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db2cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db2ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db2d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db2d4:	bfac      	ite	ge
   db2d6:	eb03 0902 	addge.w	r9, r3, r2
   db2da:	1ad7      	sublt	r7, r2, r3
   db2dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db2de:	eba3 0801 	sub.w	r8, r3, r1
   db2e2:	4490      	add	r8, r2
   db2e4:	4ba3      	ldr	r3, [pc, #652]	; (db574 <_strtod_l+0x964>)
   db2e6:	f108 38ff 	add.w	r8, r8, #4294967295
   db2ea:	4598      	cmp	r8, r3
   db2ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db2f0:	f280 80cc 	bge.w	db48c <_strtod_l+0x87c>
   db2f4:	eba3 0308 	sub.w	r3, r3, r8
   db2f8:	2b1f      	cmp	r3, #31
   db2fa:	eba2 0203 	sub.w	r2, r2, r3
   db2fe:	f04f 0101 	mov.w	r1, #1
   db302:	f300 80b6 	bgt.w	db472 <_strtod_l+0x862>
   db306:	fa01 f303 	lsl.w	r3, r1, r3
   db30a:	9311      	str	r3, [sp, #68]	; 0x44
   db30c:	2300      	movs	r3, #0
   db30e:	930c      	str	r3, [sp, #48]	; 0x30
   db310:	eb09 0802 	add.w	r8, r9, r2
   db314:	9b04      	ldr	r3, [sp, #16]
   db316:	45c1      	cmp	r9, r8
   db318:	4417      	add	r7, r2
   db31a:	441f      	add	r7, r3
   db31c:	464b      	mov	r3, r9
   db31e:	bfa8      	it	ge
   db320:	4643      	movge	r3, r8
   db322:	42bb      	cmp	r3, r7
   db324:	bfa8      	it	ge
   db326:	463b      	movge	r3, r7
   db328:	2b00      	cmp	r3, #0
   db32a:	bfc2      	ittt	gt
   db32c:	eba8 0803 	subgt.w	r8, r8, r3
   db330:	1aff      	subgt	r7, r7, r3
   db332:	eba9 0903 	subgt.w	r9, r9, r3
   db336:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db338:	2b00      	cmp	r3, #0
   db33a:	dd17      	ble.n	db36c <_strtod_l+0x75c>
   db33c:	4631      	mov	r1, r6
   db33e:	461a      	mov	r2, r3
   db340:	4620      	mov	r0, r4
   db342:	f000 ffa7 	bl	dc294 <__pow5mult>
   db346:	4606      	mov	r6, r0
   db348:	2800      	cmp	r0, #0
   db34a:	f43f aead 	beq.w	db0a8 <_strtod_l+0x498>
   db34e:	4601      	mov	r1, r0
   db350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db352:	4620      	mov	r0, r4
   db354:	f000 ff02 	bl	dc15c <__multiply>
   db358:	900f      	str	r0, [sp, #60]	; 0x3c
   db35a:	2800      	cmp	r0, #0
   db35c:	f43f aea4 	beq.w	db0a8 <_strtod_l+0x498>
   db360:	991e      	ldr	r1, [sp, #120]	; 0x78
   db362:	4620      	mov	r0, r4
   db364:	f000 fe0e 	bl	dbf84 <_Bfree>
   db368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db36a:	931e      	str	r3, [sp, #120]	; 0x78
   db36c:	f1b8 0f00 	cmp.w	r8, #0
   db370:	f300 8091 	bgt.w	db496 <_strtod_l+0x886>
   db374:	9b08      	ldr	r3, [sp, #32]
   db376:	2b00      	cmp	r3, #0
   db378:	dd08      	ble.n	db38c <_strtod_l+0x77c>
   db37a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db37c:	9907      	ldr	r1, [sp, #28]
   db37e:	4620      	mov	r0, r4
   db380:	f000 ff88 	bl	dc294 <__pow5mult>
   db384:	9007      	str	r0, [sp, #28]
   db386:	2800      	cmp	r0, #0
   db388:	f43f ae8e 	beq.w	db0a8 <_strtod_l+0x498>
   db38c:	2f00      	cmp	r7, #0
   db38e:	dd08      	ble.n	db3a2 <_strtod_l+0x792>
   db390:	9907      	ldr	r1, [sp, #28]
   db392:	463a      	mov	r2, r7
   db394:	4620      	mov	r0, r4
   db396:	f000 ffcb 	bl	dc330 <__lshift>
   db39a:	9007      	str	r0, [sp, #28]
   db39c:	2800      	cmp	r0, #0
   db39e:	f43f ae83 	beq.w	db0a8 <_strtod_l+0x498>
   db3a2:	f1b9 0f00 	cmp.w	r9, #0
   db3a6:	dd08      	ble.n	db3ba <_strtod_l+0x7aa>
   db3a8:	4631      	mov	r1, r6
   db3aa:	464a      	mov	r2, r9
   db3ac:	4620      	mov	r0, r4
   db3ae:	f000 ffbf 	bl	dc330 <__lshift>
   db3b2:	4606      	mov	r6, r0
   db3b4:	2800      	cmp	r0, #0
   db3b6:	f43f ae77 	beq.w	db0a8 <_strtod_l+0x498>
   db3ba:	9a07      	ldr	r2, [sp, #28]
   db3bc:	991e      	ldr	r1, [sp, #120]	; 0x78
   db3be:	4620      	mov	r0, r4
   db3c0:	f001 f831 	bl	dc426 <__mdiff>
   db3c4:	4605      	mov	r5, r0
   db3c6:	2800      	cmp	r0, #0
   db3c8:	f43f ae6e 	beq.w	db0a8 <_strtod_l+0x498>
   db3cc:	68c3      	ldr	r3, [r0, #12]
   db3ce:	930f      	str	r3, [sp, #60]	; 0x3c
   db3d0:	2300      	movs	r3, #0
   db3d2:	60c3      	str	r3, [r0, #12]
   db3d4:	4631      	mov	r1, r6
   db3d6:	f001 f80a 	bl	dc3ee <__mcmp>
   db3da:	2800      	cmp	r0, #0
   db3dc:	da65      	bge.n	db4aa <_strtod_l+0x89a>
   db3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db3e0:	ea53 030a 	orrs.w	r3, r3, sl
   db3e4:	f040 8087 	bne.w	db4f6 <_strtod_l+0x8e6>
   db3e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db3ec:	2b00      	cmp	r3, #0
   db3ee:	f040 8082 	bne.w	db4f6 <_strtod_l+0x8e6>
   db3f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db3f6:	0d1b      	lsrs	r3, r3, #20
   db3f8:	051b      	lsls	r3, r3, #20
   db3fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db3fe:	d97a      	bls.n	db4f6 <_strtod_l+0x8e6>
   db400:	696b      	ldr	r3, [r5, #20]
   db402:	b913      	cbnz	r3, db40a <_strtod_l+0x7fa>
   db404:	692b      	ldr	r3, [r5, #16]
   db406:	2b01      	cmp	r3, #1
   db408:	dd75      	ble.n	db4f6 <_strtod_l+0x8e6>
   db40a:	4629      	mov	r1, r5
   db40c:	2201      	movs	r2, #1
   db40e:	4620      	mov	r0, r4
   db410:	f000 ff8e 	bl	dc330 <__lshift>
   db414:	4631      	mov	r1, r6
   db416:	4605      	mov	r5, r0
   db418:	f000 ffe9 	bl	dc3ee <__mcmp>
   db41c:	2800      	cmp	r0, #0
   db41e:	dd6a      	ble.n	db4f6 <_strtod_l+0x8e6>
   db420:	9904      	ldr	r1, [sp, #16]
   db422:	4a55      	ldr	r2, [pc, #340]	; (db578 <_strtod_l+0x968>)
   db424:	465b      	mov	r3, fp
   db426:	2900      	cmp	r1, #0
   db428:	f000 8085 	beq.w	db536 <_strtod_l+0x926>
   db42c:	ea02 010b 	and.w	r1, r2, fp
   db430:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db434:	dc7f      	bgt.n	db536 <_strtod_l+0x926>
   db436:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db43a:	f77f aeaa 	ble.w	db192 <_strtod_l+0x582>
   db43e:	4a4f      	ldr	r2, [pc, #316]	; (db57c <_strtod_l+0x96c>)
   db440:	2300      	movs	r3, #0
   db442:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db446:	4650      	mov	r0, sl
   db448:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db44c:	4659      	mov	r1, fp
   db44e:	f7fe fc8d 	bl	d9d6c <__aeabi_dmul>
   db452:	460b      	mov	r3, r1
   db454:	4303      	orrs	r3, r0
   db456:	bf08      	it	eq
   db458:	2322      	moveq	r3, #34	; 0x22
   db45a:	4682      	mov	sl, r0
   db45c:	468b      	mov	fp, r1
   db45e:	bf08      	it	eq
   db460:	6023      	streq	r3, [r4, #0]
   db462:	e62b      	b.n	db0bc <_strtod_l+0x4ac>
   db464:	f04f 32ff 	mov.w	r2, #4294967295
   db468:	fa02 f303 	lsl.w	r3, r2, r3
   db46c:	ea03 0a0a 	and.w	sl, r3, sl
   db470:	e6de      	b.n	db230 <_strtod_l+0x620>
   db472:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db476:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db47a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db47e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db482:	fa01 f308 	lsl.w	r3, r1, r8
   db486:	930c      	str	r3, [sp, #48]	; 0x30
   db488:	9111      	str	r1, [sp, #68]	; 0x44
   db48a:	e741      	b.n	db310 <_strtod_l+0x700>
   db48c:	2300      	movs	r3, #0
   db48e:	930c      	str	r3, [sp, #48]	; 0x30
   db490:	2301      	movs	r3, #1
   db492:	9311      	str	r3, [sp, #68]	; 0x44
   db494:	e73c      	b.n	db310 <_strtod_l+0x700>
   db496:	991e      	ldr	r1, [sp, #120]	; 0x78
   db498:	4642      	mov	r2, r8
   db49a:	4620      	mov	r0, r4
   db49c:	f000 ff48 	bl	dc330 <__lshift>
   db4a0:	901e      	str	r0, [sp, #120]	; 0x78
   db4a2:	2800      	cmp	r0, #0
   db4a4:	f47f af66 	bne.w	db374 <_strtod_l+0x764>
   db4a8:	e5fe      	b.n	db0a8 <_strtod_l+0x498>
   db4aa:	465f      	mov	r7, fp
   db4ac:	d16e      	bne.n	db58c <_strtod_l+0x97c>
   db4ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db4b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db4b4:	b342      	cbz	r2, db508 <_strtod_l+0x8f8>
   db4b6:	4a32      	ldr	r2, [pc, #200]	; (db580 <_strtod_l+0x970>)
   db4b8:	4293      	cmp	r3, r2
   db4ba:	d128      	bne.n	db50e <_strtod_l+0x8fe>
   db4bc:	9b04      	ldr	r3, [sp, #16]
   db4be:	4650      	mov	r0, sl
   db4c0:	b1eb      	cbz	r3, db4fe <_strtod_l+0x8ee>
   db4c2:	4a2d      	ldr	r2, [pc, #180]	; (db578 <_strtod_l+0x968>)
   db4c4:	403a      	ands	r2, r7
   db4c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db4ca:	f04f 31ff 	mov.w	r1, #4294967295
   db4ce:	d819      	bhi.n	db504 <_strtod_l+0x8f4>
   db4d0:	0d12      	lsrs	r2, r2, #20
   db4d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db4d6:	fa01 f303 	lsl.w	r3, r1, r3
   db4da:	4298      	cmp	r0, r3
   db4dc:	d117      	bne.n	db50e <_strtod_l+0x8fe>
   db4de:	4b29      	ldr	r3, [pc, #164]	; (db584 <_strtod_l+0x974>)
   db4e0:	429f      	cmp	r7, r3
   db4e2:	d102      	bne.n	db4ea <_strtod_l+0x8da>
   db4e4:	3001      	adds	r0, #1
   db4e6:	f43f addf 	beq.w	db0a8 <_strtod_l+0x498>
   db4ea:	4b23      	ldr	r3, [pc, #140]	; (db578 <_strtod_l+0x968>)
   db4ec:	403b      	ands	r3, r7
   db4ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db4f2:	f04f 0a00 	mov.w	sl, #0
   db4f6:	9b04      	ldr	r3, [sp, #16]
   db4f8:	2b00      	cmp	r3, #0
   db4fa:	d1a0      	bne.n	db43e <_strtod_l+0x82e>
   db4fc:	e5de      	b.n	db0bc <_strtod_l+0x4ac>
   db4fe:	f04f 33ff 	mov.w	r3, #4294967295
   db502:	e7ea      	b.n	db4da <_strtod_l+0x8ca>
   db504:	460b      	mov	r3, r1
   db506:	e7e8      	b.n	db4da <_strtod_l+0x8ca>
   db508:	ea53 030a 	orrs.w	r3, r3, sl
   db50c:	d088      	beq.n	db420 <_strtod_l+0x810>
   db50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db510:	b1db      	cbz	r3, db54a <_strtod_l+0x93a>
   db512:	423b      	tst	r3, r7
   db514:	d0ef      	beq.n	db4f6 <_strtod_l+0x8e6>
   db516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db518:	9a04      	ldr	r2, [sp, #16]
   db51a:	4650      	mov	r0, sl
   db51c:	4659      	mov	r1, fp
   db51e:	b1c3      	cbz	r3, db552 <_strtod_l+0x942>
   db520:	f7ff fb59 	bl	dabd6 <sulp>
   db524:	4602      	mov	r2, r0
   db526:	460b      	mov	r3, r1
   db528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db52c:	f7fe fa68 	bl	d9a00 <__adddf3>
   db530:	4682      	mov	sl, r0
   db532:	468b      	mov	fp, r1
   db534:	e7df      	b.n	db4f6 <_strtod_l+0x8e6>
   db536:	4013      	ands	r3, r2
   db538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db53c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db540:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db544:	f04f 3aff 	mov.w	sl, #4294967295
   db548:	e7d5      	b.n	db4f6 <_strtod_l+0x8e6>
   db54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db54c:	ea13 0f0a 	tst.w	r3, sl
   db550:	e7e0      	b.n	db514 <_strtod_l+0x904>
   db552:	f7ff fb40 	bl	dabd6 <sulp>
   db556:	4602      	mov	r2, r0
   db558:	460b      	mov	r3, r1
   db55a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db55e:	f7fe fa4d 	bl	d99fc <__aeabi_dsub>
   db562:	2200      	movs	r2, #0
   db564:	2300      	movs	r3, #0
   db566:	4682      	mov	sl, r0
   db568:	468b      	mov	fp, r1
   db56a:	f7fe fe67 	bl	da23c <__aeabi_dcmpeq>
   db56e:	2800      	cmp	r0, #0
   db570:	d0c1      	beq.n	db4f6 <_strtod_l+0x8e6>
   db572:	e60e      	b.n	db192 <_strtod_l+0x582>
   db574:	fffffc02 	.word	0xfffffc02
   db578:	7ff00000 	.word	0x7ff00000
   db57c:	39500000 	.word	0x39500000
   db580:	000fffff 	.word	0x000fffff
   db584:	7fefffff 	.word	0x7fefffff
   db588:	000dd838 	.word	0x000dd838
   db58c:	4631      	mov	r1, r6
   db58e:	4628      	mov	r0, r5
   db590:	f001 f88c 	bl	dc6ac <__ratio>
   db594:	ec59 8b10 	vmov	r8, r9, d0
   db598:	ee10 0a10 	vmov	r0, s0
   db59c:	2200      	movs	r2, #0
   db59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db5a2:	4649      	mov	r1, r9
   db5a4:	f7fe fe5e 	bl	da264 <__aeabi_dcmple>
   db5a8:	2800      	cmp	r0, #0
   db5aa:	d07c      	beq.n	db6a6 <_strtod_l+0xa96>
   db5ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db5ae:	2b00      	cmp	r3, #0
   db5b0:	d04c      	beq.n	db64c <_strtod_l+0xa3c>
   db5b2:	4b95      	ldr	r3, [pc, #596]	; (db808 <_strtod_l+0xbf8>)
   db5b4:	2200      	movs	r2, #0
   db5b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db5ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; db808 <_strtod_l+0xbf8>
   db5be:	f04f 0800 	mov.w	r8, #0
   db5c2:	4b92      	ldr	r3, [pc, #584]	; (db80c <_strtod_l+0xbfc>)
   db5c4:	403b      	ands	r3, r7
   db5c6:	9311      	str	r3, [sp, #68]	; 0x44
   db5c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db5ca:	4b91      	ldr	r3, [pc, #580]	; (db810 <_strtod_l+0xc00>)
   db5cc:	429a      	cmp	r2, r3
   db5ce:	f040 80b2 	bne.w	db736 <_strtod_l+0xb26>
   db5d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db5d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db5da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db5de:	ec4b ab10 	vmov	d0, sl, fp
   db5e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db5e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db5ea:	f000 ff93 	bl	dc514 <__ulp>
   db5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db5f2:	ec53 2b10 	vmov	r2, r3, d0
   db5f6:	f7fe fbb9 	bl	d9d6c <__aeabi_dmul>
   db5fa:	4652      	mov	r2, sl
   db5fc:	465b      	mov	r3, fp
   db5fe:	f7fe f9ff 	bl	d9a00 <__adddf3>
   db602:	460b      	mov	r3, r1
   db604:	4981      	ldr	r1, [pc, #516]	; (db80c <_strtod_l+0xbfc>)
   db606:	4a83      	ldr	r2, [pc, #524]	; (db814 <_strtod_l+0xc04>)
   db608:	4019      	ands	r1, r3
   db60a:	4291      	cmp	r1, r2
   db60c:	4682      	mov	sl, r0
   db60e:	d95e      	bls.n	db6ce <_strtod_l+0xabe>
   db610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db612:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db616:	4293      	cmp	r3, r2
   db618:	d103      	bne.n	db622 <_strtod_l+0xa12>
   db61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db61c:	3301      	adds	r3, #1
   db61e:	f43f ad43 	beq.w	db0a8 <_strtod_l+0x498>
   db622:	f8df b1fc 	ldr.w	fp, [pc, #508]	; db820 <_strtod_l+0xc10>
   db626:	f04f 3aff 	mov.w	sl, #4294967295
   db62a:	991e      	ldr	r1, [sp, #120]	; 0x78
   db62c:	4620      	mov	r0, r4
   db62e:	f000 fca9 	bl	dbf84 <_Bfree>
   db632:	9907      	ldr	r1, [sp, #28]
   db634:	4620      	mov	r0, r4
   db636:	f000 fca5 	bl	dbf84 <_Bfree>
   db63a:	4631      	mov	r1, r6
   db63c:	4620      	mov	r0, r4
   db63e:	f000 fca1 	bl	dbf84 <_Bfree>
   db642:	4629      	mov	r1, r5
   db644:	4620      	mov	r0, r4
   db646:	f000 fc9d 	bl	dbf84 <_Bfree>
   db64a:	e613      	b.n	db274 <_strtod_l+0x664>
   db64c:	f1ba 0f00 	cmp.w	sl, #0
   db650:	d11b      	bne.n	db68a <_strtod_l+0xa7a>
   db652:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db656:	b9f3      	cbnz	r3, db696 <_strtod_l+0xa86>
   db658:	4b6b      	ldr	r3, [pc, #428]	; (db808 <_strtod_l+0xbf8>)
   db65a:	2200      	movs	r2, #0
   db65c:	4640      	mov	r0, r8
   db65e:	4649      	mov	r1, r9
   db660:	f7fe fdf6 	bl	da250 <__aeabi_dcmplt>
   db664:	b9d0      	cbnz	r0, db69c <_strtod_l+0xa8c>
   db666:	4640      	mov	r0, r8
   db668:	4649      	mov	r1, r9
   db66a:	4b6b      	ldr	r3, [pc, #428]	; (db818 <_strtod_l+0xc08>)
   db66c:	2200      	movs	r2, #0
   db66e:	f7fe fb7d 	bl	d9d6c <__aeabi_dmul>
   db672:	4680      	mov	r8, r0
   db674:	4689      	mov	r9, r1
   db676:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db67a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db67e:	931b      	str	r3, [sp, #108]	; 0x6c
   db680:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db684:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db688:	e79b      	b.n	db5c2 <_strtod_l+0x9b2>
   db68a:	f1ba 0f01 	cmp.w	sl, #1
   db68e:	d102      	bne.n	db696 <_strtod_l+0xa86>
   db690:	2f00      	cmp	r7, #0
   db692:	f43f ad7e 	beq.w	db192 <_strtod_l+0x582>
   db696:	4b61      	ldr	r3, [pc, #388]	; (db81c <_strtod_l+0xc0c>)
   db698:	2200      	movs	r2, #0
   db69a:	e78c      	b.n	db5b6 <_strtod_l+0x9a6>
   db69c:	f8df 9178 	ldr.w	r9, [pc, #376]	; db818 <_strtod_l+0xc08>
   db6a0:	f04f 0800 	mov.w	r8, #0
   db6a4:	e7e7      	b.n	db676 <_strtod_l+0xa66>
   db6a6:	4b5c      	ldr	r3, [pc, #368]	; (db818 <_strtod_l+0xc08>)
   db6a8:	4640      	mov	r0, r8
   db6aa:	4649      	mov	r1, r9
   db6ac:	2200      	movs	r2, #0
   db6ae:	f7fe fb5d 	bl	d9d6c <__aeabi_dmul>
   db6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db6b4:	4680      	mov	r8, r0
   db6b6:	4689      	mov	r9, r1
   db6b8:	b933      	cbnz	r3, db6c8 <_strtod_l+0xab8>
   db6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db6be:	9012      	str	r0, [sp, #72]	; 0x48
   db6c0:	9313      	str	r3, [sp, #76]	; 0x4c
   db6c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db6c6:	e7dd      	b.n	db684 <_strtod_l+0xa74>
   db6c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db6cc:	e7f9      	b.n	db6c2 <_strtod_l+0xab2>
   db6ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db6d2:	9b04      	ldr	r3, [sp, #16]
   db6d4:	2b00      	cmp	r3, #0
   db6d6:	d1a8      	bne.n	db62a <_strtod_l+0xa1a>
   db6d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db6dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db6de:	0d1b      	lsrs	r3, r3, #20
   db6e0:	051b      	lsls	r3, r3, #20
   db6e2:	429a      	cmp	r2, r3
   db6e4:	d1a1      	bne.n	db62a <_strtod_l+0xa1a>
   db6e6:	4640      	mov	r0, r8
   db6e8:	4649      	mov	r1, r9
   db6ea:	f001 f873 	bl	dc7d4 <__aeabi_d2lz>
   db6ee:	f7fe fb0f 	bl	d9d10 <__aeabi_l2d>
   db6f2:	4602      	mov	r2, r0
   db6f4:	460b      	mov	r3, r1
   db6f6:	4640      	mov	r0, r8
   db6f8:	4649      	mov	r1, r9
   db6fa:	f7fe f97f 	bl	d99fc <__aeabi_dsub>
   db6fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db700:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db704:	ea43 030a 	orr.w	r3, r3, sl
   db708:	4313      	orrs	r3, r2
   db70a:	4680      	mov	r8, r0
   db70c:	4689      	mov	r9, r1
   db70e:	d053      	beq.n	db7b8 <_strtod_l+0xba8>
   db710:	a335      	add	r3, pc, #212	; (adr r3, db7e8 <_strtod_l+0xbd8>)
   db712:	e9d3 2300 	ldrd	r2, r3, [r3]
   db716:	f7fe fd9b 	bl	da250 <__aeabi_dcmplt>
   db71a:	2800      	cmp	r0, #0
   db71c:	f47f acce 	bne.w	db0bc <_strtod_l+0x4ac>
   db720:	a333      	add	r3, pc, #204	; (adr r3, db7f0 <_strtod_l+0xbe0>)
   db722:	e9d3 2300 	ldrd	r2, r3, [r3]
   db726:	4640      	mov	r0, r8
   db728:	4649      	mov	r1, r9
   db72a:	f7fe fdaf 	bl	da28c <__aeabi_dcmpgt>
   db72e:	2800      	cmp	r0, #0
   db730:	f43f af7b 	beq.w	db62a <_strtod_l+0xa1a>
   db734:	e4c2      	b.n	db0bc <_strtod_l+0x4ac>
   db736:	9b04      	ldr	r3, [sp, #16]
   db738:	b333      	cbz	r3, db788 <_strtod_l+0xb78>
   db73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db73c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db740:	d822      	bhi.n	db788 <_strtod_l+0xb78>
   db742:	a32d      	add	r3, pc, #180	; (adr r3, db7f8 <_strtod_l+0xbe8>)
   db744:	e9d3 2300 	ldrd	r2, r3, [r3]
   db748:	4640      	mov	r0, r8
   db74a:	4649      	mov	r1, r9
   db74c:	f7fe fd8a 	bl	da264 <__aeabi_dcmple>
   db750:	b1a0      	cbz	r0, db77c <_strtod_l+0xb6c>
   db752:	4649      	mov	r1, r9
   db754:	4640      	mov	r0, r8
   db756:	f7fe fdb9 	bl	da2cc <__aeabi_d2uiz>
   db75a:	2801      	cmp	r0, #1
   db75c:	bf38      	it	cc
   db75e:	2001      	movcc	r0, #1
   db760:	f7fe fa8a 	bl	d9c78 <__aeabi_ui2d>
   db764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db766:	4680      	mov	r8, r0
   db768:	4689      	mov	r9, r1
   db76a:	bb13      	cbnz	r3, db7b2 <_strtod_l+0xba2>
   db76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db770:	9014      	str	r0, [sp, #80]	; 0x50
   db772:	9315      	str	r3, [sp, #84]	; 0x54
   db774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db778:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db77e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db780:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db784:	1a9b      	subs	r3, r3, r2
   db786:	930d      	str	r3, [sp, #52]	; 0x34
   db788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db78c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db794:	f000 febe 	bl	dc514 <__ulp>
   db798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db79c:	ec53 2b10 	vmov	r2, r3, d0
   db7a0:	f7fe fae4 	bl	d9d6c <__aeabi_dmul>
   db7a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db7a8:	f7fe f92a 	bl	d9a00 <__adddf3>
   db7ac:	4682      	mov	sl, r0
   db7ae:	468b      	mov	fp, r1
   db7b0:	e78f      	b.n	db6d2 <_strtod_l+0xac2>
   db7b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   db7b6:	e7dd      	b.n	db774 <_strtod_l+0xb64>
   db7b8:	a311      	add	r3, pc, #68	; (adr r3, db800 <_strtod_l+0xbf0>)
   db7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   db7be:	f7fe fd47 	bl	da250 <__aeabi_dcmplt>
   db7c2:	e7b4      	b.n	db72e <_strtod_l+0xb1e>
   db7c4:	2300      	movs	r3, #0
   db7c6:	930e      	str	r3, [sp, #56]	; 0x38
   db7c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db7ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db7cc:	6013      	str	r3, [r2, #0]
   db7ce:	f7ff ba65 	b.w	dac9c <_strtod_l+0x8c>
   db7d2:	2b65      	cmp	r3, #101	; 0x65
   db7d4:	f43f ab5d 	beq.w	dae92 <_strtod_l+0x282>
   db7d8:	2b45      	cmp	r3, #69	; 0x45
   db7da:	f43f ab5a 	beq.w	dae92 <_strtod_l+0x282>
   db7de:	2201      	movs	r2, #1
   db7e0:	f7ff bb92 	b.w	daf08 <_strtod_l+0x2f8>
   db7e4:	f3af 8000 	nop.w
   db7e8:	94a03595 	.word	0x94a03595
   db7ec:	3fdfffff 	.word	0x3fdfffff
   db7f0:	35afe535 	.word	0x35afe535
   db7f4:	3fe00000 	.word	0x3fe00000
   db7f8:	ffc00000 	.word	0xffc00000
   db7fc:	41dfffff 	.word	0x41dfffff
   db800:	94a03595 	.word	0x94a03595
   db804:	3fcfffff 	.word	0x3fcfffff
   db808:	3ff00000 	.word	0x3ff00000
   db80c:	7ff00000 	.word	0x7ff00000
   db810:	7fe00000 	.word	0x7fe00000
   db814:	7c9fffff 	.word	0x7c9fffff
   db818:	3fe00000 	.word	0x3fe00000
   db81c:	bff00000 	.word	0xbff00000
   db820:	7fefffff 	.word	0x7fefffff

000db824 <strtod>:
   db824:	460a      	mov	r2, r1
   db826:	4601      	mov	r1, r0
   db828:	4802      	ldr	r0, [pc, #8]	; (db834 <strtod+0x10>)
   db82a:	4b03      	ldr	r3, [pc, #12]	; (db838 <strtod+0x14>)
   db82c:	6800      	ldr	r0, [r0, #0]
   db82e:	f7ff b9ef 	b.w	dac10 <_strtod_l>
   db832:	bf00      	nop
   db834:	2003e1d0 	.word	0x2003e1d0
   db838:	2003e238 	.word	0x2003e238

000db83c <rshift>:
   db83c:	6903      	ldr	r3, [r0, #16]
   db83e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   db842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db846:	ea4f 1261 	mov.w	r2, r1, asr #5
   db84a:	f100 0414 	add.w	r4, r0, #20
   db84e:	dd45      	ble.n	db8dc <rshift+0xa0>
   db850:	f011 011f 	ands.w	r1, r1, #31
   db854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   db858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   db85c:	d10c      	bne.n	db878 <rshift+0x3c>
   db85e:	f100 0710 	add.w	r7, r0, #16
   db862:	4629      	mov	r1, r5
   db864:	42b1      	cmp	r1, r6
   db866:	d334      	bcc.n	db8d2 <rshift+0x96>
   db868:	1a9b      	subs	r3, r3, r2
   db86a:	009b      	lsls	r3, r3, #2
   db86c:	1eea      	subs	r2, r5, #3
   db86e:	4296      	cmp	r6, r2
   db870:	bf38      	it	cc
   db872:	2300      	movcc	r3, #0
   db874:	4423      	add	r3, r4
   db876:	e015      	b.n	db8a4 <rshift+0x68>
   db878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   db87c:	f1c1 0820 	rsb	r8, r1, #32
   db880:	40cf      	lsrs	r7, r1
   db882:	f105 0e04 	add.w	lr, r5, #4
   db886:	46a1      	mov	r9, r4
   db888:	4576      	cmp	r6, lr
   db88a:	46f4      	mov	ip, lr
   db88c:	d815      	bhi.n	db8ba <rshift+0x7e>
   db88e:	1a9b      	subs	r3, r3, r2
   db890:	009a      	lsls	r2, r3, #2
   db892:	3a04      	subs	r2, #4
   db894:	3501      	adds	r5, #1
   db896:	42ae      	cmp	r6, r5
   db898:	bf38      	it	cc
   db89a:	2200      	movcc	r2, #0
   db89c:	18a3      	adds	r3, r4, r2
   db89e:	50a7      	str	r7, [r4, r2]
   db8a0:	b107      	cbz	r7, db8a4 <rshift+0x68>
   db8a2:	3304      	adds	r3, #4
   db8a4:	1b1a      	subs	r2, r3, r4
   db8a6:	42a3      	cmp	r3, r4
   db8a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   db8ac:	bf08      	it	eq
   db8ae:	2300      	moveq	r3, #0
   db8b0:	6102      	str	r2, [r0, #16]
   db8b2:	bf08      	it	eq
   db8b4:	6143      	streq	r3, [r0, #20]
   db8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db8ba:	f8dc c000 	ldr.w	ip, [ip]
   db8be:	fa0c fc08 	lsl.w	ip, ip, r8
   db8c2:	ea4c 0707 	orr.w	r7, ip, r7
   db8c6:	f849 7b04 	str.w	r7, [r9], #4
   db8ca:	f85e 7b04 	ldr.w	r7, [lr], #4
   db8ce:	40cf      	lsrs	r7, r1
   db8d0:	e7da      	b.n	db888 <rshift+0x4c>
   db8d2:	f851 cb04 	ldr.w	ip, [r1], #4
   db8d6:	f847 cf04 	str.w	ip, [r7, #4]!
   db8da:	e7c3      	b.n	db864 <rshift+0x28>
   db8dc:	4623      	mov	r3, r4
   db8de:	e7e1      	b.n	db8a4 <rshift+0x68>

000db8e0 <__hexdig_fun>:
   db8e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db8e4:	2b09      	cmp	r3, #9
   db8e6:	d802      	bhi.n	db8ee <__hexdig_fun+0xe>
   db8e8:	3820      	subs	r0, #32
   db8ea:	b2c0      	uxtb	r0, r0
   db8ec:	4770      	bx	lr
   db8ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   db8f2:	2b05      	cmp	r3, #5
   db8f4:	d801      	bhi.n	db8fa <__hexdig_fun+0x1a>
   db8f6:	3847      	subs	r0, #71	; 0x47
   db8f8:	e7f7      	b.n	db8ea <__hexdig_fun+0xa>
   db8fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   db8fe:	2b05      	cmp	r3, #5
   db900:	d801      	bhi.n	db906 <__hexdig_fun+0x26>
   db902:	3827      	subs	r0, #39	; 0x27
   db904:	e7f1      	b.n	db8ea <__hexdig_fun+0xa>
   db906:	2000      	movs	r0, #0
   db908:	4770      	bx	lr
	...

000db90c <__gethex>:
   db90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db910:	ed2d 8b02 	vpush	{d8}
   db914:	b089      	sub	sp, #36	; 0x24
   db916:	ee08 0a10 	vmov	s16, r0
   db91a:	9304      	str	r3, [sp, #16]
   db91c:	4bbc      	ldr	r3, [pc, #752]	; (dbc10 <__gethex+0x304>)
   db91e:	681b      	ldr	r3, [r3, #0]
   db920:	9301      	str	r3, [sp, #4]
   db922:	4618      	mov	r0, r3
   db924:	468b      	mov	fp, r1
   db926:	4690      	mov	r8, r2
   db928:	f7ff f906 	bl	dab38 <strlen>
   db92c:	9b01      	ldr	r3, [sp, #4]
   db92e:	f8db 2000 	ldr.w	r2, [fp]
   db932:	4403      	add	r3, r0
   db934:	4682      	mov	sl, r0
   db936:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   db93a:	9305      	str	r3, [sp, #20]
   db93c:	1c93      	adds	r3, r2, #2
   db93e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   db942:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   db946:	32fe      	adds	r2, #254	; 0xfe
   db948:	18d1      	adds	r1, r2, r3
   db94a:	461f      	mov	r7, r3
   db94c:	f813 0b01 	ldrb.w	r0, [r3], #1
   db950:	9100      	str	r1, [sp, #0]
   db952:	2830      	cmp	r0, #48	; 0x30
   db954:	d0f8      	beq.n	db948 <__gethex+0x3c>
   db956:	f7ff ffc3 	bl	db8e0 <__hexdig_fun>
   db95a:	4604      	mov	r4, r0
   db95c:	2800      	cmp	r0, #0
   db95e:	d13a      	bne.n	db9d6 <__gethex+0xca>
   db960:	9901      	ldr	r1, [sp, #4]
   db962:	4652      	mov	r2, sl
   db964:	4638      	mov	r0, r7
   db966:	f7ff f911 	bl	dab8c <strncmp>
   db96a:	4605      	mov	r5, r0
   db96c:	2800      	cmp	r0, #0
   db96e:	d168      	bne.n	dba42 <__gethex+0x136>
   db970:	f817 000a 	ldrb.w	r0, [r7, sl]
   db974:	eb07 060a 	add.w	r6, r7, sl
   db978:	f7ff ffb2 	bl	db8e0 <__hexdig_fun>
   db97c:	2800      	cmp	r0, #0
   db97e:	d062      	beq.n	dba46 <__gethex+0x13a>
   db980:	4633      	mov	r3, r6
   db982:	7818      	ldrb	r0, [r3, #0]
   db984:	2830      	cmp	r0, #48	; 0x30
   db986:	461f      	mov	r7, r3
   db988:	f103 0301 	add.w	r3, r3, #1
   db98c:	d0f9      	beq.n	db982 <__gethex+0x76>
   db98e:	f7ff ffa7 	bl	db8e0 <__hexdig_fun>
   db992:	2301      	movs	r3, #1
   db994:	fab0 f480 	clz	r4, r0
   db998:	0964      	lsrs	r4, r4, #5
   db99a:	4635      	mov	r5, r6
   db99c:	9300      	str	r3, [sp, #0]
   db99e:	463a      	mov	r2, r7
   db9a0:	4616      	mov	r6, r2
   db9a2:	3201      	adds	r2, #1
   db9a4:	7830      	ldrb	r0, [r6, #0]
   db9a6:	f7ff ff9b 	bl	db8e0 <__hexdig_fun>
   db9aa:	2800      	cmp	r0, #0
   db9ac:	d1f8      	bne.n	db9a0 <__gethex+0x94>
   db9ae:	9901      	ldr	r1, [sp, #4]
   db9b0:	4652      	mov	r2, sl
   db9b2:	4630      	mov	r0, r6
   db9b4:	f7ff f8ea 	bl	dab8c <strncmp>
   db9b8:	b980      	cbnz	r0, db9dc <__gethex+0xd0>
   db9ba:	b94d      	cbnz	r5, db9d0 <__gethex+0xc4>
   db9bc:	eb06 050a 	add.w	r5, r6, sl
   db9c0:	462a      	mov	r2, r5
   db9c2:	4616      	mov	r6, r2
   db9c4:	3201      	adds	r2, #1
   db9c6:	7830      	ldrb	r0, [r6, #0]
   db9c8:	f7ff ff8a 	bl	db8e0 <__hexdig_fun>
   db9cc:	2800      	cmp	r0, #0
   db9ce:	d1f8      	bne.n	db9c2 <__gethex+0xb6>
   db9d0:	1bad      	subs	r5, r5, r6
   db9d2:	00ad      	lsls	r5, r5, #2
   db9d4:	e004      	b.n	db9e0 <__gethex+0xd4>
   db9d6:	2400      	movs	r4, #0
   db9d8:	4625      	mov	r5, r4
   db9da:	e7e0      	b.n	db99e <__gethex+0x92>
   db9dc:	2d00      	cmp	r5, #0
   db9de:	d1f7      	bne.n	db9d0 <__gethex+0xc4>
   db9e0:	7833      	ldrb	r3, [r6, #0]
   db9e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db9e6:	2b50      	cmp	r3, #80	; 0x50
   db9e8:	d13b      	bne.n	dba62 <__gethex+0x156>
   db9ea:	7873      	ldrb	r3, [r6, #1]
   db9ec:	2b2b      	cmp	r3, #43	; 0x2b
   db9ee:	d02c      	beq.n	dba4a <__gethex+0x13e>
   db9f0:	2b2d      	cmp	r3, #45	; 0x2d
   db9f2:	d02e      	beq.n	dba52 <__gethex+0x146>
   db9f4:	1c71      	adds	r1, r6, #1
   db9f6:	f04f 0900 	mov.w	r9, #0
   db9fa:	7808      	ldrb	r0, [r1, #0]
   db9fc:	f7ff ff70 	bl	db8e0 <__hexdig_fun>
   dba00:	1e43      	subs	r3, r0, #1
   dba02:	b2db      	uxtb	r3, r3
   dba04:	2b18      	cmp	r3, #24
   dba06:	d82c      	bhi.n	dba62 <__gethex+0x156>
   dba08:	f1a0 0210 	sub.w	r2, r0, #16
   dba0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dba10:	f7ff ff66 	bl	db8e0 <__hexdig_fun>
   dba14:	1e43      	subs	r3, r0, #1
   dba16:	b2db      	uxtb	r3, r3
   dba18:	2b18      	cmp	r3, #24
   dba1a:	d91d      	bls.n	dba58 <__gethex+0x14c>
   dba1c:	f1b9 0f00 	cmp.w	r9, #0
   dba20:	d000      	beq.n	dba24 <__gethex+0x118>
   dba22:	4252      	negs	r2, r2
   dba24:	4415      	add	r5, r2
   dba26:	f8cb 1000 	str.w	r1, [fp]
   dba2a:	b1e4      	cbz	r4, dba66 <__gethex+0x15a>
   dba2c:	9b00      	ldr	r3, [sp, #0]
   dba2e:	2b00      	cmp	r3, #0
   dba30:	bf14      	ite	ne
   dba32:	2700      	movne	r7, #0
   dba34:	2706      	moveq	r7, #6
   dba36:	4638      	mov	r0, r7
   dba38:	b009      	add	sp, #36	; 0x24
   dba3a:	ecbd 8b02 	vpop	{d8}
   dba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba42:	463e      	mov	r6, r7
   dba44:	4625      	mov	r5, r4
   dba46:	2401      	movs	r4, #1
   dba48:	e7ca      	b.n	db9e0 <__gethex+0xd4>
   dba4a:	f04f 0900 	mov.w	r9, #0
   dba4e:	1cb1      	adds	r1, r6, #2
   dba50:	e7d3      	b.n	db9fa <__gethex+0xee>
   dba52:	f04f 0901 	mov.w	r9, #1
   dba56:	e7fa      	b.n	dba4e <__gethex+0x142>
   dba58:	230a      	movs	r3, #10
   dba5a:	fb03 0202 	mla	r2, r3, r2, r0
   dba5e:	3a10      	subs	r2, #16
   dba60:	e7d4      	b.n	dba0c <__gethex+0x100>
   dba62:	4631      	mov	r1, r6
   dba64:	e7df      	b.n	dba26 <__gethex+0x11a>
   dba66:	1bf3      	subs	r3, r6, r7
   dba68:	3b01      	subs	r3, #1
   dba6a:	4621      	mov	r1, r4
   dba6c:	2b07      	cmp	r3, #7
   dba6e:	dc52      	bgt.n	dbb16 <__gethex+0x20a>
   dba70:	ee18 0a10 	vmov	r0, s16
   dba74:	f000 fa52 	bl	dbf1c <_Balloc>
   dba78:	f04f 0b00 	mov.w	fp, #0
   dba7c:	f100 0914 	add.w	r9, r0, #20
   dba80:	f1ca 0301 	rsb	r3, sl, #1
   dba84:	4604      	mov	r4, r0
   dba86:	f8cd 9008 	str.w	r9, [sp, #8]
   dba8a:	f8cd b000 	str.w	fp, [sp]
   dba8e:	9306      	str	r3, [sp, #24]
   dba90:	42b7      	cmp	r7, r6
   dba92:	d343      	bcc.n	dbb1c <__gethex+0x210>
   dba94:	9802      	ldr	r0, [sp, #8]
   dba96:	9b00      	ldr	r3, [sp, #0]
   dba98:	f840 3b04 	str.w	r3, [r0], #4
   dba9c:	eba0 0009 	sub.w	r0, r0, r9
   dbaa0:	1080      	asrs	r0, r0, #2
   dbaa2:	0146      	lsls	r6, r0, #5
   dbaa4:	6120      	str	r0, [r4, #16]
   dbaa6:	4618      	mov	r0, r3
   dbaa8:	f000 faff 	bl	dc0aa <__hi0bits>
   dbaac:	1a30      	subs	r0, r6, r0
   dbaae:	f8d8 6000 	ldr.w	r6, [r8]
   dbab2:	42b0      	cmp	r0, r6
   dbab4:	dd66      	ble.n	dbb84 <__gethex+0x278>
   dbab6:	1b87      	subs	r7, r0, r6
   dbab8:	4639      	mov	r1, r7
   dbaba:	4620      	mov	r0, r4
   dbabc:	f000 fe4c 	bl	dc758 <__any_on>
   dbac0:	4682      	mov	sl, r0
   dbac2:	b1a8      	cbz	r0, dbaf0 <__gethex+0x1e4>
   dbac4:	1e7b      	subs	r3, r7, #1
   dbac6:	1159      	asrs	r1, r3, #5
   dbac8:	f003 021f 	and.w	r2, r3, #31
   dbacc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dbad0:	f04f 0a01 	mov.w	sl, #1
   dbad4:	fa0a f202 	lsl.w	r2, sl, r2
   dbad8:	420a      	tst	r2, r1
   dbada:	d009      	beq.n	dbaf0 <__gethex+0x1e4>
   dbadc:	4553      	cmp	r3, sl
   dbade:	dd05      	ble.n	dbaec <__gethex+0x1e0>
   dbae0:	1eb9      	subs	r1, r7, #2
   dbae2:	4620      	mov	r0, r4
   dbae4:	f000 fe38 	bl	dc758 <__any_on>
   dbae8:	2800      	cmp	r0, #0
   dbaea:	d148      	bne.n	dbb7e <__gethex+0x272>
   dbaec:	f04f 0a02 	mov.w	sl, #2
   dbaf0:	4639      	mov	r1, r7
   dbaf2:	4620      	mov	r0, r4
   dbaf4:	f7ff fea2 	bl	db83c <rshift>
   dbaf8:	443d      	add	r5, r7
   dbafa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbafe:	42ab      	cmp	r3, r5
   dbb00:	da4f      	bge.n	dbba2 <__gethex+0x296>
   dbb02:	ee18 0a10 	vmov	r0, s16
   dbb06:	4621      	mov	r1, r4
   dbb08:	f000 fa3c 	bl	dbf84 <_Bfree>
   dbb0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbb0e:	2300      	movs	r3, #0
   dbb10:	6013      	str	r3, [r2, #0]
   dbb12:	27a3      	movs	r7, #163	; 0xa3
   dbb14:	e78f      	b.n	dba36 <__gethex+0x12a>
   dbb16:	3101      	adds	r1, #1
   dbb18:	105b      	asrs	r3, r3, #1
   dbb1a:	e7a7      	b.n	dba6c <__gethex+0x160>
   dbb1c:	1e73      	subs	r3, r6, #1
   dbb1e:	9a05      	ldr	r2, [sp, #20]
   dbb20:	9303      	str	r3, [sp, #12]
   dbb22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dbb26:	4293      	cmp	r3, r2
   dbb28:	d019      	beq.n	dbb5e <__gethex+0x252>
   dbb2a:	f1bb 0f20 	cmp.w	fp, #32
   dbb2e:	d107      	bne.n	dbb40 <__gethex+0x234>
   dbb30:	9b02      	ldr	r3, [sp, #8]
   dbb32:	9a00      	ldr	r2, [sp, #0]
   dbb34:	f843 2b04 	str.w	r2, [r3], #4
   dbb38:	9302      	str	r3, [sp, #8]
   dbb3a:	2300      	movs	r3, #0
   dbb3c:	9300      	str	r3, [sp, #0]
   dbb3e:	469b      	mov	fp, r3
   dbb40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dbb44:	f7ff fecc 	bl	db8e0 <__hexdig_fun>
   dbb48:	9b00      	ldr	r3, [sp, #0]
   dbb4a:	f000 000f 	and.w	r0, r0, #15
   dbb4e:	fa00 f00b 	lsl.w	r0, r0, fp
   dbb52:	4303      	orrs	r3, r0
   dbb54:	9300      	str	r3, [sp, #0]
   dbb56:	f10b 0b04 	add.w	fp, fp, #4
   dbb5a:	9b03      	ldr	r3, [sp, #12]
   dbb5c:	e00d      	b.n	dbb7a <__gethex+0x26e>
   dbb5e:	9b03      	ldr	r3, [sp, #12]
   dbb60:	9a06      	ldr	r2, [sp, #24]
   dbb62:	4413      	add	r3, r2
   dbb64:	42bb      	cmp	r3, r7
   dbb66:	d3e0      	bcc.n	dbb2a <__gethex+0x21e>
   dbb68:	4618      	mov	r0, r3
   dbb6a:	9901      	ldr	r1, [sp, #4]
   dbb6c:	9307      	str	r3, [sp, #28]
   dbb6e:	4652      	mov	r2, sl
   dbb70:	f7ff f80c 	bl	dab8c <strncmp>
   dbb74:	9b07      	ldr	r3, [sp, #28]
   dbb76:	2800      	cmp	r0, #0
   dbb78:	d1d7      	bne.n	dbb2a <__gethex+0x21e>
   dbb7a:	461e      	mov	r6, r3
   dbb7c:	e788      	b.n	dba90 <__gethex+0x184>
   dbb7e:	f04f 0a03 	mov.w	sl, #3
   dbb82:	e7b5      	b.n	dbaf0 <__gethex+0x1e4>
   dbb84:	da0a      	bge.n	dbb9c <__gethex+0x290>
   dbb86:	1a37      	subs	r7, r6, r0
   dbb88:	4621      	mov	r1, r4
   dbb8a:	ee18 0a10 	vmov	r0, s16
   dbb8e:	463a      	mov	r2, r7
   dbb90:	f000 fbce 	bl	dc330 <__lshift>
   dbb94:	1bed      	subs	r5, r5, r7
   dbb96:	4604      	mov	r4, r0
   dbb98:	f100 0914 	add.w	r9, r0, #20
   dbb9c:	f04f 0a00 	mov.w	sl, #0
   dbba0:	e7ab      	b.n	dbafa <__gethex+0x1ee>
   dbba2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dbba6:	42a8      	cmp	r0, r5
   dbba8:	dd6d      	ble.n	dbc86 <__gethex+0x37a>
   dbbaa:	1b45      	subs	r5, r0, r5
   dbbac:	42ae      	cmp	r6, r5
   dbbae:	dc31      	bgt.n	dbc14 <__gethex+0x308>
   dbbb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dbbb4:	2b02      	cmp	r3, #2
   dbbb6:	d023      	beq.n	dbc00 <__gethex+0x2f4>
   dbbb8:	2b03      	cmp	r3, #3
   dbbba:	d025      	beq.n	dbc08 <__gethex+0x2fc>
   dbbbc:	2b01      	cmp	r3, #1
   dbbbe:	d115      	bne.n	dbbec <__gethex+0x2e0>
   dbbc0:	42ae      	cmp	r6, r5
   dbbc2:	d113      	bne.n	dbbec <__gethex+0x2e0>
   dbbc4:	2e01      	cmp	r6, #1
   dbbc6:	d10b      	bne.n	dbbe0 <__gethex+0x2d4>
   dbbc8:	9a04      	ldr	r2, [sp, #16]
   dbbca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dbbce:	6013      	str	r3, [r2, #0]
   dbbd0:	2301      	movs	r3, #1
   dbbd2:	6123      	str	r3, [r4, #16]
   dbbd4:	f8c9 3000 	str.w	r3, [r9]
   dbbd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbbda:	2762      	movs	r7, #98	; 0x62
   dbbdc:	601c      	str	r4, [r3, #0]
   dbbde:	e72a      	b.n	dba36 <__gethex+0x12a>
   dbbe0:	1e71      	subs	r1, r6, #1
   dbbe2:	4620      	mov	r0, r4
   dbbe4:	f000 fdb8 	bl	dc758 <__any_on>
   dbbe8:	2800      	cmp	r0, #0
   dbbea:	d1ed      	bne.n	dbbc8 <__gethex+0x2bc>
   dbbec:	ee18 0a10 	vmov	r0, s16
   dbbf0:	4621      	mov	r1, r4
   dbbf2:	f000 f9c7 	bl	dbf84 <_Bfree>
   dbbf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbbf8:	2300      	movs	r3, #0
   dbbfa:	6013      	str	r3, [r2, #0]
   dbbfc:	2750      	movs	r7, #80	; 0x50
   dbbfe:	e71a      	b.n	dba36 <__gethex+0x12a>
   dbc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbc02:	2b00      	cmp	r3, #0
   dbc04:	d1f2      	bne.n	dbbec <__gethex+0x2e0>
   dbc06:	e7df      	b.n	dbbc8 <__gethex+0x2bc>
   dbc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbc0a:	2b00      	cmp	r3, #0
   dbc0c:	d1dc      	bne.n	dbbc8 <__gethex+0x2bc>
   dbc0e:	e7ed      	b.n	dbbec <__gethex+0x2e0>
   dbc10:	000dd964 	.word	0x000dd964
   dbc14:	1e6f      	subs	r7, r5, #1
   dbc16:	f1ba 0f00 	cmp.w	sl, #0
   dbc1a:	d131      	bne.n	dbc80 <__gethex+0x374>
   dbc1c:	b127      	cbz	r7, dbc28 <__gethex+0x31c>
   dbc1e:	4639      	mov	r1, r7
   dbc20:	4620      	mov	r0, r4
   dbc22:	f000 fd99 	bl	dc758 <__any_on>
   dbc26:	4682      	mov	sl, r0
   dbc28:	117b      	asrs	r3, r7, #5
   dbc2a:	2101      	movs	r1, #1
   dbc2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dbc30:	f007 071f 	and.w	r7, r7, #31
   dbc34:	fa01 f707 	lsl.w	r7, r1, r7
   dbc38:	421f      	tst	r7, r3
   dbc3a:	4629      	mov	r1, r5
   dbc3c:	4620      	mov	r0, r4
   dbc3e:	bf18      	it	ne
   dbc40:	f04a 0a02 	orrne.w	sl, sl, #2
   dbc44:	1b76      	subs	r6, r6, r5
   dbc46:	f7ff fdf9 	bl	db83c <rshift>
   dbc4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dbc4e:	2702      	movs	r7, #2
   dbc50:	f1ba 0f00 	cmp.w	sl, #0
   dbc54:	d048      	beq.n	dbce8 <__gethex+0x3dc>
   dbc56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dbc5a:	2b02      	cmp	r3, #2
   dbc5c:	d015      	beq.n	dbc8a <__gethex+0x37e>
   dbc5e:	2b03      	cmp	r3, #3
   dbc60:	d017      	beq.n	dbc92 <__gethex+0x386>
   dbc62:	2b01      	cmp	r3, #1
   dbc64:	d109      	bne.n	dbc7a <__gethex+0x36e>
   dbc66:	f01a 0f02 	tst.w	sl, #2
   dbc6a:	d006      	beq.n	dbc7a <__gethex+0x36e>
   dbc6c:	f8d9 0000 	ldr.w	r0, [r9]
   dbc70:	ea4a 0a00 	orr.w	sl, sl, r0
   dbc74:	f01a 0f01 	tst.w	sl, #1
   dbc78:	d10e      	bne.n	dbc98 <__gethex+0x38c>
   dbc7a:	f047 0710 	orr.w	r7, r7, #16
   dbc7e:	e033      	b.n	dbce8 <__gethex+0x3dc>
   dbc80:	f04f 0a01 	mov.w	sl, #1
   dbc84:	e7d0      	b.n	dbc28 <__gethex+0x31c>
   dbc86:	2701      	movs	r7, #1
   dbc88:	e7e2      	b.n	dbc50 <__gethex+0x344>
   dbc8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbc8c:	f1c3 0301 	rsb	r3, r3, #1
   dbc90:	9315      	str	r3, [sp, #84]	; 0x54
   dbc92:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbc94:	2b00      	cmp	r3, #0
   dbc96:	d0f0      	beq.n	dbc7a <__gethex+0x36e>
   dbc98:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dbc9c:	f104 0314 	add.w	r3, r4, #20
   dbca0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dbca4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dbca8:	f04f 0c00 	mov.w	ip, #0
   dbcac:	4618      	mov	r0, r3
   dbcae:	f853 2b04 	ldr.w	r2, [r3], #4
   dbcb2:	f1b2 3fff 	cmp.w	r2, #4294967295
   dbcb6:	d01c      	beq.n	dbcf2 <__gethex+0x3e6>
   dbcb8:	3201      	adds	r2, #1
   dbcba:	6002      	str	r2, [r0, #0]
   dbcbc:	2f02      	cmp	r7, #2
   dbcbe:	f104 0314 	add.w	r3, r4, #20
   dbcc2:	d13a      	bne.n	dbd3a <__gethex+0x42e>
   dbcc4:	f8d8 2000 	ldr.w	r2, [r8]
   dbcc8:	3a01      	subs	r2, #1
   dbcca:	42b2      	cmp	r2, r6
   dbccc:	d10a      	bne.n	dbce4 <__gethex+0x3d8>
   dbcce:	1171      	asrs	r1, r6, #5
   dbcd0:	2201      	movs	r2, #1
   dbcd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dbcd6:	f006 061f 	and.w	r6, r6, #31
   dbcda:	fa02 f606 	lsl.w	r6, r2, r6
   dbcde:	421e      	tst	r6, r3
   dbce0:	bf18      	it	ne
   dbce2:	4617      	movne	r7, r2
   dbce4:	f047 0720 	orr.w	r7, r7, #32
   dbce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbcea:	601c      	str	r4, [r3, #0]
   dbcec:	9b04      	ldr	r3, [sp, #16]
   dbcee:	601d      	str	r5, [r3, #0]
   dbcf0:	e6a1      	b.n	dba36 <__gethex+0x12a>
   dbcf2:	4299      	cmp	r1, r3
   dbcf4:	f843 cc04 	str.w	ip, [r3, #-4]
   dbcf8:	d8d8      	bhi.n	dbcac <__gethex+0x3a0>
   dbcfa:	68a3      	ldr	r3, [r4, #8]
   dbcfc:	4599      	cmp	r9, r3
   dbcfe:	db14      	blt.n	dbd2a <__gethex+0x41e>
   dbd00:	6861      	ldr	r1, [r4, #4]
   dbd02:	ee18 0a10 	vmov	r0, s16
   dbd06:	3101      	adds	r1, #1
   dbd08:	f000 f908 	bl	dbf1c <_Balloc>
   dbd0c:	6922      	ldr	r2, [r4, #16]
   dbd0e:	3202      	adds	r2, #2
   dbd10:	f104 010c 	add.w	r1, r4, #12
   dbd14:	4682      	mov	sl, r0
   dbd16:	0092      	lsls	r2, r2, #2
   dbd18:	300c      	adds	r0, #12
   dbd1a:	f7fe fea7 	bl	daa6c <memcpy>
   dbd1e:	4621      	mov	r1, r4
   dbd20:	ee18 0a10 	vmov	r0, s16
   dbd24:	f000 f92e 	bl	dbf84 <_Bfree>
   dbd28:	4654      	mov	r4, sl
   dbd2a:	6923      	ldr	r3, [r4, #16]
   dbd2c:	1c5a      	adds	r2, r3, #1
   dbd2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dbd32:	6122      	str	r2, [r4, #16]
   dbd34:	2201      	movs	r2, #1
   dbd36:	615a      	str	r2, [r3, #20]
   dbd38:	e7c0      	b.n	dbcbc <__gethex+0x3b0>
   dbd3a:	6922      	ldr	r2, [r4, #16]
   dbd3c:	454a      	cmp	r2, r9
   dbd3e:	dd0b      	ble.n	dbd58 <__gethex+0x44c>
   dbd40:	2101      	movs	r1, #1
   dbd42:	4620      	mov	r0, r4
   dbd44:	f7ff fd7a 	bl	db83c <rshift>
   dbd48:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbd4c:	3501      	adds	r5, #1
   dbd4e:	42ab      	cmp	r3, r5
   dbd50:	f6ff aed7 	blt.w	dbb02 <__gethex+0x1f6>
   dbd54:	2701      	movs	r7, #1
   dbd56:	e7c5      	b.n	dbce4 <__gethex+0x3d8>
   dbd58:	f016 061f 	ands.w	r6, r6, #31
   dbd5c:	d0fa      	beq.n	dbd54 <__gethex+0x448>
   dbd5e:	449b      	add	fp, r3
   dbd60:	f1c6 0620 	rsb	r6, r6, #32
   dbd64:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dbd68:	f000 f99f 	bl	dc0aa <__hi0bits>
   dbd6c:	42b0      	cmp	r0, r6
   dbd6e:	dbe7      	blt.n	dbd40 <__gethex+0x434>
   dbd70:	e7f0      	b.n	dbd54 <__gethex+0x448>
   dbd72:	bf00      	nop

000dbd74 <L_shift>:
   dbd74:	f1c2 0208 	rsb	r2, r2, #8
   dbd78:	0092      	lsls	r2, r2, #2
   dbd7a:	b570      	push	{r4, r5, r6, lr}
   dbd7c:	f1c2 0620 	rsb	r6, r2, #32
   dbd80:	6843      	ldr	r3, [r0, #4]
   dbd82:	6804      	ldr	r4, [r0, #0]
   dbd84:	fa03 f506 	lsl.w	r5, r3, r6
   dbd88:	432c      	orrs	r4, r5
   dbd8a:	40d3      	lsrs	r3, r2
   dbd8c:	6004      	str	r4, [r0, #0]
   dbd8e:	f840 3f04 	str.w	r3, [r0, #4]!
   dbd92:	4288      	cmp	r0, r1
   dbd94:	d3f4      	bcc.n	dbd80 <L_shift+0xc>
   dbd96:	bd70      	pop	{r4, r5, r6, pc}

000dbd98 <__match>:
   dbd98:	b530      	push	{r4, r5, lr}
   dbd9a:	6803      	ldr	r3, [r0, #0]
   dbd9c:	3301      	adds	r3, #1
   dbd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbda2:	b914      	cbnz	r4, dbdaa <__match+0x12>
   dbda4:	6003      	str	r3, [r0, #0]
   dbda6:	2001      	movs	r0, #1
   dbda8:	bd30      	pop	{r4, r5, pc}
   dbdaa:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbdae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dbdb2:	2d19      	cmp	r5, #25
   dbdb4:	bf98      	it	ls
   dbdb6:	3220      	addls	r2, #32
   dbdb8:	42a2      	cmp	r2, r4
   dbdba:	d0f0      	beq.n	dbd9e <__match+0x6>
   dbdbc:	2000      	movs	r0, #0
   dbdbe:	e7f3      	b.n	dbda8 <__match+0x10>

000dbdc0 <__hexnan>:
   dbdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbdc4:	680b      	ldr	r3, [r1, #0]
   dbdc6:	6801      	ldr	r1, [r0, #0]
   dbdc8:	115e      	asrs	r6, r3, #5
   dbdca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dbdce:	f013 031f 	ands.w	r3, r3, #31
   dbdd2:	b087      	sub	sp, #28
   dbdd4:	bf18      	it	ne
   dbdd6:	3604      	addne	r6, #4
   dbdd8:	2500      	movs	r5, #0
   dbdda:	1f37      	subs	r7, r6, #4
   dbddc:	4682      	mov	sl, r0
   dbdde:	4690      	mov	r8, r2
   dbde0:	9301      	str	r3, [sp, #4]
   dbde2:	f846 5c04 	str.w	r5, [r6, #-4]
   dbde6:	46b9      	mov	r9, r7
   dbde8:	463c      	mov	r4, r7
   dbdea:	9502      	str	r5, [sp, #8]
   dbdec:	46ab      	mov	fp, r5
   dbdee:	784a      	ldrb	r2, [r1, #1]
   dbdf0:	1c4b      	adds	r3, r1, #1
   dbdf2:	9303      	str	r3, [sp, #12]
   dbdf4:	b342      	cbz	r2, dbe48 <__hexnan+0x88>
   dbdf6:	4610      	mov	r0, r2
   dbdf8:	9105      	str	r1, [sp, #20]
   dbdfa:	9204      	str	r2, [sp, #16]
   dbdfc:	f7ff fd70 	bl	db8e0 <__hexdig_fun>
   dbe00:	2800      	cmp	r0, #0
   dbe02:	d14f      	bne.n	dbea4 <__hexnan+0xe4>
   dbe04:	9a04      	ldr	r2, [sp, #16]
   dbe06:	9905      	ldr	r1, [sp, #20]
   dbe08:	2a20      	cmp	r2, #32
   dbe0a:	d818      	bhi.n	dbe3e <__hexnan+0x7e>
   dbe0c:	9b02      	ldr	r3, [sp, #8]
   dbe0e:	459b      	cmp	fp, r3
   dbe10:	dd13      	ble.n	dbe3a <__hexnan+0x7a>
   dbe12:	454c      	cmp	r4, r9
   dbe14:	d206      	bcs.n	dbe24 <__hexnan+0x64>
   dbe16:	2d07      	cmp	r5, #7
   dbe18:	dc04      	bgt.n	dbe24 <__hexnan+0x64>
   dbe1a:	462a      	mov	r2, r5
   dbe1c:	4649      	mov	r1, r9
   dbe1e:	4620      	mov	r0, r4
   dbe20:	f7ff ffa8 	bl	dbd74 <L_shift>
   dbe24:	4544      	cmp	r4, r8
   dbe26:	d950      	bls.n	dbeca <__hexnan+0x10a>
   dbe28:	2300      	movs	r3, #0
   dbe2a:	f1a4 0904 	sub.w	r9, r4, #4
   dbe2e:	f844 3c04 	str.w	r3, [r4, #-4]
   dbe32:	f8cd b008 	str.w	fp, [sp, #8]
   dbe36:	464c      	mov	r4, r9
   dbe38:	461d      	mov	r5, r3
   dbe3a:	9903      	ldr	r1, [sp, #12]
   dbe3c:	e7d7      	b.n	dbdee <__hexnan+0x2e>
   dbe3e:	2a29      	cmp	r2, #41	; 0x29
   dbe40:	d156      	bne.n	dbef0 <__hexnan+0x130>
   dbe42:	3102      	adds	r1, #2
   dbe44:	f8ca 1000 	str.w	r1, [sl]
   dbe48:	f1bb 0f00 	cmp.w	fp, #0
   dbe4c:	d050      	beq.n	dbef0 <__hexnan+0x130>
   dbe4e:	454c      	cmp	r4, r9
   dbe50:	d206      	bcs.n	dbe60 <__hexnan+0xa0>
   dbe52:	2d07      	cmp	r5, #7
   dbe54:	dc04      	bgt.n	dbe60 <__hexnan+0xa0>
   dbe56:	462a      	mov	r2, r5
   dbe58:	4649      	mov	r1, r9
   dbe5a:	4620      	mov	r0, r4
   dbe5c:	f7ff ff8a 	bl	dbd74 <L_shift>
   dbe60:	4544      	cmp	r4, r8
   dbe62:	d934      	bls.n	dbece <__hexnan+0x10e>
   dbe64:	f1a8 0204 	sub.w	r2, r8, #4
   dbe68:	4623      	mov	r3, r4
   dbe6a:	f853 1b04 	ldr.w	r1, [r3], #4
   dbe6e:	f842 1f04 	str.w	r1, [r2, #4]!
   dbe72:	429f      	cmp	r7, r3
   dbe74:	d2f9      	bcs.n	dbe6a <__hexnan+0xaa>
   dbe76:	1b3b      	subs	r3, r7, r4
   dbe78:	f023 0303 	bic.w	r3, r3, #3
   dbe7c:	3304      	adds	r3, #4
   dbe7e:	3401      	adds	r4, #1
   dbe80:	3e03      	subs	r6, #3
   dbe82:	42b4      	cmp	r4, r6
   dbe84:	bf88      	it	hi
   dbe86:	2304      	movhi	r3, #4
   dbe88:	4443      	add	r3, r8
   dbe8a:	2200      	movs	r2, #0
   dbe8c:	f843 2b04 	str.w	r2, [r3], #4
   dbe90:	429f      	cmp	r7, r3
   dbe92:	d2fb      	bcs.n	dbe8c <__hexnan+0xcc>
   dbe94:	683b      	ldr	r3, [r7, #0]
   dbe96:	b91b      	cbnz	r3, dbea0 <__hexnan+0xe0>
   dbe98:	4547      	cmp	r7, r8
   dbe9a:	d127      	bne.n	dbeec <__hexnan+0x12c>
   dbe9c:	2301      	movs	r3, #1
   dbe9e:	603b      	str	r3, [r7, #0]
   dbea0:	2005      	movs	r0, #5
   dbea2:	e026      	b.n	dbef2 <__hexnan+0x132>
   dbea4:	3501      	adds	r5, #1
   dbea6:	2d08      	cmp	r5, #8
   dbea8:	f10b 0b01 	add.w	fp, fp, #1
   dbeac:	dd06      	ble.n	dbebc <__hexnan+0xfc>
   dbeae:	4544      	cmp	r4, r8
   dbeb0:	d9c3      	bls.n	dbe3a <__hexnan+0x7a>
   dbeb2:	2300      	movs	r3, #0
   dbeb4:	f844 3c04 	str.w	r3, [r4, #-4]
   dbeb8:	2501      	movs	r5, #1
   dbeba:	3c04      	subs	r4, #4
   dbebc:	6822      	ldr	r2, [r4, #0]
   dbebe:	f000 000f 	and.w	r0, r0, #15
   dbec2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dbec6:	6022      	str	r2, [r4, #0]
   dbec8:	e7b7      	b.n	dbe3a <__hexnan+0x7a>
   dbeca:	2508      	movs	r5, #8
   dbecc:	e7b5      	b.n	dbe3a <__hexnan+0x7a>
   dbece:	9b01      	ldr	r3, [sp, #4]
   dbed0:	2b00      	cmp	r3, #0
   dbed2:	d0df      	beq.n	dbe94 <__hexnan+0xd4>
   dbed4:	f04f 32ff 	mov.w	r2, #4294967295
   dbed8:	f1c3 0320 	rsb	r3, r3, #32
   dbedc:	fa22 f303 	lsr.w	r3, r2, r3
   dbee0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dbee4:	401a      	ands	r2, r3
   dbee6:	f846 2c04 	str.w	r2, [r6, #-4]
   dbeea:	e7d3      	b.n	dbe94 <__hexnan+0xd4>
   dbeec:	3f04      	subs	r7, #4
   dbeee:	e7d1      	b.n	dbe94 <__hexnan+0xd4>
   dbef0:	2004      	movs	r0, #4
   dbef2:	b007      	add	sp, #28
   dbef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbef8 <__ascii_mbtowc>:
   dbef8:	b082      	sub	sp, #8
   dbefa:	b901      	cbnz	r1, dbefe <__ascii_mbtowc+0x6>
   dbefc:	a901      	add	r1, sp, #4
   dbefe:	b142      	cbz	r2, dbf12 <__ascii_mbtowc+0x1a>
   dbf00:	b14b      	cbz	r3, dbf16 <__ascii_mbtowc+0x1e>
   dbf02:	7813      	ldrb	r3, [r2, #0]
   dbf04:	600b      	str	r3, [r1, #0]
   dbf06:	7812      	ldrb	r2, [r2, #0]
   dbf08:	1e10      	subs	r0, r2, #0
   dbf0a:	bf18      	it	ne
   dbf0c:	2001      	movne	r0, #1
   dbf0e:	b002      	add	sp, #8
   dbf10:	4770      	bx	lr
   dbf12:	4610      	mov	r0, r2
   dbf14:	e7fb      	b.n	dbf0e <__ascii_mbtowc+0x16>
   dbf16:	f06f 0001 	mvn.w	r0, #1
   dbf1a:	e7f8      	b.n	dbf0e <__ascii_mbtowc+0x16>

000dbf1c <_Balloc>:
   dbf1c:	b570      	push	{r4, r5, r6, lr}
   dbf1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbf20:	4604      	mov	r4, r0
   dbf22:	460d      	mov	r5, r1
   dbf24:	b93e      	cbnz	r6, dbf36 <_Balloc+0x1a>
   dbf26:	2010      	movs	r0, #16
   dbf28:	f7fa ff10 	bl	d6d4c <malloc>
   dbf2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbf30:	6260      	str	r0, [r4, #36]	; 0x24
   dbf32:	6006      	str	r6, [r0, #0]
   dbf34:	60c6      	str	r6, [r0, #12]
   dbf36:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dbf38:	68f3      	ldr	r3, [r6, #12]
   dbf3a:	b183      	cbz	r3, dbf5e <_Balloc+0x42>
   dbf3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbf3e:	68db      	ldr	r3, [r3, #12]
   dbf40:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dbf44:	b9b8      	cbnz	r0, dbf76 <_Balloc+0x5a>
   dbf46:	2101      	movs	r1, #1
   dbf48:	fa01 f605 	lsl.w	r6, r1, r5
   dbf4c:	1d72      	adds	r2, r6, #5
   dbf4e:	0092      	lsls	r2, r2, #2
   dbf50:	4620      	mov	r0, r4
   dbf52:	f000 fc22 	bl	dc79a <_calloc_r>
   dbf56:	b160      	cbz	r0, dbf72 <_Balloc+0x56>
   dbf58:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dbf5c:	e00e      	b.n	dbf7c <_Balloc+0x60>
   dbf5e:	2221      	movs	r2, #33	; 0x21
   dbf60:	2104      	movs	r1, #4
   dbf62:	4620      	mov	r0, r4
   dbf64:	f000 fc19 	bl	dc79a <_calloc_r>
   dbf68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbf6a:	60f0      	str	r0, [r6, #12]
   dbf6c:	68db      	ldr	r3, [r3, #12]
   dbf6e:	2b00      	cmp	r3, #0
   dbf70:	d1e4      	bne.n	dbf3c <_Balloc+0x20>
   dbf72:	2000      	movs	r0, #0
   dbf74:	bd70      	pop	{r4, r5, r6, pc}
   dbf76:	6802      	ldr	r2, [r0, #0]
   dbf78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dbf7c:	2300      	movs	r3, #0
   dbf7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dbf82:	e7f7      	b.n	dbf74 <_Balloc+0x58>

000dbf84 <_Bfree>:
   dbf84:	b570      	push	{r4, r5, r6, lr}
   dbf86:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbf88:	4605      	mov	r5, r0
   dbf8a:	460c      	mov	r4, r1
   dbf8c:	b93e      	cbnz	r6, dbf9e <_Bfree+0x1a>
   dbf8e:	2010      	movs	r0, #16
   dbf90:	f7fa fedc 	bl	d6d4c <malloc>
   dbf94:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbf98:	6268      	str	r0, [r5, #36]	; 0x24
   dbf9a:	6006      	str	r6, [r0, #0]
   dbf9c:	60c6      	str	r6, [r0, #12]
   dbf9e:	b13c      	cbz	r4, dbfb0 <_Bfree+0x2c>
   dbfa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dbfa2:	6862      	ldr	r2, [r4, #4]
   dbfa4:	68db      	ldr	r3, [r3, #12]
   dbfa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dbfaa:	6021      	str	r1, [r4, #0]
   dbfac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dbfb0:	bd70      	pop	{r4, r5, r6, pc}

000dbfb2 <__multadd>:
   dbfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbfb6:	690e      	ldr	r6, [r1, #16]
   dbfb8:	4607      	mov	r7, r0
   dbfba:	4698      	mov	r8, r3
   dbfbc:	460c      	mov	r4, r1
   dbfbe:	f101 0014 	add.w	r0, r1, #20
   dbfc2:	2300      	movs	r3, #0
   dbfc4:	6805      	ldr	r5, [r0, #0]
   dbfc6:	b2a9      	uxth	r1, r5
   dbfc8:	fb02 8101 	mla	r1, r2, r1, r8
   dbfcc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dbfd0:	0c2d      	lsrs	r5, r5, #16
   dbfd2:	fb02 c505 	mla	r5, r2, r5, ip
   dbfd6:	b289      	uxth	r1, r1
   dbfd8:	3301      	adds	r3, #1
   dbfda:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dbfde:	429e      	cmp	r6, r3
   dbfe0:	f840 1b04 	str.w	r1, [r0], #4
   dbfe4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dbfe8:	dcec      	bgt.n	dbfc4 <__multadd+0x12>
   dbfea:	f1b8 0f00 	cmp.w	r8, #0
   dbfee:	d01b      	beq.n	dc028 <__multadd+0x76>
   dbff0:	68a3      	ldr	r3, [r4, #8]
   dbff2:	42b3      	cmp	r3, r6
   dbff4:	dc12      	bgt.n	dc01c <__multadd+0x6a>
   dbff6:	6861      	ldr	r1, [r4, #4]
   dbff8:	4638      	mov	r0, r7
   dbffa:	3101      	adds	r1, #1
   dbffc:	f7ff ff8e 	bl	dbf1c <_Balloc>
   dc000:	6922      	ldr	r2, [r4, #16]
   dc002:	3202      	adds	r2, #2
   dc004:	f104 010c 	add.w	r1, r4, #12
   dc008:	4605      	mov	r5, r0
   dc00a:	0092      	lsls	r2, r2, #2
   dc00c:	300c      	adds	r0, #12
   dc00e:	f7fe fd2d 	bl	daa6c <memcpy>
   dc012:	4621      	mov	r1, r4
   dc014:	4638      	mov	r0, r7
   dc016:	f7ff ffb5 	bl	dbf84 <_Bfree>
   dc01a:	462c      	mov	r4, r5
   dc01c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc020:	3601      	adds	r6, #1
   dc022:	f8c3 8014 	str.w	r8, [r3, #20]
   dc026:	6126      	str	r6, [r4, #16]
   dc028:	4620      	mov	r0, r4
   dc02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc02e <__s2b>:
   dc02e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc032:	460c      	mov	r4, r1
   dc034:	4615      	mov	r5, r2
   dc036:	461f      	mov	r7, r3
   dc038:	2209      	movs	r2, #9
   dc03a:	3308      	adds	r3, #8
   dc03c:	4606      	mov	r6, r0
   dc03e:	fb93 f3f2 	sdiv	r3, r3, r2
   dc042:	2100      	movs	r1, #0
   dc044:	2201      	movs	r2, #1
   dc046:	429a      	cmp	r2, r3
   dc048:	db20      	blt.n	dc08c <__s2b+0x5e>
   dc04a:	4630      	mov	r0, r6
   dc04c:	f7ff ff66 	bl	dbf1c <_Balloc>
   dc050:	9b08      	ldr	r3, [sp, #32]
   dc052:	6143      	str	r3, [r0, #20]
   dc054:	2d09      	cmp	r5, #9
   dc056:	f04f 0301 	mov.w	r3, #1
   dc05a:	6103      	str	r3, [r0, #16]
   dc05c:	dd19      	ble.n	dc092 <__s2b+0x64>
   dc05e:	f104 0909 	add.w	r9, r4, #9
   dc062:	46c8      	mov	r8, r9
   dc064:	442c      	add	r4, r5
   dc066:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc06a:	4601      	mov	r1, r0
   dc06c:	3b30      	subs	r3, #48	; 0x30
   dc06e:	220a      	movs	r2, #10
   dc070:	4630      	mov	r0, r6
   dc072:	f7ff ff9e 	bl	dbfb2 <__multadd>
   dc076:	45a0      	cmp	r8, r4
   dc078:	d1f5      	bne.n	dc066 <__s2b+0x38>
   dc07a:	f1a5 0408 	sub.w	r4, r5, #8
   dc07e:	444c      	add	r4, r9
   dc080:	1b2d      	subs	r5, r5, r4
   dc082:	1963      	adds	r3, r4, r5
   dc084:	42bb      	cmp	r3, r7
   dc086:	db07      	blt.n	dc098 <__s2b+0x6a>
   dc088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc08c:	0052      	lsls	r2, r2, #1
   dc08e:	3101      	adds	r1, #1
   dc090:	e7d9      	b.n	dc046 <__s2b+0x18>
   dc092:	340a      	adds	r4, #10
   dc094:	2509      	movs	r5, #9
   dc096:	e7f3      	b.n	dc080 <__s2b+0x52>
   dc098:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc09c:	4601      	mov	r1, r0
   dc09e:	3b30      	subs	r3, #48	; 0x30
   dc0a0:	220a      	movs	r2, #10
   dc0a2:	4630      	mov	r0, r6
   dc0a4:	f7ff ff85 	bl	dbfb2 <__multadd>
   dc0a8:	e7eb      	b.n	dc082 <__s2b+0x54>

000dc0aa <__hi0bits>:
   dc0aa:	0c03      	lsrs	r3, r0, #16
   dc0ac:	041b      	lsls	r3, r3, #16
   dc0ae:	b9d3      	cbnz	r3, dc0e6 <__hi0bits+0x3c>
   dc0b0:	0400      	lsls	r0, r0, #16
   dc0b2:	2310      	movs	r3, #16
   dc0b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc0b8:	bf04      	itt	eq
   dc0ba:	0200      	lsleq	r0, r0, #8
   dc0bc:	3308      	addeq	r3, #8
   dc0be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc0c2:	bf04      	itt	eq
   dc0c4:	0100      	lsleq	r0, r0, #4
   dc0c6:	3304      	addeq	r3, #4
   dc0c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc0cc:	bf04      	itt	eq
   dc0ce:	0080      	lsleq	r0, r0, #2
   dc0d0:	3302      	addeq	r3, #2
   dc0d2:	2800      	cmp	r0, #0
   dc0d4:	db05      	blt.n	dc0e2 <__hi0bits+0x38>
   dc0d6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc0da:	f103 0301 	add.w	r3, r3, #1
   dc0de:	bf08      	it	eq
   dc0e0:	2320      	moveq	r3, #32
   dc0e2:	4618      	mov	r0, r3
   dc0e4:	4770      	bx	lr
   dc0e6:	2300      	movs	r3, #0
   dc0e8:	e7e4      	b.n	dc0b4 <__hi0bits+0xa>

000dc0ea <__lo0bits>:
   dc0ea:	6803      	ldr	r3, [r0, #0]
   dc0ec:	f013 0207 	ands.w	r2, r3, #7
   dc0f0:	4601      	mov	r1, r0
   dc0f2:	d00b      	beq.n	dc10c <__lo0bits+0x22>
   dc0f4:	07da      	lsls	r2, r3, #31
   dc0f6:	d424      	bmi.n	dc142 <__lo0bits+0x58>
   dc0f8:	0798      	lsls	r0, r3, #30
   dc0fa:	bf49      	itett	mi
   dc0fc:	085b      	lsrmi	r3, r3, #1
   dc0fe:	089b      	lsrpl	r3, r3, #2
   dc100:	2001      	movmi	r0, #1
   dc102:	600b      	strmi	r3, [r1, #0]
   dc104:	bf5c      	itt	pl
   dc106:	600b      	strpl	r3, [r1, #0]
   dc108:	2002      	movpl	r0, #2
   dc10a:	4770      	bx	lr
   dc10c:	b298      	uxth	r0, r3
   dc10e:	b9b0      	cbnz	r0, dc13e <__lo0bits+0x54>
   dc110:	0c1b      	lsrs	r3, r3, #16
   dc112:	2010      	movs	r0, #16
   dc114:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc118:	bf04      	itt	eq
   dc11a:	0a1b      	lsreq	r3, r3, #8
   dc11c:	3008      	addeq	r0, #8
   dc11e:	071a      	lsls	r2, r3, #28
   dc120:	bf04      	itt	eq
   dc122:	091b      	lsreq	r3, r3, #4
   dc124:	3004      	addeq	r0, #4
   dc126:	079a      	lsls	r2, r3, #30
   dc128:	bf04      	itt	eq
   dc12a:	089b      	lsreq	r3, r3, #2
   dc12c:	3002      	addeq	r0, #2
   dc12e:	07da      	lsls	r2, r3, #31
   dc130:	d403      	bmi.n	dc13a <__lo0bits+0x50>
   dc132:	085b      	lsrs	r3, r3, #1
   dc134:	f100 0001 	add.w	r0, r0, #1
   dc138:	d005      	beq.n	dc146 <__lo0bits+0x5c>
   dc13a:	600b      	str	r3, [r1, #0]
   dc13c:	4770      	bx	lr
   dc13e:	4610      	mov	r0, r2
   dc140:	e7e8      	b.n	dc114 <__lo0bits+0x2a>
   dc142:	2000      	movs	r0, #0
   dc144:	4770      	bx	lr
   dc146:	2020      	movs	r0, #32
   dc148:	4770      	bx	lr

000dc14a <__i2b>:
   dc14a:	b510      	push	{r4, lr}
   dc14c:	460c      	mov	r4, r1
   dc14e:	2101      	movs	r1, #1
   dc150:	f7ff fee4 	bl	dbf1c <_Balloc>
   dc154:	2201      	movs	r2, #1
   dc156:	6144      	str	r4, [r0, #20]
   dc158:	6102      	str	r2, [r0, #16]
   dc15a:	bd10      	pop	{r4, pc}

000dc15c <__multiply>:
   dc15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc160:	4615      	mov	r5, r2
   dc162:	690a      	ldr	r2, [r1, #16]
   dc164:	692b      	ldr	r3, [r5, #16]
   dc166:	429a      	cmp	r2, r3
   dc168:	bfb8      	it	lt
   dc16a:	460b      	movlt	r3, r1
   dc16c:	460c      	mov	r4, r1
   dc16e:	bfbc      	itt	lt
   dc170:	462c      	movlt	r4, r5
   dc172:	461d      	movlt	r5, r3
   dc174:	6927      	ldr	r7, [r4, #16]
   dc176:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc17a:	68a3      	ldr	r3, [r4, #8]
   dc17c:	6861      	ldr	r1, [r4, #4]
   dc17e:	eb07 0609 	add.w	r6, r7, r9
   dc182:	42b3      	cmp	r3, r6
   dc184:	bfb8      	it	lt
   dc186:	3101      	addlt	r1, #1
   dc188:	b085      	sub	sp, #20
   dc18a:	f7ff fec7 	bl	dbf1c <_Balloc>
   dc18e:	f100 0114 	add.w	r1, r0, #20
   dc192:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc196:	460b      	mov	r3, r1
   dc198:	2200      	movs	r2, #0
   dc19a:	4543      	cmp	r3, r8
   dc19c:	d31d      	bcc.n	dc1da <__multiply+0x7e>
   dc19e:	f104 0314 	add.w	r3, r4, #20
   dc1a2:	f105 0214 	add.w	r2, r5, #20
   dc1a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc1aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc1ae:	9302      	str	r3, [sp, #8]
   dc1b0:	1b3b      	subs	r3, r7, r4
   dc1b2:	3b15      	subs	r3, #21
   dc1b4:	f023 0303 	bic.w	r3, r3, #3
   dc1b8:	3304      	adds	r3, #4
   dc1ba:	f104 0515 	add.w	r5, r4, #21
   dc1be:	42af      	cmp	r7, r5
   dc1c0:	bf38      	it	cc
   dc1c2:	2304      	movcc	r3, #4
   dc1c4:	9301      	str	r3, [sp, #4]
   dc1c6:	9b02      	ldr	r3, [sp, #8]
   dc1c8:	9203      	str	r2, [sp, #12]
   dc1ca:	4293      	cmp	r3, r2
   dc1cc:	d808      	bhi.n	dc1e0 <__multiply+0x84>
   dc1ce:	2e00      	cmp	r6, #0
   dc1d0:	dc5a      	bgt.n	dc288 <__multiply+0x12c>
   dc1d2:	6106      	str	r6, [r0, #16]
   dc1d4:	b005      	add	sp, #20
   dc1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc1da:	f843 2b04 	str.w	r2, [r3], #4
   dc1de:	e7dc      	b.n	dc19a <__multiply+0x3e>
   dc1e0:	f8b2 a000 	ldrh.w	sl, [r2]
   dc1e4:	f1ba 0f00 	cmp.w	sl, #0
   dc1e8:	d024      	beq.n	dc234 <__multiply+0xd8>
   dc1ea:	f104 0e14 	add.w	lr, r4, #20
   dc1ee:	4689      	mov	r9, r1
   dc1f0:	f04f 0c00 	mov.w	ip, #0
   dc1f4:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc1f8:	f8d9 b000 	ldr.w	fp, [r9]
   dc1fc:	b2ab      	uxth	r3, r5
   dc1fe:	fa1f fb8b 	uxth.w	fp, fp
   dc202:	fb0a b303 	mla	r3, sl, r3, fp
   dc206:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc20a:	f8d9 5000 	ldr.w	r5, [r9]
   dc20e:	4463      	add	r3, ip
   dc210:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc214:	fb0a c50b 	mla	r5, sl, fp, ip
   dc218:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc21c:	b29b      	uxth	r3, r3
   dc21e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc222:	4577      	cmp	r7, lr
   dc224:	f849 3b04 	str.w	r3, [r9], #4
   dc228:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc22c:	d8e2      	bhi.n	dc1f4 <__multiply+0x98>
   dc22e:	9b01      	ldr	r3, [sp, #4]
   dc230:	f841 c003 	str.w	ip, [r1, r3]
   dc234:	9b03      	ldr	r3, [sp, #12]
   dc236:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc23a:	3204      	adds	r2, #4
   dc23c:	f1b9 0f00 	cmp.w	r9, #0
   dc240:	d020      	beq.n	dc284 <__multiply+0x128>
   dc242:	680b      	ldr	r3, [r1, #0]
   dc244:	f104 0c14 	add.w	ip, r4, #20
   dc248:	468e      	mov	lr, r1
   dc24a:	f04f 0a00 	mov.w	sl, #0
   dc24e:	f8bc 5000 	ldrh.w	r5, [ip]
   dc252:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc256:	fb09 b505 	mla	r5, r9, r5, fp
   dc25a:	44aa      	add	sl, r5
   dc25c:	b29b      	uxth	r3, r3
   dc25e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc262:	f84e 3b04 	str.w	r3, [lr], #4
   dc266:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc26a:	f8be 5000 	ldrh.w	r5, [lr]
   dc26e:	0c1b      	lsrs	r3, r3, #16
   dc270:	fb09 5303 	mla	r3, r9, r3, r5
   dc274:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc278:	4567      	cmp	r7, ip
   dc27a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc27e:	d8e6      	bhi.n	dc24e <__multiply+0xf2>
   dc280:	9d01      	ldr	r5, [sp, #4]
   dc282:	514b      	str	r3, [r1, r5]
   dc284:	3104      	adds	r1, #4
   dc286:	e79e      	b.n	dc1c6 <__multiply+0x6a>
   dc288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc28c:	2b00      	cmp	r3, #0
   dc28e:	d1a0      	bne.n	dc1d2 <__multiply+0x76>
   dc290:	3e01      	subs	r6, #1
   dc292:	e79c      	b.n	dc1ce <__multiply+0x72>

000dc294 <__pow5mult>:
   dc294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc298:	4615      	mov	r5, r2
   dc29a:	f012 0203 	ands.w	r2, r2, #3
   dc29e:	4606      	mov	r6, r0
   dc2a0:	460f      	mov	r7, r1
   dc2a2:	d007      	beq.n	dc2b4 <__pow5mult+0x20>
   dc2a4:	4c21      	ldr	r4, [pc, #132]	; (dc32c <__pow5mult+0x98>)
   dc2a6:	3a01      	subs	r2, #1
   dc2a8:	2300      	movs	r3, #0
   dc2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc2ae:	f7ff fe80 	bl	dbfb2 <__multadd>
   dc2b2:	4607      	mov	r7, r0
   dc2b4:	10ad      	asrs	r5, r5, #2
   dc2b6:	d035      	beq.n	dc324 <__pow5mult+0x90>
   dc2b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc2ba:	b93c      	cbnz	r4, dc2cc <__pow5mult+0x38>
   dc2bc:	2010      	movs	r0, #16
   dc2be:	f7fa fd45 	bl	d6d4c <malloc>
   dc2c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc2c6:	6270      	str	r0, [r6, #36]	; 0x24
   dc2c8:	6004      	str	r4, [r0, #0]
   dc2ca:	60c4      	str	r4, [r0, #12]
   dc2cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc2d4:	b94c      	cbnz	r4, dc2ea <__pow5mult+0x56>
   dc2d6:	f240 2171 	movw	r1, #625	; 0x271
   dc2da:	4630      	mov	r0, r6
   dc2dc:	f7ff ff35 	bl	dc14a <__i2b>
   dc2e0:	2300      	movs	r3, #0
   dc2e2:	f8c8 0008 	str.w	r0, [r8, #8]
   dc2e6:	4604      	mov	r4, r0
   dc2e8:	6003      	str	r3, [r0, #0]
   dc2ea:	f04f 0900 	mov.w	r9, #0
   dc2ee:	07eb      	lsls	r3, r5, #31
   dc2f0:	d50a      	bpl.n	dc308 <__pow5mult+0x74>
   dc2f2:	4639      	mov	r1, r7
   dc2f4:	4622      	mov	r2, r4
   dc2f6:	4630      	mov	r0, r6
   dc2f8:	f7ff ff30 	bl	dc15c <__multiply>
   dc2fc:	4639      	mov	r1, r7
   dc2fe:	4680      	mov	r8, r0
   dc300:	4630      	mov	r0, r6
   dc302:	f7ff fe3f 	bl	dbf84 <_Bfree>
   dc306:	4647      	mov	r7, r8
   dc308:	106d      	asrs	r5, r5, #1
   dc30a:	d00b      	beq.n	dc324 <__pow5mult+0x90>
   dc30c:	6820      	ldr	r0, [r4, #0]
   dc30e:	b938      	cbnz	r0, dc320 <__pow5mult+0x8c>
   dc310:	4622      	mov	r2, r4
   dc312:	4621      	mov	r1, r4
   dc314:	4630      	mov	r0, r6
   dc316:	f7ff ff21 	bl	dc15c <__multiply>
   dc31a:	6020      	str	r0, [r4, #0]
   dc31c:	f8c0 9000 	str.w	r9, [r0]
   dc320:	4604      	mov	r4, r0
   dc322:	e7e4      	b.n	dc2ee <__pow5mult+0x5a>
   dc324:	4638      	mov	r0, r7
   dc326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc32a:	bf00      	nop
   dc32c:	000dda68 	.word	0x000dda68

000dc330 <__lshift>:
   dc330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc334:	460c      	mov	r4, r1
   dc336:	6849      	ldr	r1, [r1, #4]
   dc338:	6923      	ldr	r3, [r4, #16]
   dc33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc33e:	68a3      	ldr	r3, [r4, #8]
   dc340:	4607      	mov	r7, r0
   dc342:	4691      	mov	r9, r2
   dc344:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc348:	f108 0601 	add.w	r6, r8, #1
   dc34c:	42b3      	cmp	r3, r6
   dc34e:	db3f      	blt.n	dc3d0 <__lshift+0xa0>
   dc350:	4638      	mov	r0, r7
   dc352:	f7ff fde3 	bl	dbf1c <_Balloc>
   dc356:	2300      	movs	r3, #0
   dc358:	4605      	mov	r5, r0
   dc35a:	f100 0114 	add.w	r1, r0, #20
   dc35e:	f100 0210 	add.w	r2, r0, #16
   dc362:	4618      	mov	r0, r3
   dc364:	4553      	cmp	r3, sl
   dc366:	db36      	blt.n	dc3d6 <__lshift+0xa6>
   dc368:	6920      	ldr	r0, [r4, #16]
   dc36a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc36e:	f104 0314 	add.w	r3, r4, #20
   dc372:	f019 091f 	ands.w	r9, r9, #31
   dc376:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc37a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc37e:	d02e      	beq.n	dc3de <__lshift+0xae>
   dc380:	f1c9 0e20 	rsb	lr, r9, #32
   dc384:	468a      	mov	sl, r1
   dc386:	2200      	movs	r2, #0
   dc388:	6818      	ldr	r0, [r3, #0]
   dc38a:	fa00 f009 	lsl.w	r0, r0, r9
   dc38e:	4302      	orrs	r2, r0
   dc390:	f84a 2b04 	str.w	r2, [sl], #4
   dc394:	f853 2b04 	ldr.w	r2, [r3], #4
   dc398:	459c      	cmp	ip, r3
   dc39a:	fa22 f20e 	lsr.w	r2, r2, lr
   dc39e:	d8f3      	bhi.n	dc388 <__lshift+0x58>
   dc3a0:	ebac 0304 	sub.w	r3, ip, r4
   dc3a4:	3b15      	subs	r3, #21
   dc3a6:	f023 0303 	bic.w	r3, r3, #3
   dc3aa:	3304      	adds	r3, #4
   dc3ac:	f104 0015 	add.w	r0, r4, #21
   dc3b0:	4560      	cmp	r0, ip
   dc3b2:	bf88      	it	hi
   dc3b4:	2304      	movhi	r3, #4
   dc3b6:	50ca      	str	r2, [r1, r3]
   dc3b8:	b10a      	cbz	r2, dc3be <__lshift+0x8e>
   dc3ba:	f108 0602 	add.w	r6, r8, #2
   dc3be:	3e01      	subs	r6, #1
   dc3c0:	4638      	mov	r0, r7
   dc3c2:	612e      	str	r6, [r5, #16]
   dc3c4:	4621      	mov	r1, r4
   dc3c6:	f7ff fddd 	bl	dbf84 <_Bfree>
   dc3ca:	4628      	mov	r0, r5
   dc3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc3d0:	3101      	adds	r1, #1
   dc3d2:	005b      	lsls	r3, r3, #1
   dc3d4:	e7ba      	b.n	dc34c <__lshift+0x1c>
   dc3d6:	f842 0f04 	str.w	r0, [r2, #4]!
   dc3da:	3301      	adds	r3, #1
   dc3dc:	e7c2      	b.n	dc364 <__lshift+0x34>
   dc3de:	3904      	subs	r1, #4
   dc3e0:	f853 2b04 	ldr.w	r2, [r3], #4
   dc3e4:	f841 2f04 	str.w	r2, [r1, #4]!
   dc3e8:	459c      	cmp	ip, r3
   dc3ea:	d8f9      	bhi.n	dc3e0 <__lshift+0xb0>
   dc3ec:	e7e7      	b.n	dc3be <__lshift+0x8e>

000dc3ee <__mcmp>:
   dc3ee:	b530      	push	{r4, r5, lr}
   dc3f0:	6902      	ldr	r2, [r0, #16]
   dc3f2:	690c      	ldr	r4, [r1, #16]
   dc3f4:	1b12      	subs	r2, r2, r4
   dc3f6:	d10e      	bne.n	dc416 <__mcmp+0x28>
   dc3f8:	f100 0314 	add.w	r3, r0, #20
   dc3fc:	3114      	adds	r1, #20
   dc3fe:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc402:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc406:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc40a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc40e:	42a5      	cmp	r5, r4
   dc410:	d003      	beq.n	dc41a <__mcmp+0x2c>
   dc412:	d305      	bcc.n	dc420 <__mcmp+0x32>
   dc414:	2201      	movs	r2, #1
   dc416:	4610      	mov	r0, r2
   dc418:	bd30      	pop	{r4, r5, pc}
   dc41a:	4283      	cmp	r3, r0
   dc41c:	d3f3      	bcc.n	dc406 <__mcmp+0x18>
   dc41e:	e7fa      	b.n	dc416 <__mcmp+0x28>
   dc420:	f04f 32ff 	mov.w	r2, #4294967295
   dc424:	e7f7      	b.n	dc416 <__mcmp+0x28>

000dc426 <__mdiff>:
   dc426:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc42a:	460c      	mov	r4, r1
   dc42c:	4606      	mov	r6, r0
   dc42e:	4611      	mov	r1, r2
   dc430:	4620      	mov	r0, r4
   dc432:	4617      	mov	r7, r2
   dc434:	f7ff ffdb 	bl	dc3ee <__mcmp>
   dc438:	1e05      	subs	r5, r0, #0
   dc43a:	d108      	bne.n	dc44e <__mdiff+0x28>
   dc43c:	4629      	mov	r1, r5
   dc43e:	4630      	mov	r0, r6
   dc440:	f7ff fd6c 	bl	dbf1c <_Balloc>
   dc444:	2301      	movs	r3, #1
   dc446:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc44a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc44e:	bfa4      	itt	ge
   dc450:	463b      	movge	r3, r7
   dc452:	4627      	movge	r7, r4
   dc454:	4630      	mov	r0, r6
   dc456:	6879      	ldr	r1, [r7, #4]
   dc458:	bfa6      	itte	ge
   dc45a:	461c      	movge	r4, r3
   dc45c:	2500      	movge	r5, #0
   dc45e:	2501      	movlt	r5, #1
   dc460:	f7ff fd5c 	bl	dbf1c <_Balloc>
   dc464:	693e      	ldr	r6, [r7, #16]
   dc466:	60c5      	str	r5, [r0, #12]
   dc468:	6925      	ldr	r5, [r4, #16]
   dc46a:	f107 0114 	add.w	r1, r7, #20
   dc46e:	f104 0914 	add.w	r9, r4, #20
   dc472:	f100 0e14 	add.w	lr, r0, #20
   dc476:	f107 0210 	add.w	r2, r7, #16
   dc47a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc47e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc482:	46f2      	mov	sl, lr
   dc484:	2700      	movs	r7, #0
   dc486:	f859 3b04 	ldr.w	r3, [r9], #4
   dc48a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc48e:	fa1f f883 	uxth.w	r8, r3
   dc492:	fa17 f78b 	uxtah	r7, r7, fp
   dc496:	0c1b      	lsrs	r3, r3, #16
   dc498:	eba7 0808 	sub.w	r8, r7, r8
   dc49c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc4a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc4a4:	fa1f f888 	uxth.w	r8, r8
   dc4a8:	141f      	asrs	r7, r3, #16
   dc4aa:	454d      	cmp	r5, r9
   dc4ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc4b0:	f84a 3b04 	str.w	r3, [sl], #4
   dc4b4:	d8e7      	bhi.n	dc486 <__mdiff+0x60>
   dc4b6:	1b2b      	subs	r3, r5, r4
   dc4b8:	3b15      	subs	r3, #21
   dc4ba:	f023 0303 	bic.w	r3, r3, #3
   dc4be:	3304      	adds	r3, #4
   dc4c0:	3415      	adds	r4, #21
   dc4c2:	42a5      	cmp	r5, r4
   dc4c4:	bf38      	it	cc
   dc4c6:	2304      	movcc	r3, #4
   dc4c8:	4419      	add	r1, r3
   dc4ca:	4473      	add	r3, lr
   dc4cc:	469e      	mov	lr, r3
   dc4ce:	460d      	mov	r5, r1
   dc4d0:	4565      	cmp	r5, ip
   dc4d2:	d30e      	bcc.n	dc4f2 <__mdiff+0xcc>
   dc4d4:	f10c 0203 	add.w	r2, ip, #3
   dc4d8:	1a52      	subs	r2, r2, r1
   dc4da:	f022 0203 	bic.w	r2, r2, #3
   dc4de:	3903      	subs	r1, #3
   dc4e0:	458c      	cmp	ip, r1
   dc4e2:	bf38      	it	cc
   dc4e4:	2200      	movcc	r2, #0
   dc4e6:	441a      	add	r2, r3
   dc4e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc4ec:	b17b      	cbz	r3, dc50e <__mdiff+0xe8>
   dc4ee:	6106      	str	r6, [r0, #16]
   dc4f0:	e7ab      	b.n	dc44a <__mdiff+0x24>
   dc4f2:	f855 8b04 	ldr.w	r8, [r5], #4
   dc4f6:	fa17 f488 	uxtah	r4, r7, r8
   dc4fa:	1422      	asrs	r2, r4, #16
   dc4fc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc500:	b2a4      	uxth	r4, r4
   dc502:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc506:	f84e 4b04 	str.w	r4, [lr], #4
   dc50a:	1417      	asrs	r7, r2, #16
   dc50c:	e7e0      	b.n	dc4d0 <__mdiff+0xaa>
   dc50e:	3e01      	subs	r6, #1
   dc510:	e7ea      	b.n	dc4e8 <__mdiff+0xc2>
	...

000dc514 <__ulp>:
   dc514:	b082      	sub	sp, #8
   dc516:	ed8d 0b00 	vstr	d0, [sp]
   dc51a:	9b01      	ldr	r3, [sp, #4]
   dc51c:	4912      	ldr	r1, [pc, #72]	; (dc568 <__ulp+0x54>)
   dc51e:	4019      	ands	r1, r3
   dc520:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc524:	2900      	cmp	r1, #0
   dc526:	dd05      	ble.n	dc534 <__ulp+0x20>
   dc528:	2200      	movs	r2, #0
   dc52a:	460b      	mov	r3, r1
   dc52c:	ec43 2b10 	vmov	d0, r2, r3
   dc530:	b002      	add	sp, #8
   dc532:	4770      	bx	lr
   dc534:	4249      	negs	r1, r1
   dc536:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc53a:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc53e:	f04f 0200 	mov.w	r2, #0
   dc542:	f04f 0300 	mov.w	r3, #0
   dc546:	da04      	bge.n	dc552 <__ulp+0x3e>
   dc548:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc54c:	fa41 f300 	asr.w	r3, r1, r0
   dc550:	e7ec      	b.n	dc52c <__ulp+0x18>
   dc552:	f1a0 0114 	sub.w	r1, r0, #20
   dc556:	291e      	cmp	r1, #30
   dc558:	bfda      	itte	le
   dc55a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc55e:	fa20 f101 	lsrle.w	r1, r0, r1
   dc562:	2101      	movgt	r1, #1
   dc564:	460a      	mov	r2, r1
   dc566:	e7e1      	b.n	dc52c <__ulp+0x18>
   dc568:	7ff00000 	.word	0x7ff00000

000dc56c <__b2d>:
   dc56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc56e:	6905      	ldr	r5, [r0, #16]
   dc570:	f100 0714 	add.w	r7, r0, #20
   dc574:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc578:	1f2e      	subs	r6, r5, #4
   dc57a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc57e:	4620      	mov	r0, r4
   dc580:	f7ff fd93 	bl	dc0aa <__hi0bits>
   dc584:	f1c0 0320 	rsb	r3, r0, #32
   dc588:	280a      	cmp	r0, #10
   dc58a:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc608 <__b2d+0x9c>
   dc58e:	600b      	str	r3, [r1, #0]
   dc590:	dc14      	bgt.n	dc5bc <__b2d+0x50>
   dc592:	f1c0 0e0b 	rsb	lr, r0, #11
   dc596:	fa24 f10e 	lsr.w	r1, r4, lr
   dc59a:	42b7      	cmp	r7, r6
   dc59c:	ea41 030c 	orr.w	r3, r1, ip
   dc5a0:	bf34      	ite	cc
   dc5a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc5a6:	2100      	movcs	r1, #0
   dc5a8:	3015      	adds	r0, #21
   dc5aa:	fa04 f000 	lsl.w	r0, r4, r0
   dc5ae:	fa21 f10e 	lsr.w	r1, r1, lr
   dc5b2:	ea40 0201 	orr.w	r2, r0, r1
   dc5b6:	ec43 2b10 	vmov	d0, r2, r3
   dc5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc5bc:	42b7      	cmp	r7, r6
   dc5be:	bf3a      	itte	cc
   dc5c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc5c4:	f1a5 0608 	subcc.w	r6, r5, #8
   dc5c8:	2100      	movcs	r1, #0
   dc5ca:	380b      	subs	r0, #11
   dc5cc:	d017      	beq.n	dc5fe <__b2d+0x92>
   dc5ce:	f1c0 0c20 	rsb	ip, r0, #32
   dc5d2:	fa04 f500 	lsl.w	r5, r4, r0
   dc5d6:	42be      	cmp	r6, r7
   dc5d8:	fa21 f40c 	lsr.w	r4, r1, ip
   dc5dc:	ea45 0504 	orr.w	r5, r5, r4
   dc5e0:	bf8c      	ite	hi
   dc5e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc5e6:	2400      	movls	r4, #0
   dc5e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc5ec:	fa01 f000 	lsl.w	r0, r1, r0
   dc5f0:	fa24 f40c 	lsr.w	r4, r4, ip
   dc5f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc5f8:	ea40 0204 	orr.w	r2, r0, r4
   dc5fc:	e7db      	b.n	dc5b6 <__b2d+0x4a>
   dc5fe:	ea44 030c 	orr.w	r3, r4, ip
   dc602:	460a      	mov	r2, r1
   dc604:	e7d7      	b.n	dc5b6 <__b2d+0x4a>
   dc606:	bf00      	nop
   dc608:	3ff00000 	.word	0x3ff00000

000dc60c <__d2b>:
   dc60c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc610:	4689      	mov	r9, r1
   dc612:	2101      	movs	r1, #1
   dc614:	ec57 6b10 	vmov	r6, r7, d0
   dc618:	4690      	mov	r8, r2
   dc61a:	f7ff fc7f 	bl	dbf1c <_Balloc>
   dc61e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc622:	4604      	mov	r4, r0
   dc624:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc628:	bb35      	cbnz	r5, dc678 <__d2b+0x6c>
   dc62a:	2e00      	cmp	r6, #0
   dc62c:	9301      	str	r3, [sp, #4]
   dc62e:	d028      	beq.n	dc682 <__d2b+0x76>
   dc630:	4668      	mov	r0, sp
   dc632:	9600      	str	r6, [sp, #0]
   dc634:	f7ff fd59 	bl	dc0ea <__lo0bits>
   dc638:	9900      	ldr	r1, [sp, #0]
   dc63a:	b300      	cbz	r0, dc67e <__d2b+0x72>
   dc63c:	9a01      	ldr	r2, [sp, #4]
   dc63e:	f1c0 0320 	rsb	r3, r0, #32
   dc642:	fa02 f303 	lsl.w	r3, r2, r3
   dc646:	430b      	orrs	r3, r1
   dc648:	40c2      	lsrs	r2, r0
   dc64a:	6163      	str	r3, [r4, #20]
   dc64c:	9201      	str	r2, [sp, #4]
   dc64e:	9b01      	ldr	r3, [sp, #4]
   dc650:	61a3      	str	r3, [r4, #24]
   dc652:	2b00      	cmp	r3, #0
   dc654:	bf14      	ite	ne
   dc656:	2202      	movne	r2, #2
   dc658:	2201      	moveq	r2, #1
   dc65a:	6122      	str	r2, [r4, #16]
   dc65c:	b1d5      	cbz	r5, dc694 <__d2b+0x88>
   dc65e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc662:	4405      	add	r5, r0
   dc664:	f8c9 5000 	str.w	r5, [r9]
   dc668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc66c:	f8c8 0000 	str.w	r0, [r8]
   dc670:	4620      	mov	r0, r4
   dc672:	b003      	add	sp, #12
   dc674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc67c:	e7d5      	b.n	dc62a <__d2b+0x1e>
   dc67e:	6161      	str	r1, [r4, #20]
   dc680:	e7e5      	b.n	dc64e <__d2b+0x42>
   dc682:	a801      	add	r0, sp, #4
   dc684:	f7ff fd31 	bl	dc0ea <__lo0bits>
   dc688:	9b01      	ldr	r3, [sp, #4]
   dc68a:	6163      	str	r3, [r4, #20]
   dc68c:	2201      	movs	r2, #1
   dc68e:	6122      	str	r2, [r4, #16]
   dc690:	3020      	adds	r0, #32
   dc692:	e7e3      	b.n	dc65c <__d2b+0x50>
   dc694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dc698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dc69c:	f8c9 0000 	str.w	r0, [r9]
   dc6a0:	6918      	ldr	r0, [r3, #16]
   dc6a2:	f7ff fd02 	bl	dc0aa <__hi0bits>
   dc6a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dc6aa:	e7df      	b.n	dc66c <__d2b+0x60>

000dc6ac <__ratio>:
   dc6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6b0:	4688      	mov	r8, r1
   dc6b2:	4669      	mov	r1, sp
   dc6b4:	4681      	mov	r9, r0
   dc6b6:	f7ff ff59 	bl	dc56c <__b2d>
   dc6ba:	a901      	add	r1, sp, #4
   dc6bc:	4640      	mov	r0, r8
   dc6be:	ec55 4b10 	vmov	r4, r5, d0
   dc6c2:	f7ff ff53 	bl	dc56c <__b2d>
   dc6c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dc6ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dc6ce:	eba3 0c02 	sub.w	ip, r3, r2
   dc6d2:	e9dd 3200 	ldrd	r3, r2, [sp]
   dc6d6:	1a9b      	subs	r3, r3, r2
   dc6d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dc6dc:	ec51 0b10 	vmov	r0, r1, d0
   dc6e0:	2b00      	cmp	r3, #0
   dc6e2:	bfd6      	itet	le
   dc6e4:	460a      	movle	r2, r1
   dc6e6:	462a      	movgt	r2, r5
   dc6e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dc6ec:	468b      	mov	fp, r1
   dc6ee:	462f      	mov	r7, r5
   dc6f0:	bfd4      	ite	le
   dc6f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dc6f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dc6fa:	4620      	mov	r0, r4
   dc6fc:	ee10 2a10 	vmov	r2, s0
   dc700:	465b      	mov	r3, fp
   dc702:	4639      	mov	r1, r7
   dc704:	f7fd fc5c 	bl	d9fc0 <__aeabi_ddiv>
   dc708:	ec41 0b10 	vmov	d0, r0, r1
   dc70c:	b003      	add	sp, #12
   dc70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc712 <__copybits>:
   dc712:	3901      	subs	r1, #1
   dc714:	b570      	push	{r4, r5, r6, lr}
   dc716:	1149      	asrs	r1, r1, #5
   dc718:	6914      	ldr	r4, [r2, #16]
   dc71a:	3101      	adds	r1, #1
   dc71c:	f102 0314 	add.w	r3, r2, #20
   dc720:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dc724:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dc728:	1f05      	subs	r5, r0, #4
   dc72a:	42a3      	cmp	r3, r4
   dc72c:	d30c      	bcc.n	dc748 <__copybits+0x36>
   dc72e:	1aa3      	subs	r3, r4, r2
   dc730:	3b11      	subs	r3, #17
   dc732:	f023 0303 	bic.w	r3, r3, #3
   dc736:	3211      	adds	r2, #17
   dc738:	42a2      	cmp	r2, r4
   dc73a:	bf88      	it	hi
   dc73c:	2300      	movhi	r3, #0
   dc73e:	4418      	add	r0, r3
   dc740:	2300      	movs	r3, #0
   dc742:	4288      	cmp	r0, r1
   dc744:	d305      	bcc.n	dc752 <__copybits+0x40>
   dc746:	bd70      	pop	{r4, r5, r6, pc}
   dc748:	f853 6b04 	ldr.w	r6, [r3], #4
   dc74c:	f845 6f04 	str.w	r6, [r5, #4]!
   dc750:	e7eb      	b.n	dc72a <__copybits+0x18>
   dc752:	f840 3b04 	str.w	r3, [r0], #4
   dc756:	e7f4      	b.n	dc742 <__copybits+0x30>

000dc758 <__any_on>:
   dc758:	f100 0214 	add.w	r2, r0, #20
   dc75c:	6900      	ldr	r0, [r0, #16]
   dc75e:	114b      	asrs	r3, r1, #5
   dc760:	4298      	cmp	r0, r3
   dc762:	b510      	push	{r4, lr}
   dc764:	db11      	blt.n	dc78a <__any_on+0x32>
   dc766:	dd0a      	ble.n	dc77e <__any_on+0x26>
   dc768:	f011 011f 	ands.w	r1, r1, #31
   dc76c:	d007      	beq.n	dc77e <__any_on+0x26>
   dc76e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dc772:	fa24 f001 	lsr.w	r0, r4, r1
   dc776:	fa00 f101 	lsl.w	r1, r0, r1
   dc77a:	428c      	cmp	r4, r1
   dc77c:	d10b      	bne.n	dc796 <__any_on+0x3e>
   dc77e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc782:	4293      	cmp	r3, r2
   dc784:	d803      	bhi.n	dc78e <__any_on+0x36>
   dc786:	2000      	movs	r0, #0
   dc788:	bd10      	pop	{r4, pc}
   dc78a:	4603      	mov	r3, r0
   dc78c:	e7f7      	b.n	dc77e <__any_on+0x26>
   dc78e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dc792:	2900      	cmp	r1, #0
   dc794:	d0f5      	beq.n	dc782 <__any_on+0x2a>
   dc796:	2001      	movs	r0, #1
   dc798:	e7f6      	b.n	dc788 <__any_on+0x30>

000dc79a <_calloc_r>:
   dc79a:	b513      	push	{r0, r1, r4, lr}
   dc79c:	434a      	muls	r2, r1
   dc79e:	4611      	mov	r1, r2
   dc7a0:	9201      	str	r2, [sp, #4]
   dc7a2:	f7fa fb03 	bl	d6dac <_malloc_r>
   dc7a6:	4604      	mov	r4, r0
   dc7a8:	b118      	cbz	r0, dc7b2 <_calloc_r+0x18>
   dc7aa:	9a01      	ldr	r2, [sp, #4]
   dc7ac:	2100      	movs	r1, #0
   dc7ae:	f7fe f985 	bl	daabc <memset>
   dc7b2:	4620      	mov	r0, r4
   dc7b4:	b002      	add	sp, #8
   dc7b6:	bd10      	pop	{r4, pc}

000dc7b8 <__ascii_wctomb>:
   dc7b8:	b149      	cbz	r1, dc7ce <__ascii_wctomb+0x16>
   dc7ba:	2aff      	cmp	r2, #255	; 0xff
   dc7bc:	bf85      	ittet	hi
   dc7be:	238a      	movhi	r3, #138	; 0x8a
   dc7c0:	6003      	strhi	r3, [r0, #0]
   dc7c2:	700a      	strbls	r2, [r1, #0]
   dc7c4:	f04f 30ff 	movhi.w	r0, #4294967295
   dc7c8:	bf98      	it	ls
   dc7ca:	2001      	movls	r0, #1
   dc7cc:	4770      	bx	lr
   dc7ce:	4608      	mov	r0, r1
   dc7d0:	4770      	bx	lr
	...

000dc7d4 <__aeabi_d2lz>:
   dc7d4:	b538      	push	{r3, r4, r5, lr}
   dc7d6:	2200      	movs	r2, #0
   dc7d8:	2300      	movs	r3, #0
   dc7da:	4604      	mov	r4, r0
   dc7dc:	460d      	mov	r5, r1
   dc7de:	f7fd fd37 	bl	da250 <__aeabi_dcmplt>
   dc7e2:	b928      	cbnz	r0, dc7f0 <__aeabi_d2lz+0x1c>
   dc7e4:	4620      	mov	r0, r4
   dc7e6:	4629      	mov	r1, r5
   dc7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc7ec:	f7fd bf70 	b.w	da6d0 <__aeabi_d2ulz>
   dc7f0:	4620      	mov	r0, r4
   dc7f2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dc7f6:	f7fd ff6b 	bl	da6d0 <__aeabi_d2ulz>
   dc7fa:	4240      	negs	r0, r0
   dc7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc800:	bd38      	pop	{r3, r4, r5, pc}
   dc802:	bf00      	nop

000dc804 <dynalib_user>:
   dc804:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc814:	0000 0000 4d42 3245 3038 7420 7365 0074     ....BME280 test.
   dc824:	6f43 6c75 2064 6f6e 2074 6966 646e 6120     Could not find a
   dc834:	7620 6c61 6469 4220 454d 3832 2030 6573      valid BME280 se
   dc844:	736e 726f 202c 6863 6365 206b 6977 6972     nsor, check wiri
   dc854:	676e 202c 6461 7264 7365 2c73 7320 6e65     ng, address, sen
   dc864:	6f73 2072 4449 0021 6553 736e 726f 4449     sor ID!.SensorID
   dc874:	7720 7361 203a 7830 2000 2020 2020 2020      was: 0x.       
   dc884:	4920 2044 666f 3020 4678 2046 7270 626f      ID of 0xFF prob
   dc894:	6261 796c 6d20 6165 736e 6120 6220 6461     ably means a bad
   dc8a4:	6120 6464 6572 7373 202c 2061 4d42 2050      address, a BMP 
   dc8b4:	3831 2030 726f 4220 504d 3020 3538 000a     180 or BMP 085..
   dc8c4:	2020 4920 2044 666f 3020 3578 2d36 7830        ID of 0x56-0x
   dc8d4:	3835 7220 7065 6572 6573 746e 2073 2061     58 represents a 
   dc8e4:	4d42 2050 3832 2c30 000a 2020 2020 2020     BMP 280,..      
   dc8f4:	2020 4449 6f20 2066 7830 3036 7220 7065       ID of 0x60 rep
   dc904:	6572 6573 746e 2073 2061 4d42 2045 3832     resents a BME 28
   dc914:	2e30 000a 2020 2020 2020 2020 4449 6f20     0...        ID o
   dc924:	2066 7830 3136 7220 7065 6572 6573 746e     f 0x61 represent
   dc934:	2073 2061 4d42 2045 3836 2e30 000a 2d2d     s a BME 680...--
   dc944:	4420 6665 7561 746c 5420 7365 2074 2d2d      Default Test --
   dc954:	4300 6e6f 656e 7463 6e69 2067 6f74 4920     .Connecting to I
   dc964:	746e 7265 656e 2074 000a 200a 6f43 6e6e     nternet ... Conn
   dc974:	6365 6574 2164 2121 2121 2021 000a 414d     ected!!!!!! ..MA
   dc984:	454a 5453 4349 200a 2020 2f49 004f 2a2a     JESTIC.   I/O.**
   dc994:	2a2a 532a 414d 5452 5020 544f 2a2a 2a2a     ***SMART POT****
   dc9a4:	2a2a 0a0a 7325 2520 0a69 3025 312e 2066     **..%s %i.%0.1f 
   dc9b4:	0a43 7548 696d 6964 7974 2520 2e30 6631     C.Humidity %0.1f
   dc9c4:	6325 250a 0a73 7544 7473 6c20 7665 6c65     %c.%s.Dust level
   dc9d4:	2520 2e30 3230 0a66 6954 656d 6920 2073      %0.02f.Time is 
   dc9e4:	7325 4300 6e6f 656e 7463 6e69 2067 6f74     %s.Connecting to
   dc9f4:	4d20 5451 2e54 2e2e 0020 6552 7274 6979      MQTT... .Retryi
   dca04:	676e 4d20 5451 2054 6f63 6e6e 6365 6974     ng MQTT connecti
   dca14:	6e6f 6920 206e 2035 6573 6f63 646e 2e73     on in 5 seconds.
   dca24:	2e2e 4d00 5451 2054 6f43 6e6e 6365 6574     ...MQTT Connecte
   dca34:	2164 5000 6275 696c 6873 6e69 2067 7473     d!.Publishing st
   dca44:	7461 0a73 5000 6e69 6967 676e 4d20 5451     ats..Pinging MQT
   dca54:	2054 000a 6944 6373 6e6f 656e 7463 6e69     T ..Disconnectin
   dca64:	2067 000a 6961 5172 6175 696c 7974 6156     g ..airQualityVa
   dca74:	206c 203d 6925 000a 6144 676e 7265 6820     l = %i..Danger h
   dca84:	6769 2068 6f70 6c6c 7475 6f69 006e 6948     igh pollution.Hi
   dca94:	6867 7020 6c6f 756c 6974 6e6f 2021 6f46     gh pollution! Fo
   dcaa4:	6372 2065 6973 6e67 6c61 6120 7463 7669     rce signal activ
   dcab4:	0065 6948 6867 7020 6c6f 756c 6974 6e6f     e.High pollution
   dcac4:	6c20 7665 6c65 4800 6769 2068 6f70 6c6c      level.High poll
   dcad4:	7475 6f69 216e 4c00 776f 7020 6c6f 756c     ution!.Low pollu
   dcae4:	6974 6e6f 4c00 776f 7020 6c6f 756c 6974     tion.Low polluti
   dcaf4:	6e6f 0021 7246 7365 2068 6941 0072 7246     on!.Fresh Air.Fr
   dcb04:	7365 2068 6961 0072 6574 706d 2520 2e30     esh air.temp %0.
   dcb14:	3230 0a66 7270 7365 7573 6572 2520 2e30     02f.pressure %0.
   dcb24:	3230 0a66 6c61 6974 7574 6564 2520 2e30     02f.altitude %0.
   dcb34:	3230 0a66 7568 696d 6964 7974 2520 2e30     02f.humidity %0.
   dcb44:	3230 0a66 6f6d 7369 7574 6572 6c20 7665     02f.moisture lev
   dcb54:	6c65 2520 0a69 4400 7461 2065 6e61 2064     el %i..Date and 
   dcb64:	6974 656d 6920 2073 7325 000a 6954 656d     time is %s..Time
   dcb74:	6920 2073 7325 000a 7570 706d 7620 6c61      is %s..pump val
   dcb84:	6575 6920 2073 3025 302e 6632 000a 6f4d     ue is %0.02f..Mo
   dcb94:	7369 7574 6572 5620 6c61 6575 003a 6173     isture Value:.sa
   dcba4:	756d 5f73 7261 6e61 6900 2e6f 6461 6661     mus_aran.io.adaf
   dcbb4:	7572 7469 632e 6d6f 6100 6f69 515f 415a     ruit.com.aio_QZA
   dcbc4:	356c 6d39 7a74 4f68 5843 574e 7a6b 4667     l59mtzhOCXNWkzgF
   dcbd4:	5141 7067 3662 4278 005a 6173 756d 5f73     AQgpb6xBZ.samus_
   dcbe4:	7261 6e61 662f 6565 7364 742f 6d65 4270     aran/feeds/tempB
   dcbf4:	454d 7300 6d61 7375 615f 6172 2f6e 6566     ME.samus_aran/fe
   dcc04:	6465 2f73 7564 7473 6f43 636e 6e65 7274     eds/dustConcentr
   dcc14:	7461 6f69 006e 6173 756d 5f73 7261 6e61     ation.samus_aran
   dcc24:	662f 6565 7364 682f 6d75 6469 7469 4279     /feeds/humidityB
   dcc34:	454d 7300 6d61 7375 615f 6172 2f6e 6566     ME.samus_aran/fe
   dcc44:	6465 2f73 6f6d 7369 7574 6572 6156 756c     eds/moistureValu
   dcc54:	0065 6173 756d 5f73 7261 6e61 662f 6565     e.samus_aran/fee
   dcc64:	7364 612f 7269 7551 6c61 7469 0079 6173     ds/airQuality.sa
   dcc74:	756d 5f73 7261 6e61 662f 6565 7364 702f     mus_aran/feeds/p
   dcc84:	6d75 5f70 7773 7469 6863 6400 6665 7561     ump_switch.defau
   dcc94:	746c 0020 534d 0042 534c 0042 533c 4950     lt .MSB.LSB.<SPI
   dcca4:	6553 7474 6e69 7367 6420 6665 7561 746c     Settings default
   dccb4:	003e 533c 4950 6553 7474 6e69 7367 2520     >.<SPISettings %
   dccc4:	2573 2075 7325 4d20 444f 2545 3e75 0000     s%u %s MODE%u>..

000dccd4 <_ZTVN8particle11SPISettingsE>:
	...
   dccdc:	4bb5 000d 4ba5 000d 4ba7 000d               .K...K...K..

000dcce8 <_ZTV16Adafruit_SSD1306>:
	...
   dccf0:	40c9 000d 49f1 000d 5f45 000d 7359 000d     .@...I..E_..Ys..
   dcd00:	580d 000d 5c5d 000d 569d 000d 5531 000d     .X..]\...V..1U..
   dcd10:	5d19 000d 5db7 000d 5ded 000d 5e09 000d     .]...]...]...^..

000dcd20 <_ZL4font>:
   dcd20:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dcd30:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dcd40:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dcd50:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dcd60:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dcd70:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dcd80:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dcd90:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dcda0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dcdb0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dcdc0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dcdd0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dcde0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dcdf0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dce00:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dce10:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dce20:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dce30:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dce40:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dce50:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dce60:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dce70:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dce80:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dce90:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dcea0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dceb0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dcec0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dced0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dcee0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dcef0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dcf00:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dcf10:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dcf20:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dcf30:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dcf40:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dcf50:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dcf60:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dcf70:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dcf80:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dcf90:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dcfa0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dcfb0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dcfc0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dcfd0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dcfe0:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dcff0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd000:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dd010:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dd020:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dd030:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd040:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd050:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd060:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd070:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd080:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd090:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dd0a0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dd0b0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dd0c0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dd0d0:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dd0e0:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dd0f0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dd100:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dd110:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dd120:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dd130:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dd140:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dd150:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dd160:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dd170:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dd180:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dd190:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dd1a0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dd1b0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dd1c0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   dd1d0:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dd1e0:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dd1f0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dd200:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dd210:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dd21c <_ZTV12Adafruit_GFX>:
	...
   dd22c:	5f45 000d 7359 000d 40a5 000d 5c5d 000d     E_..Ys...@..]\..
   dd23c:	5d81 000d 5d9d 000d 5d19 000d 5db7 000d     .]...]...]...]..
   dd24c:	5ded 000d 5e09 000d                         .]...^..

000dd254 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dd25c:	40cb 000d 49ff 000d 5feb 000d 6097 000d     .@...I..._...`..
   dd26c:	60c9 000d 5fff 000d 603f 000d 7244 706f     .`..._..?`..Drop
   dd27c:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   dd28c:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   dd29c:	2525 6425 252e 6664 4600 6961 656c 2064     %%%d.%df.Failed 
   dd2ac:	6f74 7320 6275 6373 6972 6562 4300 6e6f     to subscribe.Con
   dd2bc:	656e 7463 6f69 206e 6166 6c69 6465 5400     nection failed.T
   dd2cc:	6568 5320 7265 6576 2072 6f64 7365 6e20     he Server does n
   dd2dc:	746f 7320 7075 6f70 7472 7420 6568 6c20     ot support the l
   dd2ec:	7665 6c65 6f20 2066 6874 2065 514d 5454     evel of the MQTT
   dd2fc:	7020 6f72 6f74 6f63 206c 6572 7571 7365      protocol reques
   dd30c:	6574 0064 6854 2065 6c43 6569 746e 6920     ted.The Client i
   dd31c:	6564 746e 6669 6569 2072 7369 6320 726f     dentifier is cor
   dd32c:	6572 7463 5520 4654 382d 6220 7475 6e20     rect UTF-8 but n
   dd33c:	746f 6120 6c6c 776f 6465 6220 2079 6874     ot allowed by th
   dd34c:	2065 6553 7672 7265 5400 6568 4d20 5451     e Server.The MQT
   dd35c:	2054 6573 7672 6369 2065 7369 7520 616e     T service is una
   dd36c:	6176 6c69 6261 656c 5400 6568 6420 7461     vailable.The dat
   dd37c:	2061 6e69 7420 6568 7520 6573 2072 616e     a in the user na
   dd38c:	656d 6f20 2072 6170 7373 6f77 6472 6920     me or password i
   dd39c:	2073 616d 666c 726f 656d 0064 6f4e 2074     s malformed.Not 
   dd3ac:	7561 6874 726f 7a69 6465 7420 206f 6f63     authorized to co
   dd3bc:	6e6e 6365 0074 7845 6563 6465 6465 7220     nnect.Exceeded r
   dd3cc:	6365 6e6f 656e 7463 7220 7461 2065 696c     econnect rate li
   dd3dc:	696d 2e74 5020 656c 7361 2065 7274 2079     mit. Please try 
   dd3ec:	6761 6961 206e 616c 6574 2e72 5900 756f     again later..You
   dd3fc:	6820 7661 2065 6562 6e65 6220 6e61 656e      have been banne
   dd40c:	2064 7266 6d6f 6320 6e6f 656e 7463 6e69     d from connectin
   dd41c:	2e67 5020 656c 7361 2065 6f63 746e 6361     g. Please contac
   dd42c:	2074 6874 2065 514d 5454 7320 7265 6576     t the MQTT serve
   dd43c:	2072 6461 696d 696e 7473 6172 6f74 2072     r administrator 
   dd44c:	6f66 2072 6f6d 6572 6420 7465 6961 736c     for more details
   dd45c:	002e 0000                                   ....

000dd460 <_ZTV13Adafruit_MQTT>:
	...
   dd470:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   dd480:	40a5 000d                                   .@..

000dd484 <CSWTCH.44>:
   dd484:	d2a5 000d d2b9 000d d289 000d d2cb 000d     ................
   dd494:	d310 000d d355 000d d375 000d d3a8 000d     ....U...u.......
   dd4a4:	d3c2 000d d3f9 000d                         ........

000dd4ac <_ZTVN5spark13EthernetClassE>:
	...
   dd4b4:	6e4b 000d 6e41 000d 6e37 000d 6e2d 000d     Kn..An..7n..-n..
   dd4c4:	6e21 000d 6e15 000d 6e09 000d 6e01 000d     !n...n...n...n..
   dd4d4:	6df7 000d 6ded 000d 81a9 000d               .m...m......

000dd4e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd4e0:	0800 1810 2820 3830                         .... (08

000dd4e8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dd4f0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   dd500:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000dd510 <_ZTV9IPAddress>:
	...
   dd518:	7745 000d 7735 000d 7737 000d               Ew..5w..7w..

000dd524 <_ZTV9USBSerial>:
	...
   dd52c:	7847 000d 78af 000d 7885 000d 7359 000d     Gx...x...x..Ys..
   dd53c:	7877 000d 7849 000d 7859 000d 78a9 000d     wx..Ix..Yx...x..
   dd54c:	7869 000d 7843 000d                         ix..Cx..

000dd554 <_ZTV11USARTSerial>:
	...
   dd55c:	7951 000d 79bd 000d 7995 000d 7359 000d     Qy...y...y..Ys..
   dd56c:	7965 000d 7981 000d 7973 000d 798f 000d     ey...y..sy...y..
   dd57c:	7953 000d 7957 000d                         Sy..Wy..

000dd584 <_ZTV7TwoWire>:
	...
   dd58c:	7a4d 000d 7a97 000d 7a6f 000d 7a4f 000d     Mz...z..oz..Oz..
   dd59c:	7a77 000d 7a7f 000d 7a87 000d 7a8f 000d     wz...z...z...z..
   dd5ac:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   dd5bc:	2072 203d 6425 0000                         r = %d..

000dd5c4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd5cc:	7bcb 000d 7bed 000d 80bf 000d 7bfb 000d     .{...{.......{..
   dd5dc:	7bcd 000d                                   .{..

000dd5e0 <_ZTV9TCPClient>:
	...
   dd5e8:	40cd 000d 412d 000d 7b49 000d 7b63 000d     .@..-A..I{..c{..
   dd5f8:	7f55 000d 7cc7 000d 7c99 000d 7b8d 000d     U....|...|...{..
   dd608:	7e5d 000d 7d51 000d 7cfb 000d 8009 000d     ]~..Q}...|......
   dd618:	7b8f 000d 7bc1 000d 7b75 000d 7bff 000d     .{...{..u{...{..
   dd628:	7c79 000d                                   y|..

000dd62c <_ZTVN5spark9WiFiClassE>:
	...
   dd634:	8123 000d 8119 000d 810f 000d 80c5 000d     #...............
   dd644:	8103 000d 80f7 000d 80eb 000d 80e3 000d     ................
   dd654:	80d9 000d 80cf 000d 81a9 000d               ............

000dd660 <_ZTVN5spark12NetworkClassE>:
	...
   dd668:	8141 000d 814b 000d 8155 000d 815f 000d     A...K...U..._...
   dd678:	8169 000d 8175 000d 8181 000d 818d 000d     i...u...........
   dd688:	8195 000d 819f 000d 81a9 000d               ............

000dd694 <_ZSt7nothrow>:
	...

000dd695 <_ZTSSt19_Sp_make_shared_tag>:
   dd695:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dd6a5:	6572 5f64 6174 0067 0000                     red_tag....

000dd6b0 <_ZTISt19_Sp_make_shared_tag>:
   dd6b0:	d6f0 000d d695 000d                         ........

000dd6b8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dd6b8:	d750 000d d6c4 000d d774 000d               P.......t...

000dd6c4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dd6c4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dd6d4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dd6e4:	0045 0000                                   E...

000dd6e8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dd6e8:	0000 0000 d6b8 000d 84e1 000d 84f5 000d     ................
   dd6f8:	8689 000d 8689 000d 855f 000d 84a1 000d     ........_.......
   dd708:	8547 000d 8509 000d 84d5 000d               G...........

000dd714 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dd714:	d750 000d d720 000d d6b8 000d               P... .......

000dd720 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dd720:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dd730:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dd740:	666e 456f 0000 0000                         nfoE....

000dd748 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dd748:	0000 0000 d714 000d 8589 000d 859d 000d     ................
   dd758:	8689 000d 8689 000d 855f 000d 84a1 000d     ........_.......
   dd768:	865d 000d 85e9 000d 85b1 000d               ]...........

000dd774 <_ZTISt9type_info>:
   dd774:	d6f0 000d d77c 000d                         ....|...

000dd77c <_ZTSSt9type_info>:
   dd77c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   dd78c:	6f70 0077 0000 0000 0000 0000               pow.........

000dd798 <TWO52>:
   dd798:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   dd7a8:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   dd7b8:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000dd7c8 <day_name.6145>:
   dd7c8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd7d8:	6972 6153                                    riSat

000dd7dd <mon_name.6146>:
   dd7dd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd7ed:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd7fd:	4476 6365 666e 6900 696e 7974 0000           vDecnf.inity...

000dd80c <fpi.7566>:
   dd80c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dd81c:	0000 0000                                   ....

000dd820 <fpinan.7602>:
   dd820:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dd838 <tinytens>:
   dd838:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dd848:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dd858:	6f43 64ac 0628 1168                         Co.d(.h.

000dd860 <_ctype_>:
   dd860:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd870:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd880:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd890:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd8a0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd8b0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd8c0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd8d0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd8e0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd964 <_C_numeric_locale>:
   dd964:	ca25 000d c981 000d e234 2003 0043 4f50     %.......4.. C.PO
   dd974:	4953 0058                                   SIX.

000dd978 <__mprec_bigtens>:
   dd978:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dd988:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dd998:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dd9a0 <__mprec_tens>:
   dd9a0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dd9b0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dd9c0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dd9d0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dd9e0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dd9f0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dda00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dda10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dda20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dda30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dda40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dda50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dda60:	9db4 79d9 7843 44ea                         ...yCx.D

000dda68 <p05.7490>:
   dda68:	0005 0000 0019 0000 007d 0000               ........}...

000dda74 <link_const_variable_data_end>:
   dda74:	000d4a0d 	.word	0x000d4a0d
   dda78:	000d6e55 	.word	0x000d6e55
   dda7c:	000d70c1 	.word	0x000d70c1
   dda80:	000d7331 	.word	0x000d7331
   dda84:	000d7485 	.word	0x000d7485
   dda88:	000d75bd 	.word	0x000d75bd
   dda8c:	000d75f5 	.word	0x000d75f5
   dda90:	000d812d 	.word	0x000d812d
   dda94:	000d827d 	.word	0x000d827d

000dda98 <link_constructors_end>:
	...
